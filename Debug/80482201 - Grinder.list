
80482201 - Grinder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08005800  08005800  00005800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecf8  08005940  08005940  00005940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08014638  08014638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147a0  080147a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080147a0  080147a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147a8  080147a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147a8  080147a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147ac  080147ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080147b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f2c  20000078  08014824  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000fa4  08014824  00020fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190a8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053c1  00000000  00000000  00039145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0003e508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdb4  00000000  00000000  00041018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020481  00000000  00000000  0005cdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956fb  00000000  00000000  0007d24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112948  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c20  00000000  00000000  00112998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005940 <__do_global_dtors_aux>:
 8005940:	b510      	push	{r4, lr}
 8005942:	4c05      	ldr	r4, [pc, #20]	; (8005958 <__do_global_dtors_aux+0x18>)
 8005944:	7823      	ldrb	r3, [r4, #0]
 8005946:	b933      	cbnz	r3, 8005956 <__do_global_dtors_aux+0x16>
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <__do_global_dtors_aux+0x1c>)
 800594a:	b113      	cbz	r3, 8005952 <__do_global_dtors_aux+0x12>
 800594c:	4804      	ldr	r0, [pc, #16]	; (8005960 <__do_global_dtors_aux+0x20>)
 800594e:	f3af 8000 	nop.w
 8005952:	2301      	movs	r3, #1
 8005954:	7023      	strb	r3, [r4, #0]
 8005956:	bd10      	pop	{r4, pc}
 8005958:	20000078 	.word	0x20000078
 800595c:	00000000 	.word	0x00000000
 8005960:	08014620 	.word	0x08014620

08005964 <frame_dummy>:
 8005964:	b508      	push	{r3, lr}
 8005966:	4b03      	ldr	r3, [pc, #12]	; (8005974 <frame_dummy+0x10>)
 8005968:	b11b      	cbz	r3, 8005972 <frame_dummy+0xe>
 800596a:	4903      	ldr	r1, [pc, #12]	; (8005978 <frame_dummy+0x14>)
 800596c:	4803      	ldr	r0, [pc, #12]	; (800597c <frame_dummy+0x18>)
 800596e:	f3af 8000 	nop.w
 8005972:	bd08      	pop	{r3, pc}
 8005974:	00000000 	.word	0x00000000
 8005978:	2000007c 	.word	0x2000007c
 800597c:	08014620 	.word	0x08014620

08005980 <strlen>:
 8005980:	4603      	mov	r3, r0
 8005982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005986:	2a00      	cmp	r2, #0
 8005988:	d1fb      	bne.n	8005982 <strlen+0x2>
 800598a:	1a18      	subs	r0, r3, r0
 800598c:	3801      	subs	r0, #1
 800598e:	4770      	bx	lr

08005990 <__aeabi_drsub>:
 8005990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005994:	e002      	b.n	800599c <__adddf3>
 8005996:	bf00      	nop

08005998 <__aeabi_dsub>:
 8005998:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800599c <__adddf3>:
 800599c:	b530      	push	{r4, r5, lr}
 800599e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80059a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80059a6:	ea94 0f05 	teq	r4, r5
 80059aa:	bf08      	it	eq
 80059ac:	ea90 0f02 	teqeq	r0, r2
 80059b0:	bf1f      	itttt	ne
 80059b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80059b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80059ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80059be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80059c2:	f000 80e2 	beq.w	8005b8a <__adddf3+0x1ee>
 80059c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80059ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80059ce:	bfb8      	it	lt
 80059d0:	426d      	neglt	r5, r5
 80059d2:	dd0c      	ble.n	80059ee <__adddf3+0x52>
 80059d4:	442c      	add	r4, r5
 80059d6:	ea80 0202 	eor.w	r2, r0, r2
 80059da:	ea81 0303 	eor.w	r3, r1, r3
 80059de:	ea82 0000 	eor.w	r0, r2, r0
 80059e2:	ea83 0101 	eor.w	r1, r3, r1
 80059e6:	ea80 0202 	eor.w	r2, r0, r2
 80059ea:	ea81 0303 	eor.w	r3, r1, r3
 80059ee:	2d36      	cmp	r5, #54	; 0x36
 80059f0:	bf88      	it	hi
 80059f2:	bd30      	pophi	{r4, r5, pc}
 80059f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80059f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80059fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005a00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005a04:	d002      	beq.n	8005a0c <__adddf3+0x70>
 8005a06:	4240      	negs	r0, r0
 8005a08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005a0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005a10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005a14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005a18:	d002      	beq.n	8005a20 <__adddf3+0x84>
 8005a1a:	4252      	negs	r2, r2
 8005a1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005a20:	ea94 0f05 	teq	r4, r5
 8005a24:	f000 80a7 	beq.w	8005b76 <__adddf3+0x1da>
 8005a28:	f1a4 0401 	sub.w	r4, r4, #1
 8005a2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8005a30:	db0d      	blt.n	8005a4e <__adddf3+0xb2>
 8005a32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005a36:	fa22 f205 	lsr.w	r2, r2, r5
 8005a3a:	1880      	adds	r0, r0, r2
 8005a3c:	f141 0100 	adc.w	r1, r1, #0
 8005a40:	fa03 f20e 	lsl.w	r2, r3, lr
 8005a44:	1880      	adds	r0, r0, r2
 8005a46:	fa43 f305 	asr.w	r3, r3, r5
 8005a4a:	4159      	adcs	r1, r3
 8005a4c:	e00e      	b.n	8005a6c <__adddf3+0xd0>
 8005a4e:	f1a5 0520 	sub.w	r5, r5, #32
 8005a52:	f10e 0e20 	add.w	lr, lr, #32
 8005a56:	2a01      	cmp	r2, #1
 8005a58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005a5c:	bf28      	it	cs
 8005a5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005a62:	fa43 f305 	asr.w	r3, r3, r5
 8005a66:	18c0      	adds	r0, r0, r3
 8005a68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005a6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005a70:	d507      	bpl.n	8005a82 <__adddf3+0xe6>
 8005a72:	f04f 0e00 	mov.w	lr, #0
 8005a76:	f1dc 0c00 	rsbs	ip, ip, #0
 8005a7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005a7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8005a82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005a86:	d31b      	bcc.n	8005ac0 <__adddf3+0x124>
 8005a88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005a8c:	d30c      	bcc.n	8005aa8 <__adddf3+0x10c>
 8005a8e:	0849      	lsrs	r1, r1, #1
 8005a90:	ea5f 0030 	movs.w	r0, r0, rrx
 8005a94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005a98:	f104 0401 	add.w	r4, r4, #1
 8005a9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005aa0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005aa4:	f080 809a 	bcs.w	8005bdc <__adddf3+0x240>
 8005aa8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005aac:	bf08      	it	eq
 8005aae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005ab2:	f150 0000 	adcs.w	r0, r0, #0
 8005ab6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005aba:	ea41 0105 	orr.w	r1, r1, r5
 8005abe:	bd30      	pop	{r4, r5, pc}
 8005ac0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005ac4:	4140      	adcs	r0, r0
 8005ac6:	eb41 0101 	adc.w	r1, r1, r1
 8005aca:	3c01      	subs	r4, #1
 8005acc:	bf28      	it	cs
 8005ace:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005ad2:	d2e9      	bcs.n	8005aa8 <__adddf3+0x10c>
 8005ad4:	f091 0f00 	teq	r1, #0
 8005ad8:	bf04      	itt	eq
 8005ada:	4601      	moveq	r1, r0
 8005adc:	2000      	moveq	r0, #0
 8005ade:	fab1 f381 	clz	r3, r1
 8005ae2:	bf08      	it	eq
 8005ae4:	3320      	addeq	r3, #32
 8005ae6:	f1a3 030b 	sub.w	r3, r3, #11
 8005aea:	f1b3 0220 	subs.w	r2, r3, #32
 8005aee:	da0c      	bge.n	8005b0a <__adddf3+0x16e>
 8005af0:	320c      	adds	r2, #12
 8005af2:	dd08      	ble.n	8005b06 <__adddf3+0x16a>
 8005af4:	f102 0c14 	add.w	ip, r2, #20
 8005af8:	f1c2 020c 	rsb	r2, r2, #12
 8005afc:	fa01 f00c 	lsl.w	r0, r1, ip
 8005b00:	fa21 f102 	lsr.w	r1, r1, r2
 8005b04:	e00c      	b.n	8005b20 <__adddf3+0x184>
 8005b06:	f102 0214 	add.w	r2, r2, #20
 8005b0a:	bfd8      	it	le
 8005b0c:	f1c2 0c20 	rsble	ip, r2, #32
 8005b10:	fa01 f102 	lsl.w	r1, r1, r2
 8005b14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005b18:	bfdc      	itt	le
 8005b1a:	ea41 010c 	orrle.w	r1, r1, ip
 8005b1e:	4090      	lslle	r0, r2
 8005b20:	1ae4      	subs	r4, r4, r3
 8005b22:	bfa2      	ittt	ge
 8005b24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005b28:	4329      	orrge	r1, r5
 8005b2a:	bd30      	popge	{r4, r5, pc}
 8005b2c:	ea6f 0404 	mvn.w	r4, r4
 8005b30:	3c1f      	subs	r4, #31
 8005b32:	da1c      	bge.n	8005b6e <__adddf3+0x1d2>
 8005b34:	340c      	adds	r4, #12
 8005b36:	dc0e      	bgt.n	8005b56 <__adddf3+0x1ba>
 8005b38:	f104 0414 	add.w	r4, r4, #20
 8005b3c:	f1c4 0220 	rsb	r2, r4, #32
 8005b40:	fa20 f004 	lsr.w	r0, r0, r4
 8005b44:	fa01 f302 	lsl.w	r3, r1, r2
 8005b48:	ea40 0003 	orr.w	r0, r0, r3
 8005b4c:	fa21 f304 	lsr.w	r3, r1, r4
 8005b50:	ea45 0103 	orr.w	r1, r5, r3
 8005b54:	bd30      	pop	{r4, r5, pc}
 8005b56:	f1c4 040c 	rsb	r4, r4, #12
 8005b5a:	f1c4 0220 	rsb	r2, r4, #32
 8005b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8005b62:	fa01 f304 	lsl.w	r3, r1, r4
 8005b66:	ea40 0003 	orr.w	r0, r0, r3
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	bd30      	pop	{r4, r5, pc}
 8005b6e:	fa21 f004 	lsr.w	r0, r1, r4
 8005b72:	4629      	mov	r1, r5
 8005b74:	bd30      	pop	{r4, r5, pc}
 8005b76:	f094 0f00 	teq	r4, #0
 8005b7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005b7e:	bf06      	itte	eq
 8005b80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005b84:	3401      	addeq	r4, #1
 8005b86:	3d01      	subne	r5, #1
 8005b88:	e74e      	b.n	8005a28 <__adddf3+0x8c>
 8005b8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005b8e:	bf18      	it	ne
 8005b90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005b94:	d029      	beq.n	8005bea <__adddf3+0x24e>
 8005b96:	ea94 0f05 	teq	r4, r5
 8005b9a:	bf08      	it	eq
 8005b9c:	ea90 0f02 	teqeq	r0, r2
 8005ba0:	d005      	beq.n	8005bae <__adddf3+0x212>
 8005ba2:	ea54 0c00 	orrs.w	ip, r4, r0
 8005ba6:	bf04      	itt	eq
 8005ba8:	4619      	moveq	r1, r3
 8005baa:	4610      	moveq	r0, r2
 8005bac:	bd30      	pop	{r4, r5, pc}
 8005bae:	ea91 0f03 	teq	r1, r3
 8005bb2:	bf1e      	ittt	ne
 8005bb4:	2100      	movne	r1, #0
 8005bb6:	2000      	movne	r0, #0
 8005bb8:	bd30      	popne	{r4, r5, pc}
 8005bba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005bbe:	d105      	bne.n	8005bcc <__adddf3+0x230>
 8005bc0:	0040      	lsls	r0, r0, #1
 8005bc2:	4149      	adcs	r1, r1
 8005bc4:	bf28      	it	cs
 8005bc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005bca:	bd30      	pop	{r4, r5, pc}
 8005bcc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005bd0:	bf3c      	itt	cc
 8005bd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005bd6:	bd30      	popcc	{r4, r5, pc}
 8005bd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005bdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005be0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	bd30      	pop	{r4, r5, pc}
 8005bea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005bee:	bf1a      	itte	ne
 8005bf0:	4619      	movne	r1, r3
 8005bf2:	4610      	movne	r0, r2
 8005bf4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005bf8:	bf1c      	itt	ne
 8005bfa:	460b      	movne	r3, r1
 8005bfc:	4602      	movne	r2, r0
 8005bfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005c02:	bf06      	itte	eq
 8005c04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005c08:	ea91 0f03 	teqeq	r1, r3
 8005c0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005c10:	bd30      	pop	{r4, r5, pc}
 8005c12:	bf00      	nop

08005c14 <__aeabi_ui2d>:
 8005c14:	f090 0f00 	teq	r0, #0
 8005c18:	bf04      	itt	eq
 8005c1a:	2100      	moveq	r1, #0
 8005c1c:	4770      	bxeq	lr
 8005c1e:	b530      	push	{r4, r5, lr}
 8005c20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005c24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005c28:	f04f 0500 	mov.w	r5, #0
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	e750      	b.n	8005ad4 <__adddf3+0x138>
 8005c32:	bf00      	nop

08005c34 <__aeabi_i2d>:
 8005c34:	f090 0f00 	teq	r0, #0
 8005c38:	bf04      	itt	eq
 8005c3a:	2100      	moveq	r1, #0
 8005c3c:	4770      	bxeq	lr
 8005c3e:	b530      	push	{r4, r5, lr}
 8005c40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005c44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005c48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005c4c:	bf48      	it	mi
 8005c4e:	4240      	negmi	r0, r0
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	e73e      	b.n	8005ad4 <__adddf3+0x138>
 8005c56:	bf00      	nop

08005c58 <__aeabi_f2d>:
 8005c58:	0042      	lsls	r2, r0, #1
 8005c5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005c5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005c62:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005c66:	bf1f      	itttt	ne
 8005c68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005c6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005c70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005c74:	4770      	bxne	lr
 8005c76:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005c7a:	bf08      	it	eq
 8005c7c:	4770      	bxeq	lr
 8005c7e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8005c82:	bf04      	itt	eq
 8005c84:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8005c88:	4770      	bxeq	lr
 8005c8a:	b530      	push	{r4, r5, lr}
 8005c8c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005c90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005c94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005c98:	e71c      	b.n	8005ad4 <__adddf3+0x138>
 8005c9a:	bf00      	nop

08005c9c <__aeabi_ul2d>:
 8005c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8005ca0:	bf08      	it	eq
 8005ca2:	4770      	bxeq	lr
 8005ca4:	b530      	push	{r4, r5, lr}
 8005ca6:	f04f 0500 	mov.w	r5, #0
 8005caa:	e00a      	b.n	8005cc2 <__aeabi_l2d+0x16>

08005cac <__aeabi_l2d>:
 8005cac:	ea50 0201 	orrs.w	r2, r0, r1
 8005cb0:	bf08      	it	eq
 8005cb2:	4770      	bxeq	lr
 8005cb4:	b530      	push	{r4, r5, lr}
 8005cb6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8005cba:	d502      	bpl.n	8005cc2 <__aeabi_l2d+0x16>
 8005cbc:	4240      	negs	r0, r0
 8005cbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005cc2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005cc6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005cca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005cce:	f43f aed8 	beq.w	8005a82 <__adddf3+0xe6>
 8005cd2:	f04f 0203 	mov.w	r2, #3
 8005cd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005cda:	bf18      	it	ne
 8005cdc:	3203      	addne	r2, #3
 8005cde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005ce2:	bf18      	it	ne
 8005ce4:	3203      	addne	r2, #3
 8005ce6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005cea:	f1c2 0320 	rsb	r3, r2, #32
 8005cee:	fa00 fc03 	lsl.w	ip, r0, r3
 8005cf2:	fa20 f002 	lsr.w	r0, r0, r2
 8005cf6:	fa01 fe03 	lsl.w	lr, r1, r3
 8005cfa:	ea40 000e 	orr.w	r0, r0, lr
 8005cfe:	fa21 f102 	lsr.w	r1, r1, r2
 8005d02:	4414      	add	r4, r2
 8005d04:	e6bd      	b.n	8005a82 <__adddf3+0xe6>
 8005d06:	bf00      	nop

08005d08 <__aeabi_dmul>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005d0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005d12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005d16:	bf1d      	ittte	ne
 8005d18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005d1c:	ea94 0f0c 	teqne	r4, ip
 8005d20:	ea95 0f0c 	teqne	r5, ip
 8005d24:	f000 f8de 	bleq	8005ee4 <__aeabi_dmul+0x1dc>
 8005d28:	442c      	add	r4, r5
 8005d2a:	ea81 0603 	eor.w	r6, r1, r3
 8005d2e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005d32:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005d36:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005d3a:	bf18      	it	ne
 8005d3c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005d40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005d44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d48:	d038      	beq.n	8005dbc <__aeabi_dmul+0xb4>
 8005d4a:	fba0 ce02 	umull	ip, lr, r0, r2
 8005d4e:	f04f 0500 	mov.w	r5, #0
 8005d52:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005d56:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005d5a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005d5e:	f04f 0600 	mov.w	r6, #0
 8005d62:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005d66:	f09c 0f00 	teq	ip, #0
 8005d6a:	bf18      	it	ne
 8005d6c:	f04e 0e01 	orrne.w	lr, lr, #1
 8005d70:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005d74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005d78:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005d7c:	d204      	bcs.n	8005d88 <__aeabi_dmul+0x80>
 8005d7e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005d82:	416d      	adcs	r5, r5
 8005d84:	eb46 0606 	adc.w	r6, r6, r6
 8005d88:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005d8c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005d90:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005d94:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005d98:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005d9c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005da0:	bf88      	it	hi
 8005da2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005da6:	d81e      	bhi.n	8005de6 <__aeabi_dmul+0xde>
 8005da8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005dac:	bf08      	it	eq
 8005dae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005db2:	f150 0000 	adcs.w	r0, r0, #0
 8005db6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005dc0:	ea46 0101 	orr.w	r1, r6, r1
 8005dc4:	ea40 0002 	orr.w	r0, r0, r2
 8005dc8:	ea81 0103 	eor.w	r1, r1, r3
 8005dcc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005dd0:	bfc2      	ittt	gt
 8005dd2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005dd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005dda:	bd70      	popgt	{r4, r5, r6, pc}
 8005ddc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005de0:	f04f 0e00 	mov.w	lr, #0
 8005de4:	3c01      	subs	r4, #1
 8005de6:	f300 80ab 	bgt.w	8005f40 <__aeabi_dmul+0x238>
 8005dea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005dee:	bfde      	ittt	le
 8005df0:	2000      	movle	r0, #0
 8005df2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005df6:	bd70      	pople	{r4, r5, r6, pc}
 8005df8:	f1c4 0400 	rsb	r4, r4, #0
 8005dfc:	3c20      	subs	r4, #32
 8005dfe:	da35      	bge.n	8005e6c <__aeabi_dmul+0x164>
 8005e00:	340c      	adds	r4, #12
 8005e02:	dc1b      	bgt.n	8005e3c <__aeabi_dmul+0x134>
 8005e04:	f104 0414 	add.w	r4, r4, #20
 8005e08:	f1c4 0520 	rsb	r5, r4, #32
 8005e0c:	fa00 f305 	lsl.w	r3, r0, r5
 8005e10:	fa20 f004 	lsr.w	r0, r0, r4
 8005e14:	fa01 f205 	lsl.w	r2, r1, r5
 8005e18:	ea40 0002 	orr.w	r0, r0, r2
 8005e1c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005e20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005e28:	fa21 f604 	lsr.w	r6, r1, r4
 8005e2c:	eb42 0106 	adc.w	r1, r2, r6
 8005e30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005e34:	bf08      	it	eq
 8005e36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	f1c4 040c 	rsb	r4, r4, #12
 8005e40:	f1c4 0520 	rsb	r5, r4, #32
 8005e44:	fa00 f304 	lsl.w	r3, r0, r4
 8005e48:	fa20 f005 	lsr.w	r0, r0, r5
 8005e4c:	fa01 f204 	lsl.w	r2, r1, r4
 8005e50:	ea40 0002 	orr.w	r0, r0, r2
 8005e54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005e58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005e5c:	f141 0100 	adc.w	r1, r1, #0
 8005e60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005e64:	bf08      	it	eq
 8005e66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f1c4 0520 	rsb	r5, r4, #32
 8005e70:	fa00 f205 	lsl.w	r2, r0, r5
 8005e74:	ea4e 0e02 	orr.w	lr, lr, r2
 8005e78:	fa20 f304 	lsr.w	r3, r0, r4
 8005e7c:	fa01 f205 	lsl.w	r2, r1, r5
 8005e80:	ea43 0302 	orr.w	r3, r3, r2
 8005e84:	fa21 f004 	lsr.w	r0, r1, r4
 8005e88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005e8c:	fa21 f204 	lsr.w	r2, r1, r4
 8005e90:	ea20 0002 	bic.w	r0, r0, r2
 8005e94:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005e98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005e9c:	bf08      	it	eq
 8005e9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	f094 0f00 	teq	r4, #0
 8005ea8:	d10f      	bne.n	8005eca <__aeabi_dmul+0x1c2>
 8005eaa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005eae:	0040      	lsls	r0, r0, #1
 8005eb0:	eb41 0101 	adc.w	r1, r1, r1
 8005eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005eb8:	bf08      	it	eq
 8005eba:	3c01      	subeq	r4, #1
 8005ebc:	d0f7      	beq.n	8005eae <__aeabi_dmul+0x1a6>
 8005ebe:	ea41 0106 	orr.w	r1, r1, r6
 8005ec2:	f095 0f00 	teq	r5, #0
 8005ec6:	bf18      	it	ne
 8005ec8:	4770      	bxne	lr
 8005eca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005ece:	0052      	lsls	r2, r2, #1
 8005ed0:	eb43 0303 	adc.w	r3, r3, r3
 8005ed4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005ed8:	bf08      	it	eq
 8005eda:	3d01      	subeq	r5, #1
 8005edc:	d0f7      	beq.n	8005ece <__aeabi_dmul+0x1c6>
 8005ede:	ea43 0306 	orr.w	r3, r3, r6
 8005ee2:	4770      	bx	lr
 8005ee4:	ea94 0f0c 	teq	r4, ip
 8005ee8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005eec:	bf18      	it	ne
 8005eee:	ea95 0f0c 	teqne	r5, ip
 8005ef2:	d00c      	beq.n	8005f0e <__aeabi_dmul+0x206>
 8005ef4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005ef8:	bf18      	it	ne
 8005efa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005efe:	d1d1      	bne.n	8005ea4 <__aeabi_dmul+0x19c>
 8005f00:	ea81 0103 	eor.w	r1, r1, r3
 8005f04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005f08:	f04f 0000 	mov.w	r0, #0
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
 8005f0e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005f12:	bf06      	itte	eq
 8005f14:	4610      	moveq	r0, r2
 8005f16:	4619      	moveq	r1, r3
 8005f18:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005f1c:	d019      	beq.n	8005f52 <__aeabi_dmul+0x24a>
 8005f1e:	ea94 0f0c 	teq	r4, ip
 8005f22:	d102      	bne.n	8005f2a <__aeabi_dmul+0x222>
 8005f24:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005f28:	d113      	bne.n	8005f52 <__aeabi_dmul+0x24a>
 8005f2a:	ea95 0f0c 	teq	r5, ip
 8005f2e:	d105      	bne.n	8005f3c <__aeabi_dmul+0x234>
 8005f30:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005f34:	bf1c      	itt	ne
 8005f36:	4610      	movne	r0, r2
 8005f38:	4619      	movne	r1, r3
 8005f3a:	d10a      	bne.n	8005f52 <__aeabi_dmul+0x24a>
 8005f3c:	ea81 0103 	eor.w	r1, r1, r3
 8005f40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005f44:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005f48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f4c:	f04f 0000 	mov.w	r0, #0
 8005f50:	bd70      	pop	{r4, r5, r6, pc}
 8005f52:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005f56:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}

08005f5c <__aeabi_ddiv>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005f62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005f66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005f6a:	bf1d      	ittte	ne
 8005f6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005f70:	ea94 0f0c 	teqne	r4, ip
 8005f74:	ea95 0f0c 	teqne	r5, ip
 8005f78:	f000 f8a7 	bleq	80060ca <__aeabi_ddiv+0x16e>
 8005f7c:	eba4 0405 	sub.w	r4, r4, r5
 8005f80:	ea81 0e03 	eor.w	lr, r1, r3
 8005f84:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005f88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005f8c:	f000 8088 	beq.w	80060a0 <__aeabi_ddiv+0x144>
 8005f90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005f94:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005f98:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005f9c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005fa0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005fa4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005fa8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005fac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005fb0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005fb4:	429d      	cmp	r5, r3
 8005fb6:	bf08      	it	eq
 8005fb8:	4296      	cmpeq	r6, r2
 8005fba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005fbe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005fc2:	d202      	bcs.n	8005fca <__aeabi_ddiv+0x6e>
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	ea4f 0232 	mov.w	r2, r2, rrx
 8005fca:	1ab6      	subs	r6, r6, r2
 8005fcc:	eb65 0503 	sbc.w	r5, r5, r3
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005fd6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005fda:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005fde:	ebb6 0e02 	subs.w	lr, r6, r2
 8005fe2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005fe6:	bf22      	ittt	cs
 8005fe8:	1ab6      	subcs	r6, r6, r2
 8005fea:	4675      	movcs	r5, lr
 8005fec:	ea40 000c 	orrcs.w	r0, r0, ip
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005ff6:	ebb6 0e02 	subs.w	lr, r6, r2
 8005ffa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005ffe:	bf22      	ittt	cs
 8006000:	1ab6      	subcs	r6, r6, r2
 8006002:	4675      	movcs	r5, lr
 8006004:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	ea4f 0232 	mov.w	r2, r2, rrx
 800600e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006012:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006016:	bf22      	ittt	cs
 8006018:	1ab6      	subcs	r6, r6, r2
 800601a:	4675      	movcs	r5, lr
 800601c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006020:	085b      	lsrs	r3, r3, #1
 8006022:	ea4f 0232 	mov.w	r2, r2, rrx
 8006026:	ebb6 0e02 	subs.w	lr, r6, r2
 800602a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800602e:	bf22      	ittt	cs
 8006030:	1ab6      	subcs	r6, r6, r2
 8006032:	4675      	movcs	r5, lr
 8006034:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006038:	ea55 0e06 	orrs.w	lr, r5, r6
 800603c:	d018      	beq.n	8006070 <__aeabi_ddiv+0x114>
 800603e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006042:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006046:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800604a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800604e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006052:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006056:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800605a:	d1c0      	bne.n	8005fde <__aeabi_ddiv+0x82>
 800605c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006060:	d10b      	bne.n	800607a <__aeabi_ddiv+0x11e>
 8006062:	ea41 0100 	orr.w	r1, r1, r0
 8006066:	f04f 0000 	mov.w	r0, #0
 800606a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800606e:	e7b6      	b.n	8005fde <__aeabi_ddiv+0x82>
 8006070:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006074:	bf04      	itt	eq
 8006076:	4301      	orreq	r1, r0
 8006078:	2000      	moveq	r0, #0
 800607a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800607e:	bf88      	it	hi
 8006080:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006084:	f63f aeaf 	bhi.w	8005de6 <__aeabi_dmul+0xde>
 8006088:	ebb5 0c03 	subs.w	ip, r5, r3
 800608c:	bf04      	itt	eq
 800608e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006096:	f150 0000 	adcs.w	r0, r0, #0
 800609a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80060a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80060a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80060ac:	bfc2      	ittt	gt
 80060ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80060b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80060b6:	bd70      	popgt	{r4, r5, r6, pc}
 80060b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80060bc:	f04f 0e00 	mov.w	lr, #0
 80060c0:	3c01      	subs	r4, #1
 80060c2:	e690      	b.n	8005de6 <__aeabi_dmul+0xde>
 80060c4:	ea45 0e06 	orr.w	lr, r5, r6
 80060c8:	e68d      	b.n	8005de6 <__aeabi_dmul+0xde>
 80060ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80060ce:	ea94 0f0c 	teq	r4, ip
 80060d2:	bf08      	it	eq
 80060d4:	ea95 0f0c 	teqeq	r5, ip
 80060d8:	f43f af3b 	beq.w	8005f52 <__aeabi_dmul+0x24a>
 80060dc:	ea94 0f0c 	teq	r4, ip
 80060e0:	d10a      	bne.n	80060f8 <__aeabi_ddiv+0x19c>
 80060e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80060e6:	f47f af34 	bne.w	8005f52 <__aeabi_dmul+0x24a>
 80060ea:	ea95 0f0c 	teq	r5, ip
 80060ee:	f47f af25 	bne.w	8005f3c <__aeabi_dmul+0x234>
 80060f2:	4610      	mov	r0, r2
 80060f4:	4619      	mov	r1, r3
 80060f6:	e72c      	b.n	8005f52 <__aeabi_dmul+0x24a>
 80060f8:	ea95 0f0c 	teq	r5, ip
 80060fc:	d106      	bne.n	800610c <__aeabi_ddiv+0x1b0>
 80060fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006102:	f43f aefd 	beq.w	8005f00 <__aeabi_dmul+0x1f8>
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	e722      	b.n	8005f52 <__aeabi_dmul+0x24a>
 800610c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006110:	bf18      	it	ne
 8006112:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006116:	f47f aec5 	bne.w	8005ea4 <__aeabi_dmul+0x19c>
 800611a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800611e:	f47f af0d 	bne.w	8005f3c <__aeabi_dmul+0x234>
 8006122:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006126:	f47f aeeb 	bne.w	8005f00 <__aeabi_dmul+0x1f8>
 800612a:	e712      	b.n	8005f52 <__aeabi_dmul+0x24a>

0800612c <__gedf2>:
 800612c:	f04f 3cff 	mov.w	ip, #4294967295
 8006130:	e006      	b.n	8006140 <__cmpdf2+0x4>
 8006132:	bf00      	nop

08006134 <__ledf2>:
 8006134:	f04f 0c01 	mov.w	ip, #1
 8006138:	e002      	b.n	8006140 <__cmpdf2+0x4>
 800613a:	bf00      	nop

0800613c <__cmpdf2>:
 800613c:	f04f 0c01 	mov.w	ip, #1
 8006140:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006144:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006148:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800614c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006150:	bf18      	it	ne
 8006152:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006156:	d01b      	beq.n	8006190 <__cmpdf2+0x54>
 8006158:	b001      	add	sp, #4
 800615a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800615e:	bf0c      	ite	eq
 8006160:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006164:	ea91 0f03 	teqne	r1, r3
 8006168:	bf02      	ittt	eq
 800616a:	ea90 0f02 	teqeq	r0, r2
 800616e:	2000      	moveq	r0, #0
 8006170:	4770      	bxeq	lr
 8006172:	f110 0f00 	cmn.w	r0, #0
 8006176:	ea91 0f03 	teq	r1, r3
 800617a:	bf58      	it	pl
 800617c:	4299      	cmppl	r1, r3
 800617e:	bf08      	it	eq
 8006180:	4290      	cmpeq	r0, r2
 8006182:	bf2c      	ite	cs
 8006184:	17d8      	asrcs	r0, r3, #31
 8006186:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800618a:	f040 0001 	orr.w	r0, r0, #1
 800618e:	4770      	bx	lr
 8006190:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006194:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006198:	d102      	bne.n	80061a0 <__cmpdf2+0x64>
 800619a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800619e:	d107      	bne.n	80061b0 <__cmpdf2+0x74>
 80061a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80061a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80061a8:	d1d6      	bne.n	8006158 <__cmpdf2+0x1c>
 80061aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80061ae:	d0d3      	beq.n	8006158 <__cmpdf2+0x1c>
 80061b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop

080061b8 <__aeabi_cdrcmple>:
 80061b8:	4684      	mov	ip, r0
 80061ba:	4610      	mov	r0, r2
 80061bc:	4662      	mov	r2, ip
 80061be:	468c      	mov	ip, r1
 80061c0:	4619      	mov	r1, r3
 80061c2:	4663      	mov	r3, ip
 80061c4:	e000      	b.n	80061c8 <__aeabi_cdcmpeq>
 80061c6:	bf00      	nop

080061c8 <__aeabi_cdcmpeq>:
 80061c8:	b501      	push	{r0, lr}
 80061ca:	f7ff ffb7 	bl	800613c <__cmpdf2>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	bf48      	it	mi
 80061d2:	f110 0f00 	cmnmi.w	r0, #0
 80061d6:	bd01      	pop	{r0, pc}

080061d8 <__aeabi_dcmpeq>:
 80061d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061dc:	f7ff fff4 	bl	80061c8 <__aeabi_cdcmpeq>
 80061e0:	bf0c      	ite	eq
 80061e2:	2001      	moveq	r0, #1
 80061e4:	2000      	movne	r0, #0
 80061e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80061ea:	bf00      	nop

080061ec <__aeabi_dcmplt>:
 80061ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80061f0:	f7ff ffea 	bl	80061c8 <__aeabi_cdcmpeq>
 80061f4:	bf34      	ite	cc
 80061f6:	2001      	movcc	r0, #1
 80061f8:	2000      	movcs	r0, #0
 80061fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80061fe:	bf00      	nop

08006200 <__aeabi_dcmple>:
 8006200:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006204:	f7ff ffe0 	bl	80061c8 <__aeabi_cdcmpeq>
 8006208:	bf94      	ite	ls
 800620a:	2001      	movls	r0, #1
 800620c:	2000      	movhi	r0, #0
 800620e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006212:	bf00      	nop

08006214 <__aeabi_dcmpge>:
 8006214:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006218:	f7ff ffce 	bl	80061b8 <__aeabi_cdrcmple>
 800621c:	bf94      	ite	ls
 800621e:	2001      	movls	r0, #1
 8006220:	2000      	movhi	r0, #0
 8006222:	f85d fb08 	ldr.w	pc, [sp], #8
 8006226:	bf00      	nop

08006228 <__aeabi_dcmpgt>:
 8006228:	f84d ed08 	str.w	lr, [sp, #-8]!
 800622c:	f7ff ffc4 	bl	80061b8 <__aeabi_cdrcmple>
 8006230:	bf34      	ite	cc
 8006232:	2001      	movcc	r0, #1
 8006234:	2000      	movcs	r0, #0
 8006236:	f85d fb08 	ldr.w	pc, [sp], #8
 800623a:	bf00      	nop

0800623c <__aeabi_dcmpun>:
 800623c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006244:	d102      	bne.n	800624c <__aeabi_dcmpun+0x10>
 8006246:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800624a:	d10a      	bne.n	8006262 <__aeabi_dcmpun+0x26>
 800624c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006254:	d102      	bne.n	800625c <__aeabi_dcmpun+0x20>
 8006256:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800625a:	d102      	bne.n	8006262 <__aeabi_dcmpun+0x26>
 800625c:	f04f 0000 	mov.w	r0, #0
 8006260:	4770      	bx	lr
 8006262:	f04f 0001 	mov.w	r0, #1
 8006266:	4770      	bx	lr

08006268 <__aeabi_d2f>:
 8006268:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800626c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006270:	bf24      	itt	cs
 8006272:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006276:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800627a:	d90d      	bls.n	8006298 <__aeabi_d2f+0x30>
 800627c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006280:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006284:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006288:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800628c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006290:	bf08      	it	eq
 8006292:	f020 0001 	biceq.w	r0, r0, #1
 8006296:	4770      	bx	lr
 8006298:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800629c:	d121      	bne.n	80062e2 <__aeabi_d2f+0x7a>
 800629e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80062a2:	bfbc      	itt	lt
 80062a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80062a8:	4770      	bxlt	lr
 80062aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80062ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80062b2:	f1c2 0218 	rsb	r2, r2, #24
 80062b6:	f1c2 0c20 	rsb	ip, r2, #32
 80062ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80062be:	fa20 f002 	lsr.w	r0, r0, r2
 80062c2:	bf18      	it	ne
 80062c4:	f040 0001 	orrne.w	r0, r0, #1
 80062c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80062cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80062d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80062d4:	ea40 000c 	orr.w	r0, r0, ip
 80062d8:	fa23 f302 	lsr.w	r3, r3, r2
 80062dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80062e0:	e7cc      	b.n	800627c <__aeabi_d2f+0x14>
 80062e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80062e6:	d107      	bne.n	80062f8 <__aeabi_d2f+0x90>
 80062e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80062ec:	bf1e      	ittt	ne
 80062ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80062f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80062f6:	4770      	bxne	lr
 80062f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80062fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006300:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop

08006308 <__aeabi_frsub>:
 8006308:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800630c:	e002      	b.n	8006314 <__addsf3>
 800630e:	bf00      	nop

08006310 <__aeabi_fsub>:
 8006310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006314 <__addsf3>:
 8006314:	0042      	lsls	r2, r0, #1
 8006316:	bf1f      	itttt	ne
 8006318:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800631c:	ea92 0f03 	teqne	r2, r3
 8006320:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006324:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006328:	d06a      	beq.n	8006400 <__addsf3+0xec>
 800632a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800632e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006332:	bfc1      	itttt	gt
 8006334:	18d2      	addgt	r2, r2, r3
 8006336:	4041      	eorgt	r1, r0
 8006338:	4048      	eorgt	r0, r1
 800633a:	4041      	eorgt	r1, r0
 800633c:	bfb8      	it	lt
 800633e:	425b      	neglt	r3, r3
 8006340:	2b19      	cmp	r3, #25
 8006342:	bf88      	it	hi
 8006344:	4770      	bxhi	lr
 8006346:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800634a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800634e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006352:	bf18      	it	ne
 8006354:	4240      	negne	r0, r0
 8006356:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800635a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800635e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006362:	bf18      	it	ne
 8006364:	4249      	negne	r1, r1
 8006366:	ea92 0f03 	teq	r2, r3
 800636a:	d03f      	beq.n	80063ec <__addsf3+0xd8>
 800636c:	f1a2 0201 	sub.w	r2, r2, #1
 8006370:	fa41 fc03 	asr.w	ip, r1, r3
 8006374:	eb10 000c 	adds.w	r0, r0, ip
 8006378:	f1c3 0320 	rsb	r3, r3, #32
 800637c:	fa01 f103 	lsl.w	r1, r1, r3
 8006380:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006384:	d502      	bpl.n	800638c <__addsf3+0x78>
 8006386:	4249      	negs	r1, r1
 8006388:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800638c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006390:	d313      	bcc.n	80063ba <__addsf3+0xa6>
 8006392:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006396:	d306      	bcc.n	80063a6 <__addsf3+0x92>
 8006398:	0840      	lsrs	r0, r0, #1
 800639a:	ea4f 0131 	mov.w	r1, r1, rrx
 800639e:	f102 0201 	add.w	r2, r2, #1
 80063a2:	2afe      	cmp	r2, #254	; 0xfe
 80063a4:	d251      	bcs.n	800644a <__addsf3+0x136>
 80063a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80063aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80063ae:	bf08      	it	eq
 80063b0:	f020 0001 	biceq.w	r0, r0, #1
 80063b4:	ea40 0003 	orr.w	r0, r0, r3
 80063b8:	4770      	bx	lr
 80063ba:	0049      	lsls	r1, r1, #1
 80063bc:	eb40 0000 	adc.w	r0, r0, r0
 80063c0:	3a01      	subs	r2, #1
 80063c2:	bf28      	it	cs
 80063c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80063c8:	d2ed      	bcs.n	80063a6 <__addsf3+0x92>
 80063ca:	fab0 fc80 	clz	ip, r0
 80063ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80063d2:	ebb2 020c 	subs.w	r2, r2, ip
 80063d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80063da:	bfaa      	itet	ge
 80063dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80063e0:	4252      	neglt	r2, r2
 80063e2:	4318      	orrge	r0, r3
 80063e4:	bfbc      	itt	lt
 80063e6:	40d0      	lsrlt	r0, r2
 80063e8:	4318      	orrlt	r0, r3
 80063ea:	4770      	bx	lr
 80063ec:	f092 0f00 	teq	r2, #0
 80063f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80063f4:	bf06      	itte	eq
 80063f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80063fa:	3201      	addeq	r2, #1
 80063fc:	3b01      	subne	r3, #1
 80063fe:	e7b5      	b.n	800636c <__addsf3+0x58>
 8006400:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006404:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006408:	bf18      	it	ne
 800640a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800640e:	d021      	beq.n	8006454 <__addsf3+0x140>
 8006410:	ea92 0f03 	teq	r2, r3
 8006414:	d004      	beq.n	8006420 <__addsf3+0x10c>
 8006416:	f092 0f00 	teq	r2, #0
 800641a:	bf08      	it	eq
 800641c:	4608      	moveq	r0, r1
 800641e:	4770      	bx	lr
 8006420:	ea90 0f01 	teq	r0, r1
 8006424:	bf1c      	itt	ne
 8006426:	2000      	movne	r0, #0
 8006428:	4770      	bxne	lr
 800642a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800642e:	d104      	bne.n	800643a <__addsf3+0x126>
 8006430:	0040      	lsls	r0, r0, #1
 8006432:	bf28      	it	cs
 8006434:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8006438:	4770      	bx	lr
 800643a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800643e:	bf3c      	itt	cc
 8006440:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006444:	4770      	bxcc	lr
 8006446:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800644a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800644e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006452:	4770      	bx	lr
 8006454:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006458:	bf16      	itet	ne
 800645a:	4608      	movne	r0, r1
 800645c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006460:	4601      	movne	r1, r0
 8006462:	0242      	lsls	r2, r0, #9
 8006464:	bf06      	itte	eq
 8006466:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800646a:	ea90 0f01 	teqeq	r0, r1
 800646e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006472:	4770      	bx	lr

08006474 <__aeabi_ui2f>:
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e004      	b.n	8006484 <__aeabi_i2f+0x8>
 800647a:	bf00      	nop

0800647c <__aeabi_i2f>:
 800647c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006480:	bf48      	it	mi
 8006482:	4240      	negmi	r0, r0
 8006484:	ea5f 0c00 	movs.w	ip, r0
 8006488:	bf08      	it	eq
 800648a:	4770      	bxeq	lr
 800648c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006490:	4601      	mov	r1, r0
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	e01c      	b.n	80064d2 <__aeabi_l2f+0x2a>

08006498 <__aeabi_ul2f>:
 8006498:	ea50 0201 	orrs.w	r2, r0, r1
 800649c:	bf08      	it	eq
 800649e:	4770      	bxeq	lr
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	e00a      	b.n	80064bc <__aeabi_l2f+0x14>
 80064a6:	bf00      	nop

080064a8 <__aeabi_l2f>:
 80064a8:	ea50 0201 	orrs.w	r2, r0, r1
 80064ac:	bf08      	it	eq
 80064ae:	4770      	bxeq	lr
 80064b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80064b4:	d502      	bpl.n	80064bc <__aeabi_l2f+0x14>
 80064b6:	4240      	negs	r0, r0
 80064b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80064bc:	ea5f 0c01 	movs.w	ip, r1
 80064c0:	bf02      	ittt	eq
 80064c2:	4684      	moveq	ip, r0
 80064c4:	4601      	moveq	r1, r0
 80064c6:	2000      	moveq	r0, #0
 80064c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80064cc:	bf08      	it	eq
 80064ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80064d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80064d6:	fabc f28c 	clz	r2, ip
 80064da:	3a08      	subs	r2, #8
 80064dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80064e0:	db10      	blt.n	8006504 <__aeabi_l2f+0x5c>
 80064e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80064e6:	4463      	add	r3, ip
 80064e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80064ec:	f1c2 0220 	rsb	r2, r2, #32
 80064f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80064f4:	fa20 f202 	lsr.w	r2, r0, r2
 80064f8:	eb43 0002 	adc.w	r0, r3, r2
 80064fc:	bf08      	it	eq
 80064fe:	f020 0001 	biceq.w	r0, r0, #1
 8006502:	4770      	bx	lr
 8006504:	f102 0220 	add.w	r2, r2, #32
 8006508:	fa01 fc02 	lsl.w	ip, r1, r2
 800650c:	f1c2 0220 	rsb	r2, r2, #32
 8006510:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006514:	fa21 f202 	lsr.w	r2, r1, r2
 8006518:	eb43 0002 	adc.w	r0, r3, r2
 800651c:	bf08      	it	eq
 800651e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006522:	4770      	bx	lr

08006524 <__aeabi_fmul>:
 8006524:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006528:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800652c:	bf1e      	ittt	ne
 800652e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006532:	ea92 0f0c 	teqne	r2, ip
 8006536:	ea93 0f0c 	teqne	r3, ip
 800653a:	d06f      	beq.n	800661c <__aeabi_fmul+0xf8>
 800653c:	441a      	add	r2, r3
 800653e:	ea80 0c01 	eor.w	ip, r0, r1
 8006542:	0240      	lsls	r0, r0, #9
 8006544:	bf18      	it	ne
 8006546:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800654a:	d01e      	beq.n	800658a <__aeabi_fmul+0x66>
 800654c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006550:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006554:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006558:	fba0 3101 	umull	r3, r1, r0, r1
 800655c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006560:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006564:	bf3e      	ittt	cc
 8006566:	0049      	lslcc	r1, r1, #1
 8006568:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800656c:	005b      	lslcc	r3, r3, #1
 800656e:	ea40 0001 	orr.w	r0, r0, r1
 8006572:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8006576:	2afd      	cmp	r2, #253	; 0xfd
 8006578:	d81d      	bhi.n	80065b6 <__aeabi_fmul+0x92>
 800657a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800657e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006582:	bf08      	it	eq
 8006584:	f020 0001 	biceq.w	r0, r0, #1
 8006588:	4770      	bx	lr
 800658a:	f090 0f00 	teq	r0, #0
 800658e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006592:	bf08      	it	eq
 8006594:	0249      	lsleq	r1, r1, #9
 8006596:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800659a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800659e:	3a7f      	subs	r2, #127	; 0x7f
 80065a0:	bfc2      	ittt	gt
 80065a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80065a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80065aa:	4770      	bxgt	lr
 80065ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	3a01      	subs	r2, #1
 80065b6:	dc5d      	bgt.n	8006674 <__aeabi_fmul+0x150>
 80065b8:	f112 0f19 	cmn.w	r2, #25
 80065bc:	bfdc      	itt	le
 80065be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80065c2:	4770      	bxle	lr
 80065c4:	f1c2 0200 	rsb	r2, r2, #0
 80065c8:	0041      	lsls	r1, r0, #1
 80065ca:	fa21 f102 	lsr.w	r1, r1, r2
 80065ce:	f1c2 0220 	rsb	r2, r2, #32
 80065d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80065d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80065da:	f140 0000 	adc.w	r0, r0, #0
 80065de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80065e2:	bf08      	it	eq
 80065e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80065e8:	4770      	bx	lr
 80065ea:	f092 0f00 	teq	r2, #0
 80065ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80065f2:	bf02      	ittt	eq
 80065f4:	0040      	lsleq	r0, r0, #1
 80065f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80065fa:	3a01      	subeq	r2, #1
 80065fc:	d0f9      	beq.n	80065f2 <__aeabi_fmul+0xce>
 80065fe:	ea40 000c 	orr.w	r0, r0, ip
 8006602:	f093 0f00 	teq	r3, #0
 8006606:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800660a:	bf02      	ittt	eq
 800660c:	0049      	lsleq	r1, r1, #1
 800660e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006612:	3b01      	subeq	r3, #1
 8006614:	d0f9      	beq.n	800660a <__aeabi_fmul+0xe6>
 8006616:	ea41 010c 	orr.w	r1, r1, ip
 800661a:	e78f      	b.n	800653c <__aeabi_fmul+0x18>
 800661c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006620:	ea92 0f0c 	teq	r2, ip
 8006624:	bf18      	it	ne
 8006626:	ea93 0f0c 	teqne	r3, ip
 800662a:	d00a      	beq.n	8006642 <__aeabi_fmul+0x11e>
 800662c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006630:	bf18      	it	ne
 8006632:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006636:	d1d8      	bne.n	80065ea <__aeabi_fmul+0xc6>
 8006638:	ea80 0001 	eor.w	r0, r0, r1
 800663c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006640:	4770      	bx	lr
 8006642:	f090 0f00 	teq	r0, #0
 8006646:	bf17      	itett	ne
 8006648:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800664c:	4608      	moveq	r0, r1
 800664e:	f091 0f00 	teqne	r1, #0
 8006652:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8006656:	d014      	beq.n	8006682 <__aeabi_fmul+0x15e>
 8006658:	ea92 0f0c 	teq	r2, ip
 800665c:	d101      	bne.n	8006662 <__aeabi_fmul+0x13e>
 800665e:	0242      	lsls	r2, r0, #9
 8006660:	d10f      	bne.n	8006682 <__aeabi_fmul+0x15e>
 8006662:	ea93 0f0c 	teq	r3, ip
 8006666:	d103      	bne.n	8006670 <__aeabi_fmul+0x14c>
 8006668:	024b      	lsls	r3, r1, #9
 800666a:	bf18      	it	ne
 800666c:	4608      	movne	r0, r1
 800666e:	d108      	bne.n	8006682 <__aeabi_fmul+0x15e>
 8006670:	ea80 0001 	eor.w	r0, r0, r1
 8006674:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006678:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800667c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006680:	4770      	bx	lr
 8006682:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006686:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800668a:	4770      	bx	lr

0800668c <__aeabi_fdiv>:
 800668c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006690:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006694:	bf1e      	ittt	ne
 8006696:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800669a:	ea92 0f0c 	teqne	r2, ip
 800669e:	ea93 0f0c 	teqne	r3, ip
 80066a2:	d069      	beq.n	8006778 <__aeabi_fdiv+0xec>
 80066a4:	eba2 0203 	sub.w	r2, r2, r3
 80066a8:	ea80 0c01 	eor.w	ip, r0, r1
 80066ac:	0249      	lsls	r1, r1, #9
 80066ae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80066b2:	d037      	beq.n	8006724 <__aeabi_fdiv+0x98>
 80066b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066b8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80066bc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80066c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80066c4:	428b      	cmp	r3, r1
 80066c6:	bf38      	it	cc
 80066c8:	005b      	lslcc	r3, r3, #1
 80066ca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80066ce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80066d2:	428b      	cmp	r3, r1
 80066d4:	bf24      	itt	cs
 80066d6:	1a5b      	subcs	r3, r3, r1
 80066d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80066dc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80066e0:	bf24      	itt	cs
 80066e2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80066e6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80066ea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80066ee:	bf24      	itt	cs
 80066f0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80066f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80066f8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80066fc:	bf24      	itt	cs
 80066fe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8006702:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	bf18      	it	ne
 800670a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800670e:	d1e0      	bne.n	80066d2 <__aeabi_fdiv+0x46>
 8006710:	2afd      	cmp	r2, #253	; 0xfd
 8006712:	f63f af50 	bhi.w	80065b6 <__aeabi_fmul+0x92>
 8006716:	428b      	cmp	r3, r1
 8006718:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800671c:	bf08      	it	eq
 800671e:	f020 0001 	biceq.w	r0, r0, #1
 8006722:	4770      	bx	lr
 8006724:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006728:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800672c:	327f      	adds	r2, #127	; 0x7f
 800672e:	bfc2      	ittt	gt
 8006730:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006734:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006738:	4770      	bxgt	lr
 800673a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	3a01      	subs	r2, #1
 8006744:	e737      	b.n	80065b6 <__aeabi_fmul+0x92>
 8006746:	f092 0f00 	teq	r2, #0
 800674a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800674e:	bf02      	ittt	eq
 8006750:	0040      	lsleq	r0, r0, #1
 8006752:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006756:	3a01      	subeq	r2, #1
 8006758:	d0f9      	beq.n	800674e <__aeabi_fdiv+0xc2>
 800675a:	ea40 000c 	orr.w	r0, r0, ip
 800675e:	f093 0f00 	teq	r3, #0
 8006762:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006766:	bf02      	ittt	eq
 8006768:	0049      	lsleq	r1, r1, #1
 800676a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800676e:	3b01      	subeq	r3, #1
 8006770:	d0f9      	beq.n	8006766 <__aeabi_fdiv+0xda>
 8006772:	ea41 010c 	orr.w	r1, r1, ip
 8006776:	e795      	b.n	80066a4 <__aeabi_fdiv+0x18>
 8006778:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800677c:	ea92 0f0c 	teq	r2, ip
 8006780:	d108      	bne.n	8006794 <__aeabi_fdiv+0x108>
 8006782:	0242      	lsls	r2, r0, #9
 8006784:	f47f af7d 	bne.w	8006682 <__aeabi_fmul+0x15e>
 8006788:	ea93 0f0c 	teq	r3, ip
 800678c:	f47f af70 	bne.w	8006670 <__aeabi_fmul+0x14c>
 8006790:	4608      	mov	r0, r1
 8006792:	e776      	b.n	8006682 <__aeabi_fmul+0x15e>
 8006794:	ea93 0f0c 	teq	r3, ip
 8006798:	d104      	bne.n	80067a4 <__aeabi_fdiv+0x118>
 800679a:	024b      	lsls	r3, r1, #9
 800679c:	f43f af4c 	beq.w	8006638 <__aeabi_fmul+0x114>
 80067a0:	4608      	mov	r0, r1
 80067a2:	e76e      	b.n	8006682 <__aeabi_fmul+0x15e>
 80067a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80067a8:	bf18      	it	ne
 80067aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80067ae:	d1ca      	bne.n	8006746 <__aeabi_fdiv+0xba>
 80067b0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80067b4:	f47f af5c 	bne.w	8006670 <__aeabi_fmul+0x14c>
 80067b8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80067bc:	f47f af3c 	bne.w	8006638 <__aeabi_fmul+0x114>
 80067c0:	e75f      	b.n	8006682 <__aeabi_fmul+0x15e>
 80067c2:	bf00      	nop

080067c4 <__gesf2>:
 80067c4:	f04f 3cff 	mov.w	ip, #4294967295
 80067c8:	e006      	b.n	80067d8 <__cmpsf2+0x4>
 80067ca:	bf00      	nop

080067cc <__lesf2>:
 80067cc:	f04f 0c01 	mov.w	ip, #1
 80067d0:	e002      	b.n	80067d8 <__cmpsf2+0x4>
 80067d2:	bf00      	nop

080067d4 <__cmpsf2>:
 80067d4:	f04f 0c01 	mov.w	ip, #1
 80067d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80067dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80067e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80067e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80067e8:	bf18      	it	ne
 80067ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80067ee:	d011      	beq.n	8006814 <__cmpsf2+0x40>
 80067f0:	b001      	add	sp, #4
 80067f2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80067f6:	bf18      	it	ne
 80067f8:	ea90 0f01 	teqne	r0, r1
 80067fc:	bf58      	it	pl
 80067fe:	ebb2 0003 	subspl.w	r0, r2, r3
 8006802:	bf88      	it	hi
 8006804:	17c8      	asrhi	r0, r1, #31
 8006806:	bf38      	it	cc
 8006808:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800680c:	bf18      	it	ne
 800680e:	f040 0001 	orrne.w	r0, r0, #1
 8006812:	4770      	bx	lr
 8006814:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006818:	d102      	bne.n	8006820 <__cmpsf2+0x4c>
 800681a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800681e:	d105      	bne.n	800682c <__cmpsf2+0x58>
 8006820:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8006824:	d1e4      	bne.n	80067f0 <__cmpsf2+0x1c>
 8006826:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800682a:	d0e1      	beq.n	80067f0 <__cmpsf2+0x1c>
 800682c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop

08006834 <__aeabi_cfrcmple>:
 8006834:	4684      	mov	ip, r0
 8006836:	4608      	mov	r0, r1
 8006838:	4661      	mov	r1, ip
 800683a:	e7ff      	b.n	800683c <__aeabi_cfcmpeq>

0800683c <__aeabi_cfcmpeq>:
 800683c:	b50f      	push	{r0, r1, r2, r3, lr}
 800683e:	f7ff ffc9 	bl	80067d4 <__cmpsf2>
 8006842:	2800      	cmp	r0, #0
 8006844:	bf48      	it	mi
 8006846:	f110 0f00 	cmnmi.w	r0, #0
 800684a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800684c <__aeabi_fcmpeq>:
 800684c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006850:	f7ff fff4 	bl	800683c <__aeabi_cfcmpeq>
 8006854:	bf0c      	ite	eq
 8006856:	2001      	moveq	r0, #1
 8006858:	2000      	movne	r0, #0
 800685a:	f85d fb08 	ldr.w	pc, [sp], #8
 800685e:	bf00      	nop

08006860 <__aeabi_fcmplt>:
 8006860:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006864:	f7ff ffea 	bl	800683c <__aeabi_cfcmpeq>
 8006868:	bf34      	ite	cc
 800686a:	2001      	movcc	r0, #1
 800686c:	2000      	movcs	r0, #0
 800686e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006872:	bf00      	nop

08006874 <__aeabi_fcmple>:
 8006874:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006878:	f7ff ffe0 	bl	800683c <__aeabi_cfcmpeq>
 800687c:	bf94      	ite	ls
 800687e:	2001      	movls	r0, #1
 8006880:	2000      	movhi	r0, #0
 8006882:	f85d fb08 	ldr.w	pc, [sp], #8
 8006886:	bf00      	nop

08006888 <__aeabi_fcmpge>:
 8006888:	f84d ed08 	str.w	lr, [sp, #-8]!
 800688c:	f7ff ffd2 	bl	8006834 <__aeabi_cfrcmple>
 8006890:	bf94      	ite	ls
 8006892:	2001      	movls	r0, #1
 8006894:	2000      	movhi	r0, #0
 8006896:	f85d fb08 	ldr.w	pc, [sp], #8
 800689a:	bf00      	nop

0800689c <__aeabi_fcmpgt>:
 800689c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80068a0:	f7ff ffc8 	bl	8006834 <__aeabi_cfrcmple>
 80068a4:	bf34      	ite	cc
 80068a6:	2001      	movcc	r0, #1
 80068a8:	2000      	movcs	r0, #0
 80068aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80068ae:	bf00      	nop

080068b0 <__aeabi_f2iz>:
 80068b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80068b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80068b8:	d30f      	bcc.n	80068da <__aeabi_f2iz+0x2a>
 80068ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80068be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80068c2:	d90d      	bls.n	80068e0 <__aeabi_f2iz+0x30>
 80068c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80068c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80068d0:	fa23 f002 	lsr.w	r0, r3, r2
 80068d4:	bf18      	it	ne
 80068d6:	4240      	negne	r0, r0
 80068d8:	4770      	bx	lr
 80068da:	f04f 0000 	mov.w	r0, #0
 80068de:	4770      	bx	lr
 80068e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80068e4:	d101      	bne.n	80068ea <__aeabi_f2iz+0x3a>
 80068e6:	0242      	lsls	r2, r0, #9
 80068e8:	d105      	bne.n	80068f6 <__aeabi_f2iz+0x46>
 80068ea:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80068ee:	bf08      	it	eq
 80068f0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80068f4:	4770      	bx	lr
 80068f6:	f04f 0000 	mov.w	r0, #0
 80068fa:	4770      	bx	lr

080068fc <__aeabi_f2uiz>:
 80068fc:	0042      	lsls	r2, r0, #1
 80068fe:	d20e      	bcs.n	800691e <__aeabi_f2uiz+0x22>
 8006900:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8006904:	d30b      	bcc.n	800691e <__aeabi_f2uiz+0x22>
 8006906:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800690a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800690e:	d409      	bmi.n	8006924 <__aeabi_f2uiz+0x28>
 8006910:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8006914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006918:	fa23 f002 	lsr.w	r0, r3, r2
 800691c:	4770      	bx	lr
 800691e:	f04f 0000 	mov.w	r0, #0
 8006922:	4770      	bx	lr
 8006924:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8006928:	d101      	bne.n	800692e <__aeabi_f2uiz+0x32>
 800692a:	0242      	lsls	r2, r0, #9
 800692c:	d102      	bne.n	8006934 <__aeabi_f2uiz+0x38>
 800692e:	f04f 30ff 	mov.w	r0, #4294967295
 8006932:	4770      	bx	lr
 8006934:	f04f 0000 	mov.w	r0, #0
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop

0800693c <__aeabi_uldivmod>:
 800693c:	b953      	cbnz	r3, 8006954 <__aeabi_uldivmod+0x18>
 800693e:	b94a      	cbnz	r2, 8006954 <__aeabi_uldivmod+0x18>
 8006940:	2900      	cmp	r1, #0
 8006942:	bf08      	it	eq
 8006944:	2800      	cmpeq	r0, #0
 8006946:	bf1c      	itt	ne
 8006948:	f04f 31ff 	movne.w	r1, #4294967295
 800694c:	f04f 30ff 	movne.w	r0, #4294967295
 8006950:	f000 b996 	b.w	8006c80 <__aeabi_idiv0>
 8006954:	f1ad 0c08 	sub.w	ip, sp, #8
 8006958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800695c:	f000 f826 	bl	80069ac <__udivmoddi4>
 8006960:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006968:	b004      	add	sp, #16
 800696a:	4770      	bx	lr

0800696c <__aeabi_f2ulz>:
 800696c:	b5d0      	push	{r4, r6, r7, lr}
 800696e:	f7ff f973 	bl	8005c58 <__aeabi_f2d>
 8006972:	2200      	movs	r2, #0
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <__aeabi_f2ulz+0x38>)
 8006976:	4606      	mov	r6, r0
 8006978:	460f      	mov	r7, r1
 800697a:	f7ff f9c5 	bl	8005d08 <__aeabi_dmul>
 800697e:	f000 f981 	bl	8006c84 <__aeabi_d2uiz>
 8006982:	4604      	mov	r4, r0
 8006984:	f7ff f946 	bl	8005c14 <__aeabi_ui2d>
 8006988:	2200      	movs	r2, #0
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <__aeabi_f2ulz+0x3c>)
 800698c:	f7ff f9bc 	bl	8005d08 <__aeabi_dmul>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4630      	mov	r0, r6
 8006996:	4639      	mov	r1, r7
 8006998:	f7fe fffe 	bl	8005998 <__aeabi_dsub>
 800699c:	f000 f972 	bl	8006c84 <__aeabi_d2uiz>
 80069a0:	4621      	mov	r1, r4
 80069a2:	bdd0      	pop	{r4, r6, r7, pc}
 80069a4:	3df00000 	.word	0x3df00000
 80069a8:	41f00000 	.word	0x41f00000

080069ac <__udivmoddi4>:
 80069ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	9e08      	ldr	r6, [sp, #32]
 80069b2:	460d      	mov	r5, r1
 80069b4:	4604      	mov	r4, r0
 80069b6:	4688      	mov	r8, r1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d14d      	bne.n	8006a58 <__udivmoddi4+0xac>
 80069bc:	428a      	cmp	r2, r1
 80069be:	4694      	mov	ip, r2
 80069c0:	d968      	bls.n	8006a94 <__udivmoddi4+0xe8>
 80069c2:	fab2 f282 	clz	r2, r2
 80069c6:	b152      	cbz	r2, 80069de <__udivmoddi4+0x32>
 80069c8:	fa01 f302 	lsl.w	r3, r1, r2
 80069cc:	f1c2 0120 	rsb	r1, r2, #32
 80069d0:	fa20 f101 	lsr.w	r1, r0, r1
 80069d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80069d8:	ea41 0803 	orr.w	r8, r1, r3
 80069dc:	4094      	lsls	r4, r2
 80069de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80069e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80069e6:	fa1f fe8c 	uxth.w	lr, ip
 80069ea:	fb01 8817 	mls	r8, r1, r7, r8
 80069ee:	fb07 f00e 	mul.w	r0, r7, lr
 80069f2:	0c23      	lsrs	r3, r4, #16
 80069f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80069f8:	4298      	cmp	r0, r3
 80069fa:	d90a      	bls.n	8006a12 <__udivmoddi4+0x66>
 80069fc:	eb1c 0303 	adds.w	r3, ip, r3
 8006a00:	f107 35ff 	add.w	r5, r7, #4294967295
 8006a04:	f080 811e 	bcs.w	8006c44 <__udivmoddi4+0x298>
 8006a08:	4298      	cmp	r0, r3
 8006a0a:	f240 811b 	bls.w	8006c44 <__udivmoddi4+0x298>
 8006a0e:	3f02      	subs	r7, #2
 8006a10:	4463      	add	r3, ip
 8006a12:	1a1b      	subs	r3, r3, r0
 8006a14:	fbb3 f0f1 	udiv	r0, r3, r1
 8006a18:	fb01 3310 	mls	r3, r1, r0, r3
 8006a1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8006a20:	b2a4      	uxth	r4, r4
 8006a22:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006a26:	45a6      	cmp	lr, r4
 8006a28:	d90a      	bls.n	8006a40 <__udivmoddi4+0x94>
 8006a2a:	eb1c 0404 	adds.w	r4, ip, r4
 8006a2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a32:	f080 8109 	bcs.w	8006c48 <__udivmoddi4+0x29c>
 8006a36:	45a6      	cmp	lr, r4
 8006a38:	f240 8106 	bls.w	8006c48 <__udivmoddi4+0x29c>
 8006a3c:	4464      	add	r4, ip
 8006a3e:	3802      	subs	r0, #2
 8006a40:	2100      	movs	r1, #0
 8006a42:	eba4 040e 	sub.w	r4, r4, lr
 8006a46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006a4a:	b11e      	cbz	r6, 8006a54 <__udivmoddi4+0xa8>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	40d4      	lsrs	r4, r2
 8006a50:	e9c6 4300 	strd	r4, r3, [r6]
 8006a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	d908      	bls.n	8006a6e <__udivmoddi4+0xc2>
 8006a5c:	2e00      	cmp	r6, #0
 8006a5e:	f000 80ee 	beq.w	8006c3e <__udivmoddi4+0x292>
 8006a62:	2100      	movs	r1, #0
 8006a64:	e9c6 0500 	strd	r0, r5, [r6]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6e:	fab3 f183 	clz	r1, r3
 8006a72:	2900      	cmp	r1, #0
 8006a74:	d14a      	bne.n	8006b0c <__udivmoddi4+0x160>
 8006a76:	42ab      	cmp	r3, r5
 8006a78:	d302      	bcc.n	8006a80 <__udivmoddi4+0xd4>
 8006a7a:	4282      	cmp	r2, r0
 8006a7c:	f200 80fc 	bhi.w	8006c78 <__udivmoddi4+0x2cc>
 8006a80:	1a84      	subs	r4, r0, r2
 8006a82:	eb65 0303 	sbc.w	r3, r5, r3
 8006a86:	2001      	movs	r0, #1
 8006a88:	4698      	mov	r8, r3
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	d0e2      	beq.n	8006a54 <__udivmoddi4+0xa8>
 8006a8e:	e9c6 4800 	strd	r4, r8, [r6]
 8006a92:	e7df      	b.n	8006a54 <__udivmoddi4+0xa8>
 8006a94:	b902      	cbnz	r2, 8006a98 <__udivmoddi4+0xec>
 8006a96:	deff      	udf	#255	; 0xff
 8006a98:	fab2 f282 	clz	r2, r2
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	f040 8091 	bne.w	8006bc4 <__udivmoddi4+0x218>
 8006aa2:	eba1 000c 	sub.w	r0, r1, ip
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006aac:	fa1f fe8c 	uxth.w	lr, ip
 8006ab0:	fbb0 f3f7 	udiv	r3, r0, r7
 8006ab4:	fb07 0013 	mls	r0, r7, r3, r0
 8006ab8:	0c25      	lsrs	r5, r4, #16
 8006aba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8006abe:	fb0e f003 	mul.w	r0, lr, r3
 8006ac2:	42a8      	cmp	r0, r5
 8006ac4:	d908      	bls.n	8006ad8 <__udivmoddi4+0x12c>
 8006ac6:	eb1c 0505 	adds.w	r5, ip, r5
 8006aca:	f103 38ff 	add.w	r8, r3, #4294967295
 8006ace:	d202      	bcs.n	8006ad6 <__udivmoddi4+0x12a>
 8006ad0:	42a8      	cmp	r0, r5
 8006ad2:	f200 80ce 	bhi.w	8006c72 <__udivmoddi4+0x2c6>
 8006ad6:	4643      	mov	r3, r8
 8006ad8:	1a2d      	subs	r5, r5, r0
 8006ada:	fbb5 f0f7 	udiv	r0, r5, r7
 8006ade:	fb07 5510 	mls	r5, r7, r0, r5
 8006ae2:	fb0e fe00 	mul.w	lr, lr, r0
 8006ae6:	b2a4      	uxth	r4, r4
 8006ae8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006aec:	45a6      	cmp	lr, r4
 8006aee:	d908      	bls.n	8006b02 <__udivmoddi4+0x156>
 8006af0:	eb1c 0404 	adds.w	r4, ip, r4
 8006af4:	f100 35ff 	add.w	r5, r0, #4294967295
 8006af8:	d202      	bcs.n	8006b00 <__udivmoddi4+0x154>
 8006afa:	45a6      	cmp	lr, r4
 8006afc:	f200 80b6 	bhi.w	8006c6c <__udivmoddi4+0x2c0>
 8006b00:	4628      	mov	r0, r5
 8006b02:	eba4 040e 	sub.w	r4, r4, lr
 8006b06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006b0a:	e79e      	b.n	8006a4a <__udivmoddi4+0x9e>
 8006b0c:	f1c1 0720 	rsb	r7, r1, #32
 8006b10:	408b      	lsls	r3, r1
 8006b12:	fa22 fc07 	lsr.w	ip, r2, r7
 8006b16:	ea4c 0c03 	orr.w	ip, ip, r3
 8006b1a:	fa25 fa07 	lsr.w	sl, r5, r7
 8006b1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006b22:	fbba f8f9 	udiv	r8, sl, r9
 8006b26:	fa20 f307 	lsr.w	r3, r0, r7
 8006b2a:	fb09 aa18 	mls	sl, r9, r8, sl
 8006b2e:	408d      	lsls	r5, r1
 8006b30:	fa1f fe8c 	uxth.w	lr, ip
 8006b34:	431d      	orrs	r5, r3
 8006b36:	fa00 f301 	lsl.w	r3, r0, r1
 8006b3a:	fb08 f00e 	mul.w	r0, r8, lr
 8006b3e:	0c2c      	lsrs	r4, r5, #16
 8006b40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	fa02 f201 	lsl.w	r2, r2, r1
 8006b4a:	d90b      	bls.n	8006b64 <__udivmoddi4+0x1b8>
 8006b4c:	eb1c 0404 	adds.w	r4, ip, r4
 8006b50:	f108 3aff 	add.w	sl, r8, #4294967295
 8006b54:	f080 8088 	bcs.w	8006c68 <__udivmoddi4+0x2bc>
 8006b58:	42a0      	cmp	r0, r4
 8006b5a:	f240 8085 	bls.w	8006c68 <__udivmoddi4+0x2bc>
 8006b5e:	f1a8 0802 	sub.w	r8, r8, #2
 8006b62:	4464      	add	r4, ip
 8006b64:	1a24      	subs	r4, r4, r0
 8006b66:	fbb4 f0f9 	udiv	r0, r4, r9
 8006b6a:	fb09 4410 	mls	r4, r9, r0, r4
 8006b6e:	fb00 fe0e 	mul.w	lr, r0, lr
 8006b72:	b2ad      	uxth	r5, r5
 8006b74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006b78:	45a6      	cmp	lr, r4
 8006b7a:	d908      	bls.n	8006b8e <__udivmoddi4+0x1e2>
 8006b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8006b80:	f100 35ff 	add.w	r5, r0, #4294967295
 8006b84:	d26c      	bcs.n	8006c60 <__udivmoddi4+0x2b4>
 8006b86:	45a6      	cmp	lr, r4
 8006b88:	d96a      	bls.n	8006c60 <__udivmoddi4+0x2b4>
 8006b8a:	3802      	subs	r0, #2
 8006b8c:	4464      	add	r4, ip
 8006b8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006b92:	fba0 9502 	umull	r9, r5, r0, r2
 8006b96:	eba4 040e 	sub.w	r4, r4, lr
 8006b9a:	42ac      	cmp	r4, r5
 8006b9c:	46c8      	mov	r8, r9
 8006b9e:	46ae      	mov	lr, r5
 8006ba0:	d356      	bcc.n	8006c50 <__udivmoddi4+0x2a4>
 8006ba2:	d053      	beq.n	8006c4c <__udivmoddi4+0x2a0>
 8006ba4:	2e00      	cmp	r6, #0
 8006ba6:	d069      	beq.n	8006c7c <__udivmoddi4+0x2d0>
 8006ba8:	ebb3 0208 	subs.w	r2, r3, r8
 8006bac:	eb64 040e 	sbc.w	r4, r4, lr
 8006bb0:	fa22 f301 	lsr.w	r3, r2, r1
 8006bb4:	fa04 f707 	lsl.w	r7, r4, r7
 8006bb8:	431f      	orrs	r7, r3
 8006bba:	40cc      	lsrs	r4, r1
 8006bbc:	e9c6 7400 	strd	r7, r4, [r6]
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	e747      	b.n	8006a54 <__udivmoddi4+0xa8>
 8006bc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8006bc8:	f1c2 0120 	rsb	r1, r2, #32
 8006bcc:	fa25 f301 	lsr.w	r3, r5, r1
 8006bd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006bd4:	fa20 f101 	lsr.w	r1, r0, r1
 8006bd8:	4095      	lsls	r5, r2
 8006bda:	430d      	orrs	r5, r1
 8006bdc:	fbb3 f1f7 	udiv	r1, r3, r7
 8006be0:	fb07 3311 	mls	r3, r7, r1, r3
 8006be4:	fa1f fe8c 	uxth.w	lr, ip
 8006be8:	0c28      	lsrs	r0, r5, #16
 8006bea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006bee:	fb01 f30e 	mul.w	r3, r1, lr
 8006bf2:	4283      	cmp	r3, r0
 8006bf4:	fa04 f402 	lsl.w	r4, r4, r2
 8006bf8:	d908      	bls.n	8006c0c <__udivmoddi4+0x260>
 8006bfa:	eb1c 0000 	adds.w	r0, ip, r0
 8006bfe:	f101 38ff 	add.w	r8, r1, #4294967295
 8006c02:	d22f      	bcs.n	8006c64 <__udivmoddi4+0x2b8>
 8006c04:	4283      	cmp	r3, r0
 8006c06:	d92d      	bls.n	8006c64 <__udivmoddi4+0x2b8>
 8006c08:	3902      	subs	r1, #2
 8006c0a:	4460      	add	r0, ip
 8006c0c:	1ac0      	subs	r0, r0, r3
 8006c0e:	fbb0 f3f7 	udiv	r3, r0, r7
 8006c12:	fb07 0013 	mls	r0, r7, r3, r0
 8006c16:	b2ad      	uxth	r5, r5
 8006c18:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8006c1c:	fb03 f00e 	mul.w	r0, r3, lr
 8006c20:	42a8      	cmp	r0, r5
 8006c22:	d908      	bls.n	8006c36 <__udivmoddi4+0x28a>
 8006c24:	eb1c 0505 	adds.w	r5, ip, r5
 8006c28:	f103 38ff 	add.w	r8, r3, #4294967295
 8006c2c:	d216      	bcs.n	8006c5c <__udivmoddi4+0x2b0>
 8006c2e:	42a8      	cmp	r0, r5
 8006c30:	d914      	bls.n	8006c5c <__udivmoddi4+0x2b0>
 8006c32:	3b02      	subs	r3, #2
 8006c34:	4465      	add	r5, ip
 8006c36:	1a28      	subs	r0, r5, r0
 8006c38:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8006c3c:	e738      	b.n	8006ab0 <__udivmoddi4+0x104>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4630      	mov	r0, r6
 8006c42:	e707      	b.n	8006a54 <__udivmoddi4+0xa8>
 8006c44:	462f      	mov	r7, r5
 8006c46:	e6e4      	b.n	8006a12 <__udivmoddi4+0x66>
 8006c48:	4618      	mov	r0, r3
 8006c4a:	e6f9      	b.n	8006a40 <__udivmoddi4+0x94>
 8006c4c:	454b      	cmp	r3, r9
 8006c4e:	d2a9      	bcs.n	8006ba4 <__udivmoddi4+0x1f8>
 8006c50:	ebb9 0802 	subs.w	r8, r9, r2
 8006c54:	eb65 0e0c 	sbc.w	lr, r5, ip
 8006c58:	3801      	subs	r0, #1
 8006c5a:	e7a3      	b.n	8006ba4 <__udivmoddi4+0x1f8>
 8006c5c:	4643      	mov	r3, r8
 8006c5e:	e7ea      	b.n	8006c36 <__udivmoddi4+0x28a>
 8006c60:	4628      	mov	r0, r5
 8006c62:	e794      	b.n	8006b8e <__udivmoddi4+0x1e2>
 8006c64:	4641      	mov	r1, r8
 8006c66:	e7d1      	b.n	8006c0c <__udivmoddi4+0x260>
 8006c68:	46d0      	mov	r8, sl
 8006c6a:	e77b      	b.n	8006b64 <__udivmoddi4+0x1b8>
 8006c6c:	4464      	add	r4, ip
 8006c6e:	3802      	subs	r0, #2
 8006c70:	e747      	b.n	8006b02 <__udivmoddi4+0x156>
 8006c72:	3b02      	subs	r3, #2
 8006c74:	4465      	add	r5, ip
 8006c76:	e72f      	b.n	8006ad8 <__udivmoddi4+0x12c>
 8006c78:	4608      	mov	r0, r1
 8006c7a:	e706      	b.n	8006a8a <__udivmoddi4+0xde>
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	e6e9      	b.n	8006a54 <__udivmoddi4+0xa8>

08006c80 <__aeabi_idiv0>:
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop

08006c84 <__aeabi_d2uiz>:
 8006c84:	004a      	lsls	r2, r1, #1
 8006c86:	d211      	bcs.n	8006cac <__aeabi_d2uiz+0x28>
 8006c88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c8c:	d211      	bcs.n	8006cb2 <__aeabi_d2uiz+0x2e>
 8006c8e:	d50d      	bpl.n	8006cac <__aeabi_d2uiz+0x28>
 8006c90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006c94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006c98:	d40e      	bmi.n	8006cb8 <__aeabi_d2uiz+0x34>
 8006c9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006ca6:	fa23 f002 	lsr.w	r0, r3, r2
 8006caa:	4770      	bx	lr
 8006cac:	f04f 0000 	mov.w	r0, #0
 8006cb0:	4770      	bx	lr
 8006cb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006cb6:	d102      	bne.n	8006cbe <__aeabi_d2uiz+0x3a>
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	4770      	bx	lr
 8006cbe:	f04f 0000 	mov.w	r0, #0
 8006cc2:	4770      	bx	lr

08006cc4 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006cca:	1d3b      	adds	r3, r7, #4
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006cd4:	4b49      	ldr	r3, [pc, #292]	; (8006dfc <MX_ADC_Init+0x138>)
 8006cd6:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <MX_ADC_Init+0x13c>)
 8006cd8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006cda:	4b48      	ldr	r3, [pc, #288]	; (8006dfc <MX_ADC_Init+0x138>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006ce0:	4b46      	ldr	r3, [pc, #280]	; (8006dfc <MX_ADC_Init+0x138>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ce6:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <MX_ADC_Init+0x138>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006cec:	4b43      	ldr	r3, [pc, #268]	; (8006dfc <MX_ADC_Init+0x138>)
 8006cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cf2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006cf4:	4b41      	ldr	r3, [pc, #260]	; (8006dfc <MX_ADC_Init+0x138>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8006cfa:	4b40      	ldr	r3, [pc, #256]	; (8006dfc <MX_ADC_Init+0x138>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8006d00:	4b3e      	ldr	r3, [pc, #248]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8006d06:	4b3d      	ldr	r3, [pc, #244]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8006d0c:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 8006d14:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d16:	2206      	movs	r2, #6
 8006d18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8006d1a:	4b38      	ldr	r3, [pc, #224]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006d22:	4b36      	ldr	r3, [pc, #216]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d24:	2210      	movs	r2, #16
 8006d26:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006d28:	4b34      	ldr	r3, [pc, #208]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8006d2e:	4b33      	ldr	r3, [pc, #204]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006d36:	4831      	ldr	r0, [pc, #196]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d38:	f008 f998 	bl	800f06c <HAL_ADC_Init>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8006d42:	f002 fa05 	bl	8009150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006d46:	230a      	movs	r3, #10
 8006d48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8006d4e:	2306      	movs	r3, #6
 8006d50:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d52:	1d3b      	adds	r3, r7, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4829      	ldr	r0, [pc, #164]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d58:	f008 fb6e 	bl	800f438 <HAL_ADC_ConfigChannel>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8006d62:	f002 f9f5 	bl	8009150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006d66:	230f      	movs	r3, #15
 8006d68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d6e:	1d3b      	adds	r3, r7, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	4822      	ldr	r0, [pc, #136]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d74:	f008 fb60 	bl	800f438 <HAL_ADC_ConfigChannel>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8006d7e:	f002 f9e7 	bl	8009150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006d82:	230b      	movs	r3, #11
 8006d84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006d86:	2303      	movs	r3, #3
 8006d88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d8a:	1d3b      	adds	r3, r7, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	481b      	ldr	r0, [pc, #108]	; (8006dfc <MX_ADC_Init+0x138>)
 8006d90:	f008 fb52 	bl	800f438 <HAL_ADC_ConfigChannel>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8006d9a:	f002 f9d9 	bl	8009150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006d9e:	230c      	movs	r3, #12
 8006da0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006da2:	2304      	movs	r3, #4
 8006da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006da6:	1d3b      	adds	r3, r7, #4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4814      	ldr	r0, [pc, #80]	; (8006dfc <MX_ADC_Init+0x138>)
 8006dac:	f008 fb44 	bl	800f438 <HAL_ADC_ConfigChannel>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <MX_ADC_Init+0xf6>
  {
    Error_Handler();
 8006db6:	f002 f9cb 	bl	8009150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006dba:	230d      	movs	r3, #13
 8006dbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8006dbe:	2305      	movs	r3, #5
 8006dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006dc2:	1d3b      	adds	r3, r7, #4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	480d      	ldr	r0, [pc, #52]	; (8006dfc <MX_ADC_Init+0x138>)
 8006dc8:	f008 fb36 	bl	800f438 <HAL_ADC_ConfigChannel>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <MX_ADC_Init+0x112>
  {
    Error_Handler();
 8006dd2:	f002 f9bd 	bl	8009150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006dd6:	2311      	movs	r3, #17
 8006dd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8006dda:	2306      	movs	r3, #6
 8006ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4806      	ldr	r0, [pc, #24]	; (8006dfc <MX_ADC_Init+0x138>)
 8006de4:	f008 fb28 	bl	800f438 <HAL_ADC_ConfigChannel>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <MX_ADC_Init+0x12e>
  {
    Error_Handler();
 8006dee:	f002 f9af 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000094 	.word	0x20000094
 8006e00:	40012400 	.word	0x40012400

08006e04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08a      	sub	sp, #40	; 0x28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e0c:	f107 0314 	add.w	r3, r7, #20
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	609a      	str	r2, [r3, #8]
 8006e18:	60da      	str	r2, [r3, #12]
 8006e1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a29      	ldr	r2, [pc, #164]	; (8006ec8 <HAL_ADC_MspInit+0xc4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d14b      	bne.n	8006ebe <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006e26:	4b29      	ldr	r3, [pc, #164]	; (8006ecc <HAL_ADC_MspInit+0xc8>)
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	4a28      	ldr	r2, [pc, #160]	; (8006ecc <HAL_ADC_MspInit+0xc8>)
 8006e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e30:	6213      	str	r3, [r2, #32]
 8006e32:	4b26      	ldr	r3, [pc, #152]	; (8006ecc <HAL_ADC_MspInit+0xc8>)
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e3e:	4b23      	ldr	r3, [pc, #140]	; (8006ecc <HAL_ADC_MspInit+0xc8>)
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4a22      	ldr	r2, [pc, #136]	; (8006ecc <HAL_ADC_MspInit+0xc8>)
 8006e44:	f043 0304 	orr.w	r3, r3, #4
 8006e48:	61d3      	str	r3, [r2, #28]
 8006e4a:	4b20      	ldr	r3, [pc, #128]	; (8006ecc <HAL_ADC_MspInit+0xc8>)
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC_IN11
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = NTC1_Pin|SW5_Pin|SW6_Pin|SW7_Pin
 8006e56:	232f      	movs	r3, #47	; 0x2f
 8006e58:	617b      	str	r3, [r7, #20]
                          |CUR1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e62:	f107 0314 	add.w	r3, r7, #20
 8006e66:	4619      	mov	r1, r3
 8006e68:	4819      	ldr	r0, [pc, #100]	; (8006ed0 <HAL_ADC_MspInit+0xcc>)
 8006e6a:	f009 fc6d 	bl	8010748 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8006e6e:	4b19      	ldr	r3, [pc, #100]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006e70:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <HAL_ADC_MspInit+0xd4>)
 8006e72:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e74:	4b17      	ldr	r3, [pc, #92]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e7a:	4b16      	ldr	r3, [pc, #88]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006e80:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006e82:	2280      	movs	r2, #128	; 0x80
 8006e84:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e8c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e94:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006e98:	2220      	movs	r2, #32
 8006e9a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8006ea2:	480c      	ldr	r0, [pc, #48]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006ea4:	f008 fe4a 	bl	800fb3c <HAL_DMA_Init>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8006eae:	f002 f94f 	bl	8009150 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a07      	ldr	r2, [pc, #28]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006eb6:	645a      	str	r2, [r3, #68]	; 0x44
 8006eb8:	4a06      	ldr	r2, [pc, #24]	; (8006ed4 <HAL_ADC_MspInit+0xd0>)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	3728      	adds	r7, #40	; 0x28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40012400 	.word	0x40012400
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	40020800 	.word	0x40020800
 8006ed4:	200000e8 	.word	0x200000e8
 8006ed8:	40026008 	.word	0x40026008

08006edc <ADJ_GetParameter>:
//! \brief      Gets a machine parameter related to the adjust module
//! \details    Gets a parameter
//! \param[in]	uint8_t newParameter   (ADJ_P, ADJ_I, ADJ_D)
//! \param[out]	uint16_t newValue
uint16_t ADJ_GetParameter (uint8_t newParameter)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	71fb      	strb	r3, [r7, #7]
	uint16_t ReturnValue = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	81fb      	strh	r3, [r7, #14]
	switch (newParameter)
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	2b2b      	cmp	r3, #43	; 0x2b
 8006eee:	d020      	beq.n	8006f32 <ADJ_GetParameter+0x56>
 8006ef0:	2b2b      	cmp	r3, #43	; 0x2b
 8006ef2:	dc26      	bgt.n	8006f42 <ADJ_GetParameter+0x66>
 8006ef4:	2b29      	cmp	r3, #41	; 0x29
 8006ef6:	d002      	beq.n	8006efe <ADJ_GetParameter+0x22>
 8006ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8006efa:	d00d      	beq.n	8006f18 <ADJ_GetParameter+0x3c>
		{
			ReturnValue = ADJ_Motor.D;
			break;
		}
		default:
			break;
 8006efc:	e021      	b.n	8006f42 <ADJ_GetParameter+0x66>
			ReturnValue = ADJ_Motor.P * 100;
 8006efe:	4b14      	ldr	r3, [pc, #80]	; (8006f50 <ADJ_GetParameter+0x74>)
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	4914      	ldr	r1, [pc, #80]	; (8006f54 <ADJ_GetParameter+0x78>)
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff fb0d 	bl	8006524 <__aeabi_fmul>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fcf5 	bl	80068fc <__aeabi_f2uiz>
 8006f12:	4603      	mov	r3, r0
 8006f14:	81fb      	strh	r3, [r7, #14]
			break;
 8006f16:	e015      	b.n	8006f44 <ADJ_GetParameter+0x68>
			ReturnValue = ADJ_Motor.I * 1000;
 8006f18:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <ADJ_GetParameter+0x74>)
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	490e      	ldr	r1, [pc, #56]	; (8006f58 <ADJ_GetParameter+0x7c>)
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fb00 	bl	8006524 <__aeabi_fmul>
 8006f24:	4603      	mov	r3, r0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fce8 	bl	80068fc <__aeabi_f2uiz>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	81fb      	strh	r3, [r7, #14]
			break;
 8006f30:	e008      	b.n	8006f44 <ADJ_GetParameter+0x68>
			ReturnValue = ADJ_Motor.D;
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <ADJ_GetParameter+0x74>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fce0 	bl	80068fc <__aeabi_f2uiz>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	81fb      	strh	r3, [r7, #14]
			break;
 8006f40:	e000      	b.n	8006f44 <ADJ_GetParameter+0x68>
			break;
 8006f42:	bf00      	nop
	}
	return ReturnValue;
 8006f44:	89fb      	ldrh	r3, [r7, #14]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000140 	.word	0x20000140
 8006f54:	42c80000 	.word	0x42c80000
 8006f58:	447a0000 	.word	0x447a0000

08006f5c <ADJ_SetParameter>:
//! \brief      Sets a machine parameter related to the adjust module
//! \details    Sets a parameter and stores it in EEprom
//! \param[in]	uint8_t newParameter   (ADJ_P, ADJ_I, ADJ_D)
//! \param[in]	uint16_t newValue
void ADJ_SetParameter (uint8_t newParameter, uint16_t newValue)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	460a      	mov	r2, r1
 8006f66:	71fb      	strb	r3, [r7, #7]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	80bb      	strh	r3, [r7, #4]
	switch (newParameter)
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	2b2b      	cmp	r3, #43	; 0x2b
 8006f70:	d02e      	beq.n	8006fd0 <ADJ_SetParameter+0x74>
 8006f72:	2b2b      	cmp	r3, #43	; 0x2b
 8006f74:	dc3a      	bgt.n	8006fec <ADJ_SetParameter+0x90>
 8006f76:	2b29      	cmp	r3, #41	; 0x29
 8006f78:	d002      	beq.n	8006f80 <ADJ_SetParameter+0x24>
 8006f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f7c:	d014      	beq.n	8006fa8 <ADJ_SetParameter+0x4c>
			ADJ_Motor.D = (float) newValue;
			EEP_WriteEEPROM(newParameter, newValue);
			break;
		}
		default:
			break;
 8006f7e:	e035      	b.n	8006fec <ADJ_SetParameter+0x90>
			ADJ_Motor.P = (float)(newValue / 100.0f);
 8006f80:	88bb      	ldrh	r3, [r7, #4]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff fa7a 	bl	800647c <__aeabi_i2f>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	491b      	ldr	r1, [pc, #108]	; (8006ff8 <ADJ_SetParameter+0x9c>)
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff fb7d 	bl	800668c <__aeabi_fdiv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	461a      	mov	r2, r3
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <ADJ_SetParameter+0xa0>)
 8006f98:	629a      	str	r2, [r3, #40]	; 0x28
			EEP_WriteEEPROM(newParameter, newValue);
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	88ba      	ldrh	r2, [r7, #4]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f004 f9e5 	bl	800b370 <EEP_WriteEEPROM>
			break;
 8006fa6:	e022      	b.n	8006fee <ADJ_SetParameter+0x92>
			ADJ_Motor.I = (newValue / 1000.0f);
 8006fa8:	88bb      	ldrh	r3, [r7, #4]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7ff fa66 	bl	800647c <__aeabi_i2f>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4913      	ldr	r1, [pc, #76]	; (8007000 <ADJ_SetParameter+0xa4>)
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff fb69 	bl	800668c <__aeabi_fdiv>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <ADJ_SetParameter+0xa0>)
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c
			EEP_WriteEEPROM(newParameter, newValue);
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	88ba      	ldrh	r2, [r7, #4]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f004 f9d1 	bl	800b370 <EEP_WriteEEPROM>
			break;
 8006fce:	e00e      	b.n	8006fee <ADJ_SetParameter+0x92>
			ADJ_Motor.D = (float) newValue;
 8006fd0:	88bb      	ldrh	r3, [r7, #4]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fa4e 	bl	8006474 <__aeabi_ui2f>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <ADJ_SetParameter+0xa0>)
 8006fdc:	6313      	str	r3, [r2, #48]	; 0x30
			EEP_WriteEEPROM(newParameter, newValue);
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	88ba      	ldrh	r2, [r7, #4]
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f004 f9c3 	bl	800b370 <EEP_WriteEEPROM>
			break;
 8006fea:	e000      	b.n	8006fee <ADJ_SetParameter+0x92>
			break;
 8006fec:	bf00      	nop
	}
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	42c80000 	.word	0x42c80000
 8006ffc:	20000140 	.word	0x20000140
 8007000:	447a0000 	.word	0x447a0000

08007004 <ADJ_SetUm>:
//-----------------------------------------------------------------------------
//! \brief      Calculates the theoretical grind size
//! \details    Converts the pulses to the grind size
//! \params		None
void ADJ_SetUm (void)
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
	ADJ_Motor.GetUm = (((ADJ_Motor.GetPosition - ADJ_HOMEOFFSET) * 10) / ADJ_PULSESPER10UM) + ADJ.CalibrationSize;
 8007008:	4b15      	ldr	r3, [pc, #84]	; (8007060 <ADJ_SetUm+0x5c>)
 800700a:	6999      	ldr	r1, [r3, #24]
 800700c:	4b15      	ldr	r3, [pc, #84]	; (8007064 <ADJ_SetUm+0x60>)
 800700e:	899b      	ldrh	r3, [r3, #12]
 8007010:	461a      	mov	r2, r3
 8007012:	4b14      	ldr	r3, [pc, #80]	; (8007064 <ADJ_SetUm+0x60>)
 8007014:	895b      	ldrh	r3, [r3, #10]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	4613      	mov	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	4413      	add	r3, r2
 8007022:	4a11      	ldr	r2, [pc, #68]	; (8007068 <ADJ_SetUm+0x64>)
 8007024:	fb82 0203 	smull	r0, r2, r2, r3
 8007028:	1092      	asrs	r2, r2, #2
 800702a:	17db      	asrs	r3, r3, #31
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	18ca      	adds	r2, r1, r3
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	4a0c      	ldr	r2, [pc, #48]	; (800706c <ADJ_SetUm+0x68>)
 800703a:	fb82 1203 	smull	r1, r2, r2, r3
 800703e:	1192      	asrs	r2, r2, #6
 8007040:	17db      	asrs	r3, r3, #31
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	4a07      	ldr	r2, [pc, #28]	; (8007064 <ADJ_SetUm+0x60>)
 8007046:	8992      	ldrh	r2, [r2, #12]
 8007048:	4413      	add	r3, r2
 800704a:	4a05      	ldr	r2, [pc, #20]	; (8007060 <ADJ_SetUm+0x5c>)
 800704c:	6253      	str	r3, [r2, #36]	; 0x24
	ADJ.GetGrindSize = ADJ_Motor.GetUm;
 800704e:	4b04      	ldr	r3, [pc, #16]	; (8007060 <ADJ_SetUm+0x5c>)
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	b29a      	uxth	r2, r3
 8007054:	4b03      	ldr	r3, [pc, #12]	; (8007064 <ADJ_SetUm+0x60>)
 8007056:	809a      	strh	r2, [r3, #4]
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr
 8007060:	20000140 	.word	0x20000140
 8007064:	2000012c 	.word	0x2000012c
 8007068:	66666667 	.word	0x66666667
 800706c:	634c0635 	.word	0x634c0635

08007070 <ADJ_ResetPosition>:
//-----------------------------------------------------------------------------
//! \brief      Resets the pulse count
//! \details    Used for homing. Resets the GetPosition and pulses count
//! \params		None
void ADJ_ResetPosition (void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
	TIM4->CNT=0;
 8007074:	4b06      	ldr	r3, [pc, #24]	; (8007090 <ADJ_ResetPosition+0x20>)
 8007076:	2200      	movs	r2, #0
 8007078:	625a      	str	r2, [r3, #36]	; 0x24
	ADJ_Motor.TimerOld = 0;
 800707a:	4b06      	ldr	r3, [pc, #24]	; (8007094 <ADJ_ResetPosition+0x24>)
 800707c:	2200      	movs	r2, #0
 800707e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	ADJ_Motor.GetPosition = 0;
 8007082:	4b04      	ldr	r3, [pc, #16]	; (8007094 <ADJ_ResetPosition+0x24>)
 8007084:	2200      	movs	r2, #0
 8007086:	619a      	str	r2, [r3, #24]
	ADJ_SetUm();
 8007088:	f7ff ffbc 	bl	8007004 <ADJ_SetUm>
}
 800708c:	bf00      	nop
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40000800 	.word	0x40000800
 8007094:	20000140 	.word	0x20000140

08007098 <ADJ_HandleTask>:
//! \brief      Handles the adjust motor task
//! \details    Autonomously handles the task and returns TASK_READY if done
//! \param[in]  enuStatus newStatus
//! \param[out] Task state TASK_UNDEFINED, TASK_READY, TASK_ERROR, TASK_BUSY
uint8_t ADJ_HandleTask (enuStatus newStatus)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ReturnValue = TASK_UNDEFINED;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
	switch (newStatus)
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	2b16      	cmp	r3, #22
 80070aa:	f040 80b0 	bne.w	800720e <ADJ_HandleTask+0x176>
	{
		case sHOME:
		{
			ADJ.Timer ++;
 80070ae:	4b5b      	ldr	r3, [pc, #364]	; (800721c <ADJ_HandleTask+0x184>)
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	3301      	adds	r3, #1
 80070b4:	4a59      	ldr	r2, [pc, #356]	; (800721c <ADJ_HandleTask+0x184>)
 80070b6:	6113      	str	r3, [r2, #16]
			if (ADJ.Timer > ADJ_HOMETIMEOUT)
 80070b8:	4b58      	ldr	r3, [pc, #352]	; (800721c <ADJ_HandleTask+0x184>)
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b32      	cmp	r3, #50	; 0x32
 80070be:	d905      	bls.n	80070cc <ADJ_HandleTask+0x34>
			{
				ReturnValue = TASK_ERROR;
 80070c0:	2302      	movs	r3, #2
 80070c2:	73fb      	strb	r3, [r7, #15]
				ADJ.Timer = 0;
 80070c4:	4b55      	ldr	r3, [pc, #340]	; (800721c <ADJ_HandleTask+0x184>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	611a      	str	r2, [r3, #16]
					}
					default:
						break;
				}
			}
			break;
 80070ca:	e0a1      	b.n	8007210 <ADJ_HandleTask+0x178>
				ReturnValue = TASK_BUSY;
 80070cc:	2303      	movs	r3, #3
 80070ce:	73fb      	strb	r3, [r7, #15]
				switch (ADJ.Step)
 80070d0:	4b52      	ldr	r3, [pc, #328]	; (800721c <ADJ_HandleTask+0x184>)
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	f200 8090 	bhi.w	80071fa <ADJ_HandleTask+0x162>
 80070da:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <ADJ_HandleTask+0x48>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	080070f5 	.word	0x080070f5
 80070e4:	08007137 	.word	0x08007137
 80070e8:	08007173 	.word	0x08007173
 80070ec:	08007197 	.word	0x08007197
 80070f0:	080071d5 	.word	0x080071d5
						if (ADJ_Home() == 1) //Home sensor is on, so move from home sensor
 80070f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070f8:	4849      	ldr	r0, [pc, #292]	; (8007220 <ADJ_HandleTask+0x188>)
 80070fa:	f009 fd85 	bl	8010c08 <HAL_GPIO_ReadPin>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b01      	cmp	r3, #1
 8007102:	d10c      	bne.n	800711e <ADJ_HandleTask+0x86>
							ADJ_Motor.HomeFlag = 0;
 8007104:	4b47      	ldr	r3, [pc, #284]	; (8007224 <ADJ_HandleTask+0x18c>)
 8007106:	2200      	movs	r2, #0
 8007108:	711a      	strb	r2, [r3, #4]
							ADJ_ResetPosition();
 800710a:	f7ff ffb1 	bl	8007070 <ADJ_ResetPosition>
							ADJ_Motor.SetPosition = ADJ_MAXPULSES; //Set position away from the home sensor
 800710e:	4b45      	ldr	r3, [pc, #276]	; (8007224 <ADJ_HandleTask+0x18c>)
 8007110:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007114:	615a      	str	r2, [r3, #20]
							ADJ.Step = 1;
 8007116:	4b41      	ldr	r3, [pc, #260]	; (800721c <ADJ_HandleTask+0x184>)
 8007118:	2201      	movs	r2, #1
 800711a:	705a      	strb	r2, [r3, #1]
						break;
 800711c:	e076      	b.n	800720c <ADJ_HandleTask+0x174>
							ADJ_Motor.HomeFlag = 1; //Reset position to 0 if home sensor is triggered
 800711e:	4b41      	ldr	r3, [pc, #260]	; (8007224 <ADJ_HandleTask+0x18c>)
 8007120:	2201      	movs	r2, #1
 8007122:	711a      	strb	r2, [r3, #4]
							ADJ_ResetPosition();
 8007124:	f7ff ffa4 	bl	8007070 <ADJ_ResetPosition>
							ADJ_Motor.SetPosition = -ADJ_MAXPULSES;
 8007128:	4b3e      	ldr	r3, [pc, #248]	; (8007224 <ADJ_HandleTask+0x18c>)
 800712a:	4a3f      	ldr	r2, [pc, #252]	; (8007228 <ADJ_HandleTask+0x190>)
 800712c:	615a      	str	r2, [r3, #20]
							ADJ.Step = 3;
 800712e:	4b3b      	ldr	r3, [pc, #236]	; (800721c <ADJ_HandleTask+0x184>)
 8007130:	2203      	movs	r2, #3
 8007132:	705a      	strb	r2, [r3, #1]
						break;
 8007134:	e06a      	b.n	800720c <ADJ_HandleTask+0x174>
						if (ADJ_Home() == 0) //Home sensor is off, move a little further to remove play
 8007136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800713a:	4839      	ldr	r0, [pc, #228]	; (8007220 <ADJ_HandleTask+0x188>)
 800713c:	f009 fd64 	bl	8010c08 <HAL_GPIO_ReadPin>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d15b      	bne.n	80071fe <ADJ_HandleTask+0x166>
							ADJ_ResetPosition();
 8007146:	f7ff ff93 	bl	8007070 <ADJ_ResetPosition>
							ADJ_Motor.SetPosition = ADJ.Play * ADJ_PULSESPER10UM / 10;
 800714a:	4b34      	ldr	r3, [pc, #208]	; (800721c <ADJ_HandleTask+0x184>)
 800714c:	891b      	ldrh	r3, [r3, #8]
 800714e:	461a      	mov	r2, r3
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	4413      	add	r3, r2
 800715a:	4a34      	ldr	r2, [pc, #208]	; (800722c <ADJ_HandleTask+0x194>)
 800715c:	fb82 1203 	smull	r1, r2, r2, r3
 8007160:	1092      	asrs	r2, r2, #2
 8007162:	17db      	asrs	r3, r3, #31
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	4a2f      	ldr	r2, [pc, #188]	; (8007224 <ADJ_HandleTask+0x18c>)
 8007168:	6153      	str	r3, [r2, #20]
							ADJ.Step = 2;
 800716a:	4b2c      	ldr	r3, [pc, #176]	; (800721c <ADJ_HandleTask+0x184>)
 800716c:	2202      	movs	r2, #2
 800716e:	705a      	strb	r2, [r3, #1]
						break;
 8007170:	e045      	b.n	80071fe <ADJ_HandleTask+0x166>
						if (ADJ_Motor.GetPosition == ADJ_Motor.SetPosition)
 8007172:	4b2c      	ldr	r3, [pc, #176]	; (8007224 <ADJ_HandleTask+0x18c>)
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <ADJ_HandleTask+0x18c>)
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	429a      	cmp	r2, r3
 800717c:	d141      	bne.n	8007202 <ADJ_HandleTask+0x16a>
							ADJ_Motor.HomeFlag = 1; //Reset position to 0 if home sensor is triggered
 800717e:	4b29      	ldr	r3, [pc, #164]	; (8007224 <ADJ_HandleTask+0x18c>)
 8007180:	2201      	movs	r2, #1
 8007182:	711a      	strb	r2, [r3, #4]
							ADJ_ResetPosition();
 8007184:	f7ff ff74 	bl	8007070 <ADJ_ResetPosition>
							ADJ_Motor.SetPosition = -ADJ_MAXPULSES;
 8007188:	4b26      	ldr	r3, [pc, #152]	; (8007224 <ADJ_HandleTask+0x18c>)
 800718a:	4a27      	ldr	r2, [pc, #156]	; (8007228 <ADJ_HandleTask+0x190>)
 800718c:	615a      	str	r2, [r3, #20]
							ADJ.Step = 3;
 800718e:	4b23      	ldr	r3, [pc, #140]	; (800721c <ADJ_HandleTask+0x184>)
 8007190:	2203      	movs	r2, #3
 8007192:	705a      	strb	r2, [r3, #1]
						break;
 8007194:	e035      	b.n	8007202 <ADJ_HandleTask+0x16a>
						if (ADJ_Home() == 1) //Home sensor is on, so move from home sensor
 8007196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800719a:	4821      	ldr	r0, [pc, #132]	; (8007220 <ADJ_HandleTask+0x188>)
 800719c:	f009 fd34 	bl	8010c08 <HAL_GPIO_ReadPin>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d12f      	bne.n	8007206 <ADJ_HandleTask+0x16e>
							ADJ_Motor.SetPosition = ADJ_HOMEOFFSET;
 80071a6:	4b1d      	ldr	r3, [pc, #116]	; (800721c <ADJ_HandleTask+0x184>)
 80071a8:	899b      	ldrh	r3, [r3, #12]
 80071aa:	461a      	mov	r2, r3
 80071ac:	4b1b      	ldr	r3, [pc, #108]	; (800721c <ADJ_HandleTask+0x184>)
 80071ae:	895b      	ldrh	r3, [r3, #10]
 80071b0:	1ad2      	subs	r2, r2, r3
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	4413      	add	r3, r2
 80071bc:	4a1b      	ldr	r2, [pc, #108]	; (800722c <ADJ_HandleTask+0x194>)
 80071be:	fb82 1203 	smull	r1, r2, r2, r3
 80071c2:	1092      	asrs	r2, r2, #2
 80071c4:	17db      	asrs	r3, r3, #31
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	4a16      	ldr	r2, [pc, #88]	; (8007224 <ADJ_HandleTask+0x18c>)
 80071ca:	6153      	str	r3, [r2, #20]
							ADJ.Step = 4;
 80071cc:	4b13      	ldr	r3, [pc, #76]	; (800721c <ADJ_HandleTask+0x184>)
 80071ce:	2204      	movs	r2, #4
 80071d0:	705a      	strb	r2, [r3, #1]
						break;
 80071d2:	e018      	b.n	8007206 <ADJ_HandleTask+0x16e>
						if (ADJ_Motor.SetPosition == ADJ_Motor.GetPosition)
 80071d4:	4b13      	ldr	r3, [pc, #76]	; (8007224 <ADJ_HandleTask+0x18c>)
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	4b12      	ldr	r3, [pc, #72]	; (8007224 <ADJ_HandleTask+0x18c>)
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d114      	bne.n	800720a <ADJ_HandleTask+0x172>
							ADJ.Step = 0;
 80071e0:	4b0e      	ldr	r3, [pc, #56]	; (800721c <ADJ_HandleTask+0x184>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	705a      	strb	r2, [r3, #1]
							ADJ.Timer = 0;
 80071e6:	4b0d      	ldr	r3, [pc, #52]	; (800721c <ADJ_HandleTask+0x184>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	611a      	str	r2, [r3, #16]
							ADJ.SetGrindSize = ADJ.GetGrindSize;
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <ADJ_HandleTask+0x184>)
 80071ee:	889a      	ldrh	r2, [r3, #4]
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <ADJ_HandleTask+0x184>)
 80071f2:	805a      	strh	r2, [r3, #2]
							ReturnValue = TASK_READY;
 80071f4:	2301      	movs	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
						break;
 80071f8:	e007      	b.n	800720a <ADJ_HandleTask+0x172>
						break;
 80071fa:	bf00      	nop
 80071fc:	e008      	b.n	8007210 <ADJ_HandleTask+0x178>
						break;
 80071fe:	bf00      	nop
 8007200:	e006      	b.n	8007210 <ADJ_HandleTask+0x178>
						break;
 8007202:	bf00      	nop
 8007204:	e004      	b.n	8007210 <ADJ_HandleTask+0x178>
						break;
 8007206:	bf00      	nop
 8007208:	e002      	b.n	8007210 <ADJ_HandleTask+0x178>
						break;
 800720a:	bf00      	nop
			break;
 800720c:	e000      	b.n	8007210 <ADJ_HandleTask+0x178>
		}
		default:
			break;
 800720e:	bf00      	nop
	}
	return ReturnValue;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	2000012c 	.word	0x2000012c
 8007220:	40020000 	.word	0x40020000
 8007224:	20000140 	.word	0x20000140
 8007228:	ffffc568 	.word	0xffffc568
 800722c:	66666667 	.word	0x66666667

08007230 <ADJ_Init>:
//-----------------------------------------------------------------------------
//! \brief      Controls the index motor position PID
//! \details    Calculates the PID value for the position control
//! \param      None
void ADJ_Init(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
	if (DUMMYMODEGRINDER)
 8007234:	4b50      	ldr	r3, [pc, #320]	; (8007378 <ADJ_Init+0x148>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <ADJ_Init+0x22>
	{
		ADJ.GetGrindSize = 300;
 800723c:	4b4f      	ldr	r3, [pc, #316]	; (800737c <ADJ_Init+0x14c>)
 800723e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007242:	809a      	strh	r2, [r3, #4]
		ADJ_Motor.GetUm = 300;
 8007244:	4b4e      	ldr	r3, [pc, #312]	; (8007380 <ADJ_Init+0x150>)
 8007246:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800724a:	625a      	str	r2, [r3, #36]	; 0x24
		ADJ.Status = sINACTIVE;
 800724c:	4b4b      	ldr	r3, [pc, #300]	; (800737c <ADJ_Init+0x14c>)
 800724e:	2204      	movs	r2, #4
 8007250:	701a      	strb	r2, [r3, #0]
	}
	ADJ.GrindSizeAccuracy = 2;
 8007252:	4b4a      	ldr	r3, [pc, #296]	; (800737c <ADJ_Init+0x14c>)
 8007254:	2202      	movs	r2, #2
 8007256:	80da      	strh	r2, [r3, #6]
	ADJ.Play = 100;
 8007258:	4b48      	ldr	r3, [pc, #288]	; (800737c <ADJ_Init+0x14c>)
 800725a:	2264      	movs	r2, #100	; 0x64
 800725c:	811a      	strh	r2, [r3, #8]
	ADJ.HomeSize = 500;
 800725e:	4b47      	ldr	r3, [pc, #284]	; (800737c <ADJ_Init+0x14c>)
 8007260:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007264:	815a      	strh	r2, [r3, #10]
	ADJ.CalibrationSize = 375;
 8007266:	4b45      	ldr	r3, [pc, #276]	; (800737c <ADJ_Init+0x14c>)
 8007268:	f240 1277 	movw	r2, #375	; 0x177
 800726c:	819a      	strh	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim10);
 800726e:	4845      	ldr	r0, [pc, #276]	; (8007384 <ADJ_Init+0x154>)
 8007270:	f00b f8f2 	bl	8012458 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8007274:	2100      	movs	r1, #0
 8007276:	4843      	ldr	r0, [pc, #268]	; (8007384 <ADJ_Init+0x154>)
 8007278:	f00b f9f8 	bl	801266c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim11);
 800727c:	4842      	ldr	r0, [pc, #264]	; (8007388 <ADJ_Init+0x158>)
 800727e:	f00b f8eb 	bl	8012458 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8007282:	2100      	movs	r1, #0
 8007284:	4840      	ldr	r0, [pc, #256]	; (8007388 <ADJ_Init+0x158>)
 8007286:	f00b f9f1 	bl	801266c <HAL_TIM_PWM_Start>
	ADJ_Motor.P = (float) (EEP_ReadEEPROM(ADJ_P)/100.0f);
 800728a:	2029      	movs	r0, #41	; 0x29
 800728c:	f004 f88d 	bl	800b3aa <EEP_ReadEEPROM>
 8007290:	4603      	mov	r3, r0
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff f8ee 	bl	8006474 <__aeabi_ui2f>
 8007298:	4603      	mov	r3, r0
 800729a:	493c      	ldr	r1, [pc, #240]	; (800738c <ADJ_Init+0x15c>)
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff f9f5 	bl	800668c <__aeabi_fdiv>
 80072a2:	4603      	mov	r3, r0
 80072a4:	461a      	mov	r2, r3
 80072a6:	4b36      	ldr	r3, [pc, #216]	; (8007380 <ADJ_Init+0x150>)
 80072a8:	629a      	str	r2, [r3, #40]	; 0x28
	if (ADJ_Motor.P == 0) ADJ_Motor.P = 2.5;
 80072aa:	4b35      	ldr	r3, [pc, #212]	; (8007380 <ADJ_Init+0x150>)
 80072ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ae:	f04f 0100 	mov.w	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff faca 	bl	800684c <__aeabi_fcmpeq>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <ADJ_Init+0x94>
 80072be:	4b30      	ldr	r3, [pc, #192]	; (8007380 <ADJ_Init+0x150>)
 80072c0:	4a33      	ldr	r2, [pc, #204]	; (8007390 <ADJ_Init+0x160>)
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28
	ADJ_Motor.I = (float) (EEP_ReadEEPROM(ADJ_I)/1000.0f);
 80072c4:	202a      	movs	r0, #42	; 0x2a
 80072c6:	f004 f870 	bl	800b3aa <EEP_ReadEEPROM>
 80072ca:	4603      	mov	r3, r0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff f8d1 	bl	8006474 <__aeabi_ui2f>
 80072d2:	4603      	mov	r3, r0
 80072d4:	492f      	ldr	r1, [pc, #188]	; (8007394 <ADJ_Init+0x164>)
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff f9d8 	bl	800668c <__aeabi_fdiv>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	4b27      	ldr	r3, [pc, #156]	; (8007380 <ADJ_Init+0x150>)
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (ADJ_Motor.I == 0) ADJ_Motor.I = 0;
 80072e4:	4b26      	ldr	r3, [pc, #152]	; (8007380 <ADJ_Init+0x150>)
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	f04f 0100 	mov.w	r1, #0
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff faad 	bl	800684c <__aeabi_fcmpeq>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <ADJ_Init+0xd0>
 80072f8:	4b21      	ldr	r3, [pc, #132]	; (8007380 <ADJ_Init+0x150>)
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	62da      	str	r2, [r3, #44]	; 0x2c
	ADJ_Motor.D = EEP_ReadEEPROM(ADJ_D);
 8007300:	202b      	movs	r0, #43	; 0x2b
 8007302:	f004 f852 	bl	800b3aa <EEP_ReadEEPROM>
 8007306:	4603      	mov	r3, r0
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff f8b3 	bl	8006474 <__aeabi_ui2f>
 800730e:	4603      	mov	r3, r0
 8007310:	4a1b      	ldr	r2, [pc, #108]	; (8007380 <ADJ_Init+0x150>)
 8007312:	6313      	str	r3, [r2, #48]	; 0x30
	if (ADJ_Motor.D == 0) ADJ_Motor.D = 250;
 8007314:	4b1a      	ldr	r3, [pc, #104]	; (8007380 <ADJ_Init+0x150>)
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	f04f 0100 	mov.w	r1, #0
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fa95 	bl	800684c <__aeabi_fcmpeq>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <ADJ_Init+0xfe>
 8007328:	4b15      	ldr	r3, [pc, #84]	; (8007380 <ADJ_Init+0x150>)
 800732a:	4a1b      	ldr	r2, [pc, #108]	; (8007398 <ADJ_Init+0x168>)
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
	ADJ_Motor.SpeedP = 2;
 800732e:	4b14      	ldr	r3, [pc, #80]	; (8007380 <ADJ_Init+0x150>)
 8007330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007334:	635a      	str	r2, [r3, #52]	; 0x34
	ADJ_Motor.SpeedI = 0;
 8007336:	4b12      	ldr	r3, [pc, #72]	; (8007380 <ADJ_Init+0x150>)
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	639a      	str	r2, [r3, #56]	; 0x38
	ADJ_Motor.SpeedD = 200;
 800733e:	4b10      	ldr	r3, [pc, #64]	; (8007380 <ADJ_Init+0x150>)
 8007340:	4a16      	ldr	r2, [pc, #88]	; (800739c <ADJ_Init+0x16c>)
 8007342:	63da      	str	r2, [r3, #60]	; 0x3c
	ADJ_Motor.Status=sACTIVE;
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <ADJ_Init+0x150>)
 8007346:	2203      	movs	r2, #3
 8007348:	701a      	strb	r2, [r3, #0]
	ADJ_Motor.PulsesPerRevolution = 28; //(PPR = 7 * 4)
 800734a:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <ADJ_Init+0x150>)
 800734c:	221c      	movs	r2, #28
 800734e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ADJ_CCW()=100;
 8007352:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <ADJ_Init+0x170>)
 8007354:	2264      	movs	r2, #100	; 0x64
 8007356:	635a      	str	r2, [r3, #52]	; 0x34
	ADJ_CW()=100;
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <ADJ_Init+0x174>)
 800735a:	2264      	movs	r2, #100	; 0x64
 800735c:	635a      	str	r2, [r3, #52]	; 0x34
	ADJ_Motor.PosControl = 1;
 800735e:	4b08      	ldr	r3, [pc, #32]	; (8007380 <ADJ_Init+0x150>)
 8007360:	2201      	movs	r2, #1
 8007362:	70da      	strb	r2, [r3, #3]
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8007364:	213c      	movs	r1, #60	; 0x3c
 8007366:	4810      	ldr	r0, [pc, #64]	; (80073a8 <ADJ_Init+0x178>)
 8007368:	f00b fab4 	bl	80128d4 <HAL_TIM_Encoder_Start>
	TIM4->CNT = 0;
 800736c:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <ADJ_Init+0x17c>)
 800736e:	2200      	movs	r2, #0
 8007370:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007372:	bf00      	nop
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	2000096f 	.word	0x2000096f
 800737c:	2000012c 	.word	0x2000012c
 8007380:	20000140 	.word	0x20000140
 8007384:	200007c8 	.word	0x200007c8
 8007388:	20000808 	.word	0x20000808
 800738c:	42c80000 	.word	0x42c80000
 8007390:	40200000 	.word	0x40200000
 8007394:	447a0000 	.word	0x447a0000
 8007398:	437a0000 	.word	0x437a0000
 800739c:	43480000 	.word	0x43480000
 80073a0:	40010c00 	.word	0x40010c00
 80073a4:	40011000 	.word	0x40011000
 80073a8:	20000748 	.word	0x20000748
 80073ac:	40000800 	.word	0x40000800

080073b0 <ADJ_HandlePosPID>:
//-----------------------------------------------------------------------------
//! \brief      Controls the index motor position PID
//! \details    Calculates the PID value for the position control
//! \param      None
void ADJ_HandlePosPID (void)
{
 80073b0:	b598      	push	{r3, r4, r7, lr}
 80073b2:	af00      	add	r7, sp, #0
	ADJ_Motor.ErrorP = (float) (ADJ_Motor.SetPosition - ADJ_Motor.GetPosition);
 80073b4:	4b29      	ldr	r3, [pc, #164]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	4b28      	ldr	r3, [pc, #160]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff f85c 	bl	800647c <__aeabi_i2f>
 80073c4:	4603      	mov	r3, r0
 80073c6:	4a25      	ldr	r2, [pc, #148]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073c8:	6513      	str	r3, [r2, #80]	; 0x50
	ADJ_Motor.ErrorI = ADJ_Motor.ErrorI + ADJ_Motor.ErrorP;
 80073ca:	4b24      	ldr	r3, [pc, #144]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ce:	4a23      	ldr	r2, [pc, #140]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe ff9d 	bl	8006314 <__addsf3>
 80073da:	4603      	mov	r3, r0
 80073dc:	461a      	mov	r2, r3
 80073de:	4b1f      	ldr	r3, [pc, #124]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073e0:	655a      	str	r2, [r3, #84]	; 0x54
	ADJ_Motor.ErrorD = ADJ_Motor.ErrorP - ADJ_Motor.ErrorPOld;
 80073e2:	4b1e      	ldr	r3, [pc, #120]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e6:	4a1d      	ldr	r2, [pc, #116]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe ff8f 	bl	8006310 <__aeabi_fsub>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	4b19      	ldr	r3, [pc, #100]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073f8:	659a      	str	r2, [r3, #88]	; 0x58
	ADJ_Motor.ErrorPOld = ADJ_Motor.ErrorP;
 80073fa:	4b18      	ldr	r3, [pc, #96]	; (800745c <ADJ_HandlePosPID+0xac>)
 80073fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fe:	4a17      	ldr	r2, [pc, #92]	; (800745c <ADJ_HandlePosPID+0xac>)
 8007400:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADJ_Motor.PID = ADJ_Motor.ErrorP * ADJ_Motor.P + ADJ_Motor.ErrorI * ADJ_Motor.I + ADJ_Motor.ErrorD * ADJ_Motor.D;
 8007402:	4b16      	ldr	r3, [pc, #88]	; (800745c <ADJ_HandlePosPID+0xac>)
 8007404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007406:	4a15      	ldr	r2, [pc, #84]	; (800745c <ADJ_HandlePosPID+0xac>)
 8007408:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff f889 	bl	8006524 <__aeabi_fmul>
 8007412:	4603      	mov	r3, r0
 8007414:	461c      	mov	r4, r3
 8007416:	4b11      	ldr	r3, [pc, #68]	; (800745c <ADJ_HandlePosPID+0xac>)
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	4a10      	ldr	r2, [pc, #64]	; (800745c <ADJ_HandlePosPID+0xac>)
 800741c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800741e:	4611      	mov	r1, r2
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff f87f 	bl	8006524 <__aeabi_fmul>
 8007426:	4603      	mov	r3, r0
 8007428:	4619      	mov	r1, r3
 800742a:	4620      	mov	r0, r4
 800742c:	f7fe ff72 	bl	8006314 <__addsf3>
 8007430:	4603      	mov	r3, r0
 8007432:	461c      	mov	r4, r3
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <ADJ_HandlePosPID+0xac>)
 8007436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007438:	4a08      	ldr	r2, [pc, #32]	; (800745c <ADJ_HandlePosPID+0xac>)
 800743a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800743c:	4611      	mov	r1, r2
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff f870 	bl	8006524 <__aeabi_fmul>
 8007444:	4603      	mov	r3, r0
 8007446:	4619      	mov	r1, r3
 8007448:	4620      	mov	r0, r4
 800744a:	f7fe ff63 	bl	8006314 <__addsf3>
 800744e:	4603      	mov	r3, r0
 8007450:	461a      	mov	r2, r3
 8007452:	4b02      	ldr	r3, [pc, #8]	; (800745c <ADJ_HandlePosPID+0xac>)
 8007454:	65da      	str	r2, [r3, #92]	; 0x5c
	if (ADJ_Motor.Control > 5000)
	{
		ADJ_Motor.Control = 5000;
	}
	*/
}
 8007456:	bf00      	nop
 8007458:	bd98      	pop	{r3, r4, r7, pc}
 800745a:	bf00      	nop
 800745c:	20000140 	.word	0x20000140

08007460 <ADJ_HandleSpeedPID>:
//-----------------------------------------------------------------------------
//! \brief      Controls the index motor position PID
//! \details    Calculates the PID value for the position control
//! \param      None
void ADJ_HandleSpeedPID (void)
{
 8007460:	b598      	push	{r3, r4, r7, lr}
 8007462:	af00      	add	r7, sp, #0
	ADJ_Motor.SpeedErrorP = (float) (ADJ_Motor.SetSpeed - ADJ_Motor.GetSpeed);
 8007464:	4b29      	ldr	r3, [pc, #164]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	4b28      	ldr	r3, [pc, #160]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff f804 	bl	800647c <__aeabi_i2f>
 8007474:	4603      	mov	r3, r0
 8007476:	4a25      	ldr	r2, [pc, #148]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 8007478:	6653      	str	r3, [r2, #100]	; 0x64
	ADJ_Motor.SpeedErrorI = ADJ_Motor.SpeedErrorI + ADJ_Motor.SpeedErrorP;
 800747a:	4b24      	ldr	r3, [pc, #144]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 800747c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800747e:	4a23      	ldr	r2, [pc, #140]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 8007480:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe ff45 	bl	8006314 <__addsf3>
 800748a:	4603      	mov	r3, r0
 800748c:	461a      	mov	r2, r3
 800748e:	4b1f      	ldr	r3, [pc, #124]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 8007490:	669a      	str	r2, [r3, #104]	; 0x68
	ADJ_Motor.SpeedErrorD = ADJ_Motor.SpeedErrorP - ADJ_Motor.SpeedErrorPOld;
 8007492:	4b1e      	ldr	r3, [pc, #120]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 8007494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007496:	4a1d      	ldr	r2, [pc, #116]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 8007498:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800749a:	4611      	mov	r1, r2
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe ff37 	bl	8006310 <__aeabi_fsub>
 80074a2:	4603      	mov	r3, r0
 80074a4:	461a      	mov	r2, r3
 80074a6:	4b19      	ldr	r3, [pc, #100]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074a8:	66da      	str	r2, [r3, #108]	; 0x6c
	ADJ_Motor.SpeedErrorPOld = ADJ_Motor.SpeedErrorP;
 80074aa:	4b18      	ldr	r3, [pc, #96]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074ae:	4a17      	ldr	r2, [pc, #92]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074b0:	6613      	str	r3, [r2, #96]	; 0x60
	ADJ_Motor.SpeedPID = ADJ_Motor.SpeedErrorP * ADJ_Motor.SpeedP + ADJ_Motor.SpeedErrorI * ADJ_Motor.SpeedI + ADJ_Motor.SpeedErrorD * ADJ_Motor.SpeedD;
 80074b2:	4b16      	ldr	r3, [pc, #88]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b6:	4a15      	ldr	r2, [pc, #84]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074ba:	4611      	mov	r1, r2
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff f831 	bl	8006524 <__aeabi_fmul>
 80074c2:	4603      	mov	r3, r0
 80074c4:	461c      	mov	r4, r3
 80074c6:	4b11      	ldr	r3, [pc, #68]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ca:	4a10      	ldr	r2, [pc, #64]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff f827 	bl	8006524 <__aeabi_fmul>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4619      	mov	r1, r3
 80074da:	4620      	mov	r0, r4
 80074dc:	f7fe ff1a 	bl	8006314 <__addsf3>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461c      	mov	r4, r3
 80074e4:	4b09      	ldr	r3, [pc, #36]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 80074ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff f818 	bl	8006524 <__aeabi_fmul>
 80074f4:	4603      	mov	r3, r0
 80074f6:	4619      	mov	r1, r3
 80074f8:	4620      	mov	r0, r4
 80074fa:	f7fe ff0b 	bl	8006314 <__addsf3>
 80074fe:	4603      	mov	r3, r0
 8007500:	461a      	mov	r2, r3
 8007502:	4b02      	ldr	r3, [pc, #8]	; (800750c <ADJ_HandleSpeedPID+0xac>)
 8007504:	671a      	str	r2, [r3, #112]	; 0x70
	if (ADJ_Motor.Control > 5000)
	{
		ADJ_Motor.Control = 5000;
	}
	*/
}
 8007506:	bf00      	nop
 8007508:	bd98      	pop	{r3, r4, r7, pc}
 800750a:	bf00      	nop
 800750c:	20000140 	.word	0x20000140

08007510 <ADJ_Set>:
uint8_t ADJ_Set (uint16_t newGrindSize)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	80fb      	strh	r3, [r7, #6]
	uint8_t ReturnValue = TASK_BUSY;
 800751a:	2303      	movs	r3, #3
 800751c:	73fb      	strb	r3, [r7, #15]

	if (DUMMYMODEGRINDER)
 800751e:	4b1c      	ldr	r3, [pc, #112]	; (8007590 <ADJ_Set+0x80>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d018      	beq.n	8007558 <ADJ_Set+0x48>
	{
		if (ADJ_Motor.GetUm > newGrindSize)
 8007526:	4b1b      	ldr	r3, [pc, #108]	; (8007594 <ADJ_Set+0x84>)
 8007528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	429a      	cmp	r2, r3
 800752e:	dd05      	ble.n	800753c <ADJ_Set+0x2c>
		{
			ADJ_Motor.GetUm --;
 8007530:	4b18      	ldr	r3, [pc, #96]	; (8007594 <ADJ_Set+0x84>)
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	3b01      	subs	r3, #1
 8007536:	4a17      	ldr	r2, [pc, #92]	; (8007594 <ADJ_Set+0x84>)
 8007538:	6253      	str	r3, [r2, #36]	; 0x24
 800753a:	e023      	b.n	8007584 <ADJ_Set+0x74>
		}
		else if (ADJ_Motor.GetUm < newGrindSize)
 800753c:	4b15      	ldr	r3, [pc, #84]	; (8007594 <ADJ_Set+0x84>)
 800753e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	429a      	cmp	r2, r3
 8007544:	da05      	bge.n	8007552 <ADJ_Set+0x42>
		{
			ADJ_Motor.GetUm ++;
 8007546:	4b13      	ldr	r3, [pc, #76]	; (8007594 <ADJ_Set+0x84>)
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	3301      	adds	r3, #1
 800754c:	4a11      	ldr	r2, [pc, #68]	; (8007594 <ADJ_Set+0x84>)
 800754e:	6253      	str	r3, [r2, #36]	; 0x24
 8007550:	e018      	b.n	8007584 <ADJ_Set+0x74>
		}
		else
		{
			ReturnValue = TASK_READY;
 8007552:	2301      	movs	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
 8007556:	e015      	b.n	8007584 <ADJ_Set+0x74>
		}
	}
	else
	{
		if (abs(ADJ.GetGrindSize - ADJ.SetGrindSize)<= ADJ.GrindSizeAccuracy )//ADJ.GrindSizeAccuracy um accuracy
 8007558:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <ADJ_Set+0x88>)
 800755a:	889b      	ldrh	r3, [r3, #4]
 800755c:	461a      	mov	r2, r3
 800755e:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <ADJ_Set+0x88>)
 8007560:	885b      	ldrh	r3, [r3, #2]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	bfb8      	it	lt
 8007568:	425b      	neglt	r3, r3
 800756a:	4a0b      	ldr	r2, [pc, #44]	; (8007598 <ADJ_Set+0x88>)
 800756c:	88d2      	ldrh	r2, [r2, #6]
 800756e:	4293      	cmp	r3, r2
 8007570:	dc05      	bgt.n	800757e <ADJ_Set+0x6e>
		{
			ADJ.Status = sINACTIVE;
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <ADJ_Set+0x88>)
 8007574:	2204      	movs	r2, #4
 8007576:	701a      	strb	r2, [r3, #0]
			ReturnValue = TASK_READY;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
 800757c:	e002      	b.n	8007584 <ADJ_Set+0x74>
		}
		else
		{
			ADJ.Status = sACTIVE;
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <ADJ_Set+0x88>)
 8007580:	2203      	movs	r2, #3
 8007582:	701a      	strb	r2, [r3, #0]
		}
	}
	return ReturnValue;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr
 8007590:	2000096f 	.word	0x2000096f
 8007594:	20000140 	.word	0x20000140
 8007598:	2000012c 	.word	0x2000012c

0800759c <ADJ_HandleMotor>:
//-----------------------------------------------------------------------------
//! \brief      Handles the adjust motor Position
//! \details    Controls the motor to the set position
//! \params     None
void ADJ_HandleMotor (void)
{
 800759c:	b590      	push	{r4, r7, lr}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
	uint16_t Timer;
	int32_t Ticks;

	if (DUMMYMODEGRINDER) return;
 80075a2:	4b96      	ldr	r3, [pc, #600]	; (80077fc <ADJ_HandleMotor+0x260>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f040 8159 	bne.w	800785e <ADJ_HandleMotor+0x2c2>

	Timer = TIM4->CNT;
 80075ac:	4b94      	ldr	r3, [pc, #592]	; (8007800 <ADJ_HandleMotor+0x264>)
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	807b      	strh	r3, [r7, #2]
	if (abs(Timer - ADJ_Motor.TimerOld) > 30000) //Transition through zero
 80075b2:	887b      	ldrh	r3, [r7, #2]
 80075b4:	4a93      	ldr	r2, [pc, #588]	; (8007804 <ADJ_HandleMotor+0x268>)
 80075b6:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bfb8      	it	lt
 80075c0:	425b      	neglt	r3, r3
 80075c2:	f247 5230 	movw	r2, #30000	; 0x7530
 80075c6:	4293      	cmp	r3, r2
 80075c8:	dd19      	ble.n	80075fe <ADJ_HandleMotor+0x62>
	{
		if (Timer > ADJ_Motor.TimerOld)
 80075ca:	4b8e      	ldr	r3, [pc, #568]	; (8007804 <ADJ_HandleMotor+0x268>)
 80075cc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80075d0:	887a      	ldrh	r2, [r7, #2]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d90a      	bls.n	80075ec <ADJ_HandleMotor+0x50>
		{
			Ticks = -(ADJ_Motor.TimerOld + (65536 - Timer));
 80075d6:	4b8b      	ldr	r3, [pc, #556]	; (8007804 <ADJ_HandleMotor+0x268>)
 80075d8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80075dc:	461a      	mov	r2, r3
 80075de:	887b      	ldrh	r3, [r7, #2]
 80075e0:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80075e4:	4413      	add	r3, r2
 80075e6:	425b      	negs	r3, r3
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	e00e      	b.n	800760a <ADJ_HandleMotor+0x6e>
		}
		else
		{
			Ticks = Timer + (65536 - ADJ_Motor.TimerOld);
 80075ec:	887a      	ldrh	r2, [r7, #2]
 80075ee:	4b85      	ldr	r3, [pc, #532]	; (8007804 <ADJ_HandleMotor+0x268>)
 80075f0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80075f4:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80075f8:	4413      	add	r3, r2
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	e005      	b.n	800760a <ADJ_HandleMotor+0x6e>
		}
	}
	else
	{
		Ticks = Timer - ADJ_Motor.TimerOld;
 80075fe:	887b      	ldrh	r3, [r7, #2]
 8007600:	4a80      	ldr	r2, [pc, #512]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007602:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	607b      	str	r3, [r7, #4]
	}
	ADJ_Motor.GetPosition += Ticks;
 800760a:	4b7e      	ldr	r3, [pc, #504]	; (8007804 <ADJ_HandleMotor+0x268>)
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4413      	add	r3, r2
 8007612:	4a7c      	ldr	r2, [pc, #496]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007614:	6193      	str	r3, [r2, #24]
	ADJ_Motor.PositionDelta = ADJ_Motor.SetPosition - ADJ_Motor.GetPosition;
 8007616:	4b7b      	ldr	r3, [pc, #492]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007618:	695a      	ldr	r2, [r3, #20]
 800761a:	4b7a      	ldr	r3, [pc, #488]	; (8007804 <ADJ_HandleMotor+0x268>)
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	4a78      	ldr	r2, [pc, #480]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007622:	6213      	str	r3, [r2, #32]
	ADJ_SetUm();
 8007624:	f7ff fcee 	bl	8007004 <ADJ_SetUm>

	ADJ_Motor.GetSpeed = Ticks * 365 ;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f240 126d 	movw	r2, #365	; 0x16d
 800762e:	fb02 f303 	mul.w	r3, r2, r3
 8007632:	4a74      	ldr	r2, [pc, #464]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007634:	6113      	str	r3, [r2, #16]

	ADJ_Motor.TimerOld = Timer;
 8007636:	4a73      	ldr	r2, [pc, #460]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007638:	887b      	ldrh	r3, [r7, #2]
 800763a:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
	if (ADJ_Motor.PosControl)
 800763e:	4b71      	ldr	r3, [pc, #452]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007640:	78db      	ldrb	r3, [r3, #3]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <ADJ_HandleMotor+0xae>
	{
		ADJ_HandlePosPID();
 8007646:	f7ff feb3 	bl	80073b0 <ADJ_HandlePosPID>
	}
	if (ADJ_Motor.SpeedControl)
 800764a:	4b6e      	ldr	r3, [pc, #440]	; (8007804 <ADJ_HandleMotor+0x268>)
 800764c:	789b      	ldrb	r3, [r3, #2]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <ADJ_HandleMotor+0xba>
	{
		ADJ_HandleSpeedPID();
 8007652:	f7ff ff05 	bl	8007460 <ADJ_HandleSpeedPID>
	}
	if (ADJ_Motor.PosControl)
 8007656:	4b6b      	ldr	r3, [pc, #428]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007658:	78db      	ldrb	r3, [r3, #3]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00f      	beq.n	800767e <ADJ_HandleMotor+0xe2>
	{
	  if (ADJ_Motor.SpeedControl) //Both controls
 800765e:	4b69      	ldr	r3, [pc, #420]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007660:	789b      	ldrb	r3, [r3, #2]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d11a      	bne.n	800769c <ADJ_HandleMotor+0x100>
	  {

	  }
	  else
	  {
		  ADJ_Motor.Control = ADJ_Motor.Control + (int32_t) ADJ_Motor.PID;
 8007666:	4b67      	ldr	r3, [pc, #412]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007668:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800766a:	4b66      	ldr	r3, [pc, #408]	; (8007804 <ADJ_HandleMotor+0x268>)
 800766c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff f91e 	bl	80068b0 <__aeabi_f2iz>
 8007674:	4603      	mov	r3, r0
 8007676:	4423      	add	r3, r4
 8007678:	4a62      	ldr	r2, [pc, #392]	; (8007804 <ADJ_HandleMotor+0x268>)
 800767a:	6493      	str	r3, [r2, #72]	; 0x48
 800767c:	e00e      	b.n	800769c <ADJ_HandleMotor+0x100>
	  }
	}
	else if (ADJ_Motor.SpeedControl)
 800767e:	4b61      	ldr	r3, [pc, #388]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007680:	789b      	ldrb	r3, [r3, #2]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <ADJ_HandleMotor+0x100>
	{
		ADJ_Motor.Control = ADJ_Motor.Control + (int32_t) ADJ_Motor.SpeedPID;
 8007686:	4b5f      	ldr	r3, [pc, #380]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007688:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800768a:	4b5e      	ldr	r3, [pc, #376]	; (8007804 <ADJ_HandleMotor+0x268>)
 800768c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff f90e 	bl	80068b0 <__aeabi_f2iz>
 8007694:	4603      	mov	r3, r0
 8007696:	4423      	add	r3, r4
 8007698:	4a5a      	ldr	r2, [pc, #360]	; (8007804 <ADJ_HandleMotor+0x268>)
 800769a:	6493      	str	r3, [r2, #72]	; 0x48
	}
	if (ADJ_Motor.Control < - ADJ_MAXCONTROL)
 800769c:	4b59      	ldr	r3, [pc, #356]	; (8007804 <ADJ_HandleMotor+0x268>)
 800769e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a0:	4a59      	ldr	r2, [pc, #356]	; (8007808 <ADJ_HandleMotor+0x26c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	da02      	bge.n	80076ac <ADJ_HandleMotor+0x110>
	{
		ADJ_Motor.Control = - ADJ_MAXCONTROL ;
 80076a6:	4b57      	ldr	r3, [pc, #348]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076a8:	4a57      	ldr	r2, [pc, #348]	; (8007808 <ADJ_HandleMotor+0x26c>)
 80076aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	if (ADJ_Motor.Control > ADJ_MAXCONTROL)
 80076ac:	4b55      	ldr	r3, [pc, #340]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80076b4:	4293      	cmp	r3, r2
 80076b6:	dd03      	ble.n	80076c0 <ADJ_HandleMotor+0x124>
	{
		ADJ_Motor.Control = ADJ_MAXCONTROL;
 80076b8:	4b52      	ldr	r3, [pc, #328]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80076be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	//Handle motor stalling
	if ((ADJ_Motor.Status==sACTIVE) && (abs(ADJ_Motor.Control) > 5000) && (ADJ_Motor.GetSpeed == 0) && (ADJ_Motor.PositionDelta != 0) && (ADJ.Status == sHOME)) //Motor is controlled > 75%, but not turning or encoder not detecting any pulses
 80076c0:	4b50      	ldr	r3, [pc, #320]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d12d      	bne.n	8007724 <ADJ_HandleMotor+0x188>
 80076c8:	4b4e      	ldr	r3, [pc, #312]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bfb8      	it	lt
 80076d0:	425b      	neglt	r3, r3
 80076d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	dd24      	ble.n	8007724 <ADJ_HandleMotor+0x188>
 80076da:	4b4a      	ldr	r3, [pc, #296]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d120      	bne.n	8007724 <ADJ_HandleMotor+0x188>
 80076e2:	4b48      	ldr	r3, [pc, #288]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d01c      	beq.n	8007724 <ADJ_HandleMotor+0x188>
 80076ea:	4b48      	ldr	r3, [pc, #288]	; (800780c <ADJ_HandleMotor+0x270>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b16      	cmp	r3, #22
 80076f0:	d118      	bne.n	8007724 <ADJ_HandleMotor+0x188>
	{
		ADJ_Motor.TimeOut++;
 80076f2:	4b44      	ldr	r3, [pc, #272]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	3301      	adds	r3, #1
 80076f8:	4a42      	ldr	r2, [pc, #264]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076fa:	6093      	str	r3, [r2, #8]
		if (ADJ_Motor.TimeOut > ADJ_TIMEOUT)
 80076fc:	4b41      	ldr	r3, [pc, #260]	; (8007804 <ADJ_HandleMotor+0x268>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f241 3288 	movw	r2, #5000	; 0x1388
 8007704:	4293      	cmp	r3, r2
 8007706:	d93e      	bls.n	8007786 <ADJ_HandleMotor+0x1ea>
		{
			ADJ_Motor.TimeOut = 0;
 8007708:	4b3e      	ldr	r3, [pc, #248]	; (8007804 <ADJ_HandleMotor+0x268>)
 800770a:	2200      	movs	r2, #0
 800770c:	609a      	str	r2, [r3, #8]
			ADJ_ErrorNumber = 13001;
 800770e:	4b40      	ldr	r3, [pc, #256]	; (8007810 <ADJ_HandleMotor+0x274>)
 8007710:	f243 22c9 	movw	r2, #13001	; 0x32c9
 8007714:	801a      	strh	r2, [r3, #0]
			ADJ_Motor.Status = sINACTIVE;
 8007716:	4b3b      	ldr	r3, [pc, #236]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007718:	2204      	movs	r2, #4
 800771a:	701a      	strb	r2, [r3, #0]
			ADJ.Status = sUNITERROR;
 800771c:	4b3b      	ldr	r3, [pc, #236]	; (800780c <ADJ_HandleMotor+0x270>)
 800771e:	2214      	movs	r2, #20
 8007720:	701a      	strb	r2, [r3, #0]
		if (ADJ_Motor.TimeOut > ADJ_TIMEOUT)
 8007722:	e030      	b.n	8007786 <ADJ_HandleMotor+0x1ea>
		}
	}
	else if ((ADJ_Motor.Status==sACTIVE) && (abs(ADJ_Motor.Control) > 5000) && (ADJ_Motor.GetSpeed == 0) && (ADJ_Motor.PositionDelta != 0)) //Motor is controlled > 75%, but not turning or encoder not detecting any pulses
 8007724:	4b37      	ldr	r3, [pc, #220]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b03      	cmp	r3, #3
 800772a:	d129      	bne.n	8007780 <ADJ_HandleMotor+0x1e4>
 800772c:	4b35      	ldr	r3, [pc, #212]	; (8007804 <ADJ_HandleMotor+0x268>)
 800772e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007730:	2b00      	cmp	r3, #0
 8007732:	bfb8      	it	lt
 8007734:	425b      	neglt	r3, r3
 8007736:	f241 3288 	movw	r2, #5000	; 0x1388
 800773a:	4293      	cmp	r3, r2
 800773c:	dd20      	ble.n	8007780 <ADJ_HandleMotor+0x1e4>
 800773e:	4b31      	ldr	r3, [pc, #196]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d11c      	bne.n	8007780 <ADJ_HandleMotor+0x1e4>
 8007746:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d018      	beq.n	8007780 <ADJ_HandleMotor+0x1e4>
	{
		ADJ_Motor.TimeOut++;
 800774e:	4b2d      	ldr	r3, [pc, #180]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	3301      	adds	r3, #1
 8007754:	4a2b      	ldr	r2, [pc, #172]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007756:	6093      	str	r3, [r2, #8]
		if (ADJ_Motor.TimeOut > ADJ_TIMEOUTNORMAL)
 8007758:	4b2a      	ldr	r3, [pc, #168]	; (8007804 <ADJ_HandleMotor+0x268>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007760:	4293      	cmp	r3, r2
 8007762:	d910      	bls.n	8007786 <ADJ_HandleMotor+0x1ea>
		{
			ADJ_Motor.TimeOut = 0;
 8007764:	4b27      	ldr	r3, [pc, #156]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007766:	2200      	movs	r2, #0
 8007768:	609a      	str	r2, [r3, #8]
			ADJ_ErrorNumber = 13001;
 800776a:	4b29      	ldr	r3, [pc, #164]	; (8007810 <ADJ_HandleMotor+0x274>)
 800776c:	f243 22c9 	movw	r2, #13001	; 0x32c9
 8007770:	801a      	strh	r2, [r3, #0]
			ADJ_Motor.Status = sINACTIVE;
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007774:	2204      	movs	r2, #4
 8007776:	701a      	strb	r2, [r3, #0]
			ADJ.Status = sUNITERROR;
 8007778:	4b24      	ldr	r3, [pc, #144]	; (800780c <ADJ_HandleMotor+0x270>)
 800777a:	2214      	movs	r2, #20
 800777c:	701a      	strb	r2, [r3, #0]
		if (ADJ_Motor.TimeOut > ADJ_TIMEOUTNORMAL)
 800777e:	e002      	b.n	8007786 <ADJ_HandleMotor+0x1ea>
		}
	}
	else
	{
		ADJ_Motor.TimeOut = 0;
 8007780:	4b20      	ldr	r3, [pc, #128]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007782:	2200      	movs	r2, #0
 8007784:	609a      	str	r2, [r3, #8]
	}
    if (ADJ_Motor.Status==sINACTIVE)
 8007786:	4b1f      	ldr	r3, [pc, #124]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b04      	cmp	r3, #4
 800778c:	d142      	bne.n	8007814 <ADJ_HandleMotor+0x278>
	{
		ADJ_SetPWM(CW,0);
 800778e:	2100      	movs	r1, #0
 8007790:	2000      	movs	r0, #0
 8007792:	f000 f86d 	bl	8007870 <ADJ_SetPWM>
		ADJ_Motor.Status = sINACTIVE;
 8007796:	4b1b      	ldr	r3, [pc, #108]	; (8007804 <ADJ_HandleMotor+0x268>)
 8007798:	2204      	movs	r2, #4
 800779a:	701a      	strb	r2, [r3, #0]
		ADJ_Motor.ErrorP = 0;
 800779c:	4b19      	ldr	r3, [pc, #100]	; (8007804 <ADJ_HandleMotor+0x268>)
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	651a      	str	r2, [r3, #80]	; 0x50
		ADJ_Motor.ErrorPOld = 0;
 80077a4:	4b17      	ldr	r3, [pc, #92]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	64da      	str	r2, [r3, #76]	; 0x4c
		ADJ_Motor.ErrorD = 0;
 80077ac:	4b15      	ldr	r3, [pc, #84]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	659a      	str	r2, [r3, #88]	; 0x58
		ADJ_Motor.ErrorI = 0;
 80077b4:	4b13      	ldr	r3, [pc, #76]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	655a      	str	r2, [r3, #84]	; 0x54
		ADJ_Motor.PID = 0;
 80077bc:	4b11      	ldr	r3, [pc, #68]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	65da      	str	r2, [r3, #92]	; 0x5c
		ADJ_Motor.SpeedErrorP = 0;
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	665a      	str	r2, [r3, #100]	; 0x64
		ADJ_Motor.SpeedErrorPOld = 0;
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	661a      	str	r2, [r3, #96]	; 0x60
		ADJ_Motor.SpeedErrorD = 0;
 80077d4:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	66da      	str	r2, [r3, #108]	; 0x6c
		ADJ_Motor.SpeedErrorI = 0;
 80077dc:	4b09      	ldr	r3, [pc, #36]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	669a      	str	r2, [r3, #104]	; 0x68
		ADJ_Motor.SpeedPID = 0;
 80077e4:	4b07      	ldr	r3, [pc, #28]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	671a      	str	r2, [r3, #112]	; 0x70
		ADJ_Motor.Control = 0;
 80077ec:	4b05      	ldr	r3, [pc, #20]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	649a      	str	r2, [r3, #72]	; 0x48
		ADJ_Motor.SetSpeed = 0;
 80077f2:	4b04      	ldr	r3, [pc, #16]	; (8007804 <ADJ_HandleMotor+0x268>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	60da      	str	r2, [r3, #12]
 80077f8:	e032      	b.n	8007860 <ADJ_HandleMotor+0x2c4>
 80077fa:	bf00      	nop
 80077fc:	2000096f 	.word	0x2000096f
 8007800:	40000800 	.word	0x40000800
 8007804:	20000140 	.word	0x20000140
 8007808:	ffffd8f0 	.word	0xffffd8f0
 800780c:	2000012c 	.word	0x2000012c
 8007810:	200001b8 	.word	0x200001b8
	}
	else if (ADJ_Motor.Control < 0)
 8007814:	4b14      	ldr	r3, [pc, #80]	; (8007868 <ADJ_HandleMotor+0x2cc>)
 8007816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007818:	2b00      	cmp	r3, #0
 800781a:	da0e      	bge.n	800783a <ADJ_HandleMotor+0x29e>
	{
		ADJ_SetPWM(CW, - ADJ_Motor.Control/100);
 800781c:	4b12      	ldr	r3, [pc, #72]	; (8007868 <ADJ_HandleMotor+0x2cc>)
 800781e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007820:	425b      	negs	r3, r3
 8007822:	4a12      	ldr	r2, [pc, #72]	; (800786c <ADJ_HandleMotor+0x2d0>)
 8007824:	fb82 1203 	smull	r1, r2, r2, r3
 8007828:	1152      	asrs	r2, r2, #5
 800782a:	17db      	asrs	r3, r3, #31
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	b2db      	uxtb	r3, r3
 8007830:	4619      	mov	r1, r3
 8007832:	2000      	movs	r0, #0
 8007834:	f000 f81c 	bl	8007870 <ADJ_SetPWM>
 8007838:	e012      	b.n	8007860 <ADJ_HandleMotor+0x2c4>
	}
	else if (ADJ_Motor.Control > 0)
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <ADJ_HandleMotor+0x2cc>)
 800783c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783e:	2b00      	cmp	r3, #0
 8007840:	dd0e      	ble.n	8007860 <ADJ_HandleMotor+0x2c4>
	{
		ADJ_SetPWM(CCW, ADJ_Motor.Control/100);
 8007842:	4b09      	ldr	r3, [pc, #36]	; (8007868 <ADJ_HandleMotor+0x2cc>)
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	4a09      	ldr	r2, [pc, #36]	; (800786c <ADJ_HandleMotor+0x2d0>)
 8007848:	fb82 1203 	smull	r1, r2, r2, r3
 800784c:	1152      	asrs	r2, r2, #5
 800784e:	17db      	asrs	r3, r3, #31
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	b2db      	uxtb	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	2001      	movs	r0, #1
 8007858:	f000 f80a 	bl	8007870 <ADJ_SetPWM>
 800785c:	e000      	b.n	8007860 <ADJ_HandleMotor+0x2c4>
	if (DUMMYMODEGRINDER) return;
 800785e:	bf00      	nop
	}
}
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	bd90      	pop	{r4, r7, pc}
 8007866:	bf00      	nop
 8007868:	20000140 	.word	0x20000140
 800786c:	51eb851f 	.word	0x51eb851f

08007870 <ADJ_SetPWM>:
//-----------------------------------------------------------------------------
//! \brief      Controls the adjust motor direction and speed
//! \details    Sets the PWM with the calculated speed
//! \param      None
void ADJ_SetPWM (uint8_t newDirection, uint8_t newSpeed)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	460a      	mov	r2, r1
 800787a:	71fb      	strb	r3, [r7, #7]
 800787c:	4613      	mov	r3, r2
 800787e:	71bb      	strb	r3, [r7, #6]
  switch (newDirection)
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <ADJ_SetPWM+0x2c>
 8007886:	2b01      	cmp	r3, #1
 8007888:	d111      	bne.n	80078ae <ADJ_SetPWM+0x3e>
  {
    case CCW:
    {
      ADJ_CCW() = 100 - newSpeed;
 800788a:	79bb      	ldrb	r3, [r7, #6]
 800788c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8007890:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <ADJ_SetPWM+0x58>)
 8007892:	635a      	str	r2, [r3, #52]	; 0x34
      ADJ_CW()=100;
 8007894:	4b0d      	ldr	r3, [pc, #52]	; (80078cc <ADJ_SetPWM+0x5c>)
 8007896:	2264      	movs	r2, #100	; 0x64
 8007898:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 800789a:	e00f      	b.n	80078bc <ADJ_SetPWM+0x4c>
    }
    case CW:
    {
      ADJ_CCW() = 100;
 800789c:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <ADJ_SetPWM+0x58>)
 800789e:	2264      	movs	r2, #100	; 0x64
 80078a0:	635a      	str	r2, [r3, #52]	; 0x34
      ADJ_CW() = 100 - newSpeed;
 80078a2:	79bb      	ldrb	r3, [r7, #6]
 80078a4:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80078a8:	4b08      	ldr	r3, [pc, #32]	; (80078cc <ADJ_SetPWM+0x5c>)
 80078aa:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 80078ac:	e006      	b.n	80078bc <ADJ_SetPWM+0x4c>
    }
    default:
    {
      ADJ_CW() = 100;
 80078ae:	4b07      	ldr	r3, [pc, #28]	; (80078cc <ADJ_SetPWM+0x5c>)
 80078b0:	2264      	movs	r2, #100	; 0x64
 80078b2:	635a      	str	r2, [r3, #52]	; 0x34
      ADJ_CCW()=100;
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <ADJ_SetPWM+0x58>)
 80078b6:	2264      	movs	r2, #100	; 0x64
 80078b8:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 80078ba:	bf00      	nop
    }
  }
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40010c00 	.word	0x40010c00
 80078cc:	40011000 	.word	0x40011000

080078d0 <HAL_ADC_ConvCpltCallback>:
//-----------------------------------------------------------------------------
//! \brief      ADC complete conversion interrupt
//! \details    Convert ADC values to voltages (mV)
//! \param      None
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

	//WAT_SetBuffer();
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr
	...

080078e4 <ANA_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the analog module
//! \details    Starts DMA and assign values
//! \param      None
void ANA_Init(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
	vrefint_cal= *((uint16_t*)VREFINT_CAL_ADDR_CMSIS); // read VREFINT_CAL_ADDR memory location
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <ANA_Init+0x1c>)
 80078ea:	881a      	ldrh	r2, [r3, #0]
 80078ec:	4b05      	ldr	r3, [pc, #20]	; (8007904 <ANA_Init+0x20>)
 80078ee:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc,(uint32_t*) &ADC_Converted_Values,NROFANALOGSENSORS);
 80078f0:	2206      	movs	r2, #6
 80078f2:	4905      	ldr	r1, [pc, #20]	; (8007908 <ANA_Init+0x24>)
 80078f4:	4805      	ldr	r0, [pc, #20]	; (800790c <ANA_Init+0x28>)
 80078f6:	f007 fcff 	bl	800f2f8 <HAL_ADC_Start_DMA>
}
 80078fa:	bf00      	nop
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	1ff800f8 	.word	0x1ff800f8
 8007904:	200001ba 	.word	0x200001ba
 8007908:	200001bc 	.word	0x200001bc
 800790c:	20000094 	.word	0x20000094

08007910 <ANA_GetSensorValue>:
//! 			ADC_BURRS = Burr temperature,
//!				ADC_MOTOR = Motor temperature
//!				ADC_VINTREF = Internal reference voltage
//! \param[out] float value
float ANA_GetSensorValue(enuSensor newSensor)
{
 8007910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007914:	b098      	sub	sp, #96	; 0x60
 8007916:	af00      	add	r7, sp, #0
 8007918:	4603      	mov	r3, r0
 800791a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	float ADCValue = (float) (ADC_Converted_Values[(uint8_t) newSensor]);
 800791e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007922:	4b93      	ldr	r3, [pc, #588]	; (8007b70 <ANA_GetSensorValue+0x260>)
 8007924:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fda3 	bl	8006474 <__aeabi_ui2f>
 800792e:	4603      	mov	r3, r0
 8007930:	657b      	str	r3, [r7, #84]	; 0x54
	float ReturnValue = 0;
 8007932:	f04f 0300 	mov.w	r3, #0
 8007936:	65fb      	str	r3, [r7, #92]	; 0x5c
	float NTCRes, fTemp1, fTemp2;
	float fLog;
	float NTCB = 3740.0;
 8007938:	4b8e      	ldr	r3, [pc, #568]	; (8007b74 <ANA_GetSensorValue+0x264>)
 800793a:	653b      	str	r3, [r7, #80]	; 0x50
	const float SerialRes = 10000.0;
 800793c:	4b8e      	ldr	r3, [pc, #568]	; (8007b78 <ANA_GetSensorValue+0x268>)
 800793e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const float R25 = 47000.0;
 8007940:	4b8e      	ldr	r3, [pc, #568]	; (8007b7c <ANA_GetSensorValue+0x26c>)
 8007942:	64bb      	str	r3, [r7, #72]	; 0x48
	uint64_t Temp;
	for (uint8_t i = 0; i< NROFANALOGSENSORS; i++)
 8007944:	2300      	movs	r3, #0
 8007946:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800794a:	e083      	b.n	8007a54 <ANA_GetSensorValue+0x144>
	{
		Temp = (uint64_t)3000 * (uint64_t)vrefint_cal * (uint64_t)ADC_Converted_Values[i];
 800794c:	4b8c      	ldr	r3, [pc, #560]	; (8007b80 <ANA_GetSensorValue+0x270>)
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	2200      	movs	r2, #0
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	617a      	str	r2, [r7, #20]
 8007958:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800795c:	4b84      	ldr	r3, [pc, #528]	; (8007b70 <ANA_GetSensorValue+0x260>)
 800795e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007962:	b29b      	uxth	r3, r3
 8007964:	2200      	movs	r2, #0
 8007966:	623b      	str	r3, [r7, #32]
 8007968:	627a      	str	r2, [r7, #36]	; 0x24
 800796a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800796e:	460b      	mov	r3, r1
 8007970:	6a3a      	ldr	r2, [r7, #32]
 8007972:	fb02 f203 	mul.w	r2, r2, r3
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	4684      	mov	ip, r0
 800797a:	fb0c f303 	mul.w	r3, ip, r3
 800797e:	4413      	add	r3, r2
 8007980:	4602      	mov	r2, r0
 8007982:	6a39      	ldr	r1, [r7, #32]
 8007984:	fba2 ab01 	umull	sl, fp, r2, r1
 8007988:	445b      	add	r3, fp
 800798a:	469b      	mov	fp, r3
 800798c:	4652      	mov	r2, sl
 800798e:	465b      	mov	r3, fp
 8007990:	1891      	adds	r1, r2, r2
 8007992:	6039      	str	r1, [r7, #0]
 8007994:	415b      	adcs	r3, r3
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	eb12 040a 	adds.w	r4, r2, sl
 80079a0:	eb43 050b 	adc.w	r5, r3, fp
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	f04f 0300 	mov.w	r3, #0
 80079ac:	012b      	lsls	r3, r5, #4
 80079ae:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80079b2:	0122      	lsls	r2, r4, #4
 80079b4:	4614      	mov	r4, r2
 80079b6:	461d      	mov	r5, r3
 80079b8:	ebb4 080a 	subs.w	r8, r4, sl
 80079bc:	eb65 090b 	sbc.w	r9, r5, fp
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079d4:	4690      	mov	r8, r2
 80079d6:	4699      	mov	r9, r3
 80079d8:	ebb8 030a 	subs.w	r3, r8, sl
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	eb69 030b 	sbc.w	r3, r9, fp
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	69f9      	ldr	r1, [r7, #28]
 80079ee:	00cb      	lsls	r3, r1, #3
 80079f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80079f4:	4684      	mov	ip, r0
 80079f6:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80079fa:	4601      	mov	r1, r0
 80079fc:	00ca      	lsls	r2, r1, #3
 80079fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007a02:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Temp = Temp / (uint64_t) ADC_Converted_Values[NROFANALOGSENSORS - 1];
 8007a06:	4b5a      	ldr	r3, [pc, #360]	; (8007b70 <ANA_GetSensorValue+0x260>)
 8007a08:	895b      	ldrh	r3, [r3, #10]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	60fa      	str	r2, [r7, #12]
 8007a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a1a:	f7fe ff8f 	bl	800693c <__aeabi_uldivmod>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		Temp = Temp / 4095;
 8007a26:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007a2a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007a2e:	f04f 0300 	mov.w	r3, #0
 8007a32:	f7fe ff83 	bl	800693c <__aeabi_uldivmod>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		ADC_Voltage_Values[i] = (uint16_t) Temp;
 8007a3e:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
 8007a42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a44:	4a4f      	ldr	r2, [pc, #316]	; (8007b84 <ANA_GetSensorValue+0x274>)
 8007a46:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	for (uint8_t i = 0; i< NROFANALOGSENSORS; i++)
 8007a4a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007a4e:	3301      	adds	r3, #1
 8007a50:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8007a54:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	f67f af77 	bls.w	800794c <ANA_GetSensorValue+0x3c>
	}
	switch (newSensor)
 8007a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d872      	bhi.n	8007b4c <ANA_GetSensorValue+0x23c>
	{
		case ADC_BURRS:
		case ADC_MOTOR:
		{
			if (DUMMYMODEGRINDER)
 8007a66:	4b48      	ldr	r3, [pc, #288]	; (8007b88 <ANA_GetSensorValue+0x278>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <ANA_GetSensorValue+0x164>
			{
				ReturnValue = 250;
 8007a6e:	4b47      	ldr	r3, [pc, #284]	; (8007b8c <ANA_GetSensorValue+0x27c>)
 8007a70:	65fb      	str	r3, [r7, #92]	; 0x5c
					ReturnValue = (1.0f/(fTemp1+fTemp2));
					ReturnValue -= 273.15f;
					ReturnValue *= 10.0f; //x 0.1 °C
				}
			}
			break;
 8007a72:	e076      	b.n	8007b62 <ANA_GetSensorValue+0x252>
				if (ADCValue > NTC_DISCONNECTED_VALUE)
 8007a74:	4946      	ldr	r1, [pc, #280]	; (8007b90 <ANA_GetSensorValue+0x280>)
 8007a76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a78:	f7fe ff10 	bl	800689c <__aeabi_fcmpgt>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <ANA_GetSensorValue+0x178>
					ReturnValue = DISCONNECTED;
 8007a82:	4b44      	ldr	r3, [pc, #272]	; (8007b94 <ANA_GetSensorValue+0x284>)
 8007a84:	65fb      	str	r3, [r7, #92]	; 0x5c
			break;
 8007a86:	e06c      	b.n	8007b62 <ANA_GetSensorValue+0x252>
				else if (ADCValue < NTC_SHORTED_VALUE)
 8007a88:	4943      	ldr	r1, [pc, #268]	; (8007b98 <ANA_GetSensorValue+0x288>)
 8007a8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a8c:	f7fe fee8 	bl	8006860 <__aeabi_fcmplt>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <ANA_GetSensorValue+0x18c>
					ReturnValue = SHORTED;
 8007a96:	4b41      	ldr	r3, [pc, #260]	; (8007b9c <ANA_GetSensorValue+0x28c>)
 8007a98:	65fb      	str	r3, [r7, #92]	; 0x5c
			break;
 8007a9a:	e062      	b.n	8007b62 <ANA_GetSensorValue+0x252>
					NTCRes = ADC_Voltage_Values[newSensor] * SerialRes / (3300 - ADC_Voltage_Values[newSensor]);
 8007a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aa0:	4a38      	ldr	r2, [pc, #224]	; (8007b84 <ANA_GetSensorValue+0x274>)
 8007aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fce8 	bl	800647c <__aeabi_i2f>
 8007aac:	4603      	mov	r3, r0
 8007aae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fd37 	bl	8006524 <__aeabi_fmul>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461c      	mov	r4, r3
 8007aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007abe:	4a31      	ldr	r2, [pc, #196]	; (8007b84 <ANA_GetSensorValue+0x274>)
 8007ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac4:	f5c3 634e 	rsb	r3, r3, #3296	; 0xce0
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe fcd6 	bl	800647c <__aeabi_i2f>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f7fe fdd9 	bl	800668c <__aeabi_fdiv>
 8007ada:	4603      	mov	r3, r0
 8007adc:	647b      	str	r3, [r7, #68]	; 0x44
					fLog = log(NTCRes/R25);
 8007ade:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ae0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007ae2:	f7fe fdd3 	bl	800668c <__aeabi_fdiv>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe f8b5 	bl	8005c58 <__aeabi_f2d>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4610      	mov	r0, r2
 8007af4:	4619      	mov	r1, r3
 8007af6:	f00c fba7 	bl	8014248 <log>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	f7fe fbb1 	bl	8006268 <__aeabi_d2f>
 8007b06:	4603      	mov	r3, r0
 8007b08:	643b      	str	r3, [r7, #64]	; 0x40
					fTemp1 = (fLog/NTCB);
 8007b0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007b0e:	f7fe fdbd 	bl	800668c <__aeabi_fdiv>
 8007b12:	4603      	mov	r3, r0
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
					fTemp2 = 1/298.15;
 8007b16:	4b22      	ldr	r3, [pc, #136]	; (8007ba0 <ANA_GetSensorValue+0x290>)
 8007b18:	63bb      	str	r3, [r7, #56]	; 0x38
					ReturnValue = (1.0f/(fTemp1+fTemp2));
 8007b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b1e:	f7fe fbf9 	bl	8006314 <__addsf3>
 8007b22:	4603      	mov	r3, r0
 8007b24:	4619      	mov	r1, r3
 8007b26:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007b2a:	f7fe fdaf 	bl	800668c <__aeabi_fdiv>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	65fb      	str	r3, [r7, #92]	; 0x5c
					ReturnValue -= 273.15f;
 8007b32:	491c      	ldr	r1, [pc, #112]	; (8007ba4 <ANA_GetSensorValue+0x294>)
 8007b34:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007b36:	f7fe fbeb 	bl	8006310 <__aeabi_fsub>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
					ReturnValue *= 10.0f; //x 0.1 °C
 8007b3e:	491a      	ldr	r1, [pc, #104]	; (8007ba8 <ANA_GetSensorValue+0x298>)
 8007b40:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007b42:	f7fe fcef 	bl	8006524 <__aeabi_fmul>
 8007b46:	4603      	mov	r3, r0
 8007b48:	65fb      	str	r3, [r7, #92]	; 0x5c
			break;
 8007b4a:	e00a      	b.n	8007b62 <ANA_GetSensorValue+0x252>
		}
		default:
		{
			ReturnValue = ADC_Voltage_Values[newSensor];//ADC_Voltage_Values[newSensor];
 8007b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b50:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <ANA_GetSensorValue+0x274>)
 8007b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fc8c 	bl	8006474 <__aeabi_ui2f>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
			break;
 8007b60:	bf00      	nop
		}
	}
	return ReturnValue;
 8007b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3760      	adds	r7, #96	; 0x60
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b6e:	bf00      	nop
 8007b70:	200001bc 	.word	0x200001bc
 8007b74:	4569c000 	.word	0x4569c000
 8007b78:	461c4000 	.word	0x461c4000
 8007b7c:	47379800 	.word	0x47379800
 8007b80:	200001ba 	.word	0x200001ba
 8007b84:	200001c8 	.word	0x200001c8
 8007b88:	2000096f 	.word	0x2000096f
 8007b8c:	437a0000 	.word	0x437a0000
 8007b90:	4573c000 	.word	0x4573c000
 8007b94:	c3889333 	.word	0xc3889333
 8007b98:	42c80000 	.word	0x42c80000
 8007b9c:	449604cd 	.word	0x449604cd
 8007ba0:	3b5bcf0f 	.word	0x3b5bcf0f
 8007ba4:	43889333 	.word	0x43889333
 8007ba8:	41200000 	.word	0x41200000

08007bac <clrc663_read_reg>:
/** @file */

// ---------------------------------------------------------------------------
// Register interaction functions.
// ---------------------------------------------------------------------------
uint8_t clrc663_read_reg(uint8_t reg) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t instruction_tx[2] = { (reg << 1) | 0x01, 0 };
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	b25b      	sxtb	r3, r3
 8007bbc:	f043 0301 	orr.w	r3, r3, #1
 8007bc0:	b25b      	sxtb	r3, r3
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	733b      	strb	r3, [r7, #12]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	737b      	strb	r3, [r7, #13]
	uint8_t instruction_rx[2] = { 0 };
 8007bca:	2300      	movs	r3, #0
 8007bcc:	813b      	strh	r3, [r7, #8]
	clrc663_SPI_select();
 8007bce:	f001 fb25 	bl	800921c <clrc663_SPI_select>
	clrc663_SPI_transfer(instruction_tx, instruction_rx, 2);
 8007bd2:	f107 0108 	add.w	r1, r7, #8
 8007bd6:	f107 030c 	add.w	r3, r7, #12
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 fb07 	bl	80091f0 <clrc663_SPI_transfer>
	clrc663_SPI_unselect();
 8007be2:	f001 fb27 	bl	8009234 <clrc663_SPI_unselect>
	return instruction_rx[1];  // the second byte the returned value.
 8007be6:	7a7b      	ldrb	r3, [r7, #9]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <clrc663_write_reg>:

void clrc663_write_reg(uint8_t reg, uint8_t value) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	460a      	mov	r2, r1
 8007bfa:	71fb      	strb	r3, [r7, #7]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	71bb      	strb	r3, [r7, #6]
	uint8_t instruction_tx[2] = { (reg << 1) | 0x00, value };
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	733b      	strb	r3, [r7, #12]
 8007c08:	79bb      	ldrb	r3, [r7, #6]
 8007c0a:	737b      	strb	r3, [r7, #13]
	uint8_t discard[2] = { 0 };
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	813b      	strh	r3, [r7, #8]
	clrc663_SPI_select();
 8007c10:	f001 fb04 	bl	800921c <clrc663_SPI_select>
	clrc663_SPI_transfer(instruction_tx, discard, 2);
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	f107 030c 	add.w	r3, r7, #12
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 fae6 	bl	80091f0 <clrc663_SPI_transfer>
	clrc663_SPI_unselect();
 8007c24:	f001 fb06 	bl	8009234 <clrc663_SPI_unselect>
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <clrc663_write_fifo>:
	clrc663_SPI_select();
	clrc663_SPI_transfer(instruction_tx, discard, len + 1);
	clrc663_SPI_unselect();
}

void clrc663_write_fifo(const uint8_t *data, uint16_t len) {
 8007c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c34:	b087      	sub	sp, #28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	807b      	strh	r3, [r7, #2]
 8007c3e:	466b      	mov	r3, sp
 8007c40:	461e      	mov	r6, r3
	uint8_t write_instruction[] = { (CLRC663_REG_FIFODATA << 1) | 0 };
 8007c42:	230a      	movs	r3, #10
 8007c44:	733b      	strb	r3, [r7, #12]
	uint8_t discard[len + 1];
 8007c46:	887b      	ldrh	r3, [r7, #2]
 8007c48:	1c59      	adds	r1, r3, #1
 8007c4a:	1e4b      	subs	r3, r1, #1
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	460a      	mov	r2, r1
 8007c50:	2300      	movs	r3, #0
 8007c52:	4690      	mov	r8, r2
 8007c54:	4699      	mov	r9, r3
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c6a:	460a      	mov	r2, r1
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4614      	mov	r4, r2
 8007c70:	461d      	mov	r5, r3
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	00eb      	lsls	r3, r5, #3
 8007c7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c80:	00e2      	lsls	r2, r4, #3
 8007c82:	460b      	mov	r3, r1
 8007c84:	3307      	adds	r3, #7
 8007c86:	08db      	lsrs	r3, r3, #3
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	ebad 0d03 	sub.w	sp, sp, r3
 8007c8e:	466b      	mov	r3, sp
 8007c90:	3300      	adds	r3, #0
 8007c92:	613b      	str	r3, [r7, #16]
	clrc663_SPI_select();
 8007c94:	f001 fac2 	bl	800921c <clrc663_SPI_select>
	clrc663_SPI_transfer(write_instruction, discard, 1);
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	6939      	ldr	r1, [r7, #16]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 faa5 	bl	80091f0 <clrc663_SPI_transfer>
	clrc663_SPI_transfer(data, discard, len);
 8007ca6:	887b      	ldrh	r3, [r7, #2]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6939      	ldr	r1, [r7, #16]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 fa9f 	bl	80091f0 <clrc663_SPI_transfer>
	clrc663_SPI_unselect();
 8007cb2:	f001 fabf 	bl	8009234 <clrc663_SPI_unselect>
 8007cb6:	46b5      	mov	sp, r6
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007cc2 <clrc663_read_fifo>:

void clrc663_read_fifo(uint8_t *rx, uint16_t len) {
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b086      	sub	sp, #24
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	807b      	strh	r3, [r7, #2]
	uint8_t read_instruction[] = { (CLRC663_REG_FIFODATA << 1) | 0x01,
 8007cce:	f640 330b 	movw	r3, #2827	; 0xb0b
 8007cd2:	82bb      	strh	r3, [r7, #20]
			(CLRC663_REG_FIFODATA << 1) | 0x01 };
	uint8_t read_finish[] = { 0 };
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	743b      	strb	r3, [r7, #16]
	uint8_t discard[2];
	clrc663_SPI_select();
 8007cd8:	f001 faa0 	bl	800921c <clrc663_SPI_select>
	clrc663_SPI_transfer(read_instruction, discard, 1);
 8007cdc:	f107 010c 	add.w	r1, r7, #12
 8007ce0:	f107 0314 	add.w	r3, r7, #20
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 fa82 	bl	80091f0 <clrc663_SPI_transfer>
	uint16_t i;
	for (i = 0; i < (len - 1); i++) {
 8007cec:	2300      	movs	r3, #0
 8007cee:	82fb      	strh	r3, [r7, #22]
 8007cf0:	e00b      	b.n	8007d0a <clrc663_read_fifo+0x48>
		clrc663_SPI_transfer(read_instruction, rx++, 1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	f107 0014 	add.w	r0, r7, #20
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4619      	mov	r1, r3
 8007d00:	f001 fa76 	bl	80091f0 <clrc663_SPI_transfer>
	for (i = 0; i < (len - 1); i++) {
 8007d04:	8afb      	ldrh	r3, [r7, #22]
 8007d06:	3301      	adds	r3, #1
 8007d08:	82fb      	strh	r3, [r7, #22]
 8007d0a:	8afa      	ldrh	r2, [r7, #22]
 8007d0c:	887b      	ldrh	r3, [r7, #2]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	429a      	cmp	r2, r3
 8007d12:	dbee      	blt.n	8007cf2 <clrc663_read_fifo+0x30>
	}
	clrc663_SPI_transfer(read_finish, rx++, 1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	607a      	str	r2, [r7, #4]
 8007d1a:	f107 0010 	add.w	r0, r7, #16
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4619      	mov	r1, r3
 8007d22:	f001 fa65 	bl	80091f0 <clrc663_SPI_transfer>
	clrc663_SPI_unselect();
 8007d26:	f001 fa85 	bl	8009234 <clrc663_SPI_unselect>
}
 8007d2a:	bf00      	nop
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <clrc663_cmd_load_protocol>:
	clrc663_flush_fifo();
	clrc663_write_fifo(parameters, 4);
	clrc663_write_reg(CLRC663_REG_COMMAND, CLRC663_CMD_LOADREG);
}

void clrc663_cmd_load_protocol(uint8_t rx, uint8_t tx) {
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	4603      	mov	r3, r0
 8007d3a:	460a      	mov	r2, r1
 8007d3c:	71fb      	strb	r3, [r7, #7]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	71bb      	strb	r3, [r7, #6]
	uint8_t parameters[2] = { rx, tx };
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	733b      	strb	r3, [r7, #12]
 8007d46:	79bb      	ldrb	r3, [r7, #6]
 8007d48:	737b      	strb	r3, [r7, #13]
	clrc663_flush_fifo();
 8007d4a:	f000 f831 	bl	8007db0 <clrc663_flush_fifo>
	clrc663_write_fifo(parameters, 2);
 8007d4e:	f107 030c 	add.w	r3, r7, #12
 8007d52:	2102      	movs	r1, #2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff ff6b 	bl	8007c30 <clrc663_write_fifo>
	clrc663_write_reg(CLRC663_REG_COMMAND, CLRC663_CMD_LOADPROTOCOL);
 8007d5a:	210d      	movs	r1, #13
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	f7ff ff47 	bl	8007bf0 <clrc663_write_reg>
}
 8007d62:	bf00      	nop
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <clrc663_cmd_transceive>:

void clrc663_cmd_transceive(const uint8_t *data, uint16_t len) {
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	807b      	strh	r3, [r7, #2]
	clrc663_write_fifo(data, len);
 8007d76:	887b      	ldrh	r3, [r7, #2]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff ff58 	bl	8007c30 <clrc663_write_fifo>
	clrc663_write_reg(CLRC663_REG_COMMAND, CLRC663_CMD_TRANSCEIVE);
 8007d80:	2107      	movs	r1, #7
 8007d82:	2000      	movs	r0, #0
 8007d84:	f7ff ff34 	bl	8007bf0 <clrc663_write_reg>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <clrc663_cmd_idle>:

void clrc663_cmd_idle() {
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
	clrc663_write_reg(CLRC663_REG_COMMAND, CLRC663_CMD_IDLE);
 8007d94:	2100      	movs	r1, #0
 8007d96:	2000      	movs	r0, #0
 8007d98:	f7ff ff2a 	bl	8007bf0 <clrc663_write_reg>
}
 8007d9c:	bf00      	nop
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <clrc663_cmd_softreset>:
	clrc663_flush_fifo();
	clrc663_write_fifo(key, 6);
	clrc663_write_reg(CLRC663_REG_COMMAND, CLRC663_CMD_LOADKEY);
}

void clrc663_cmd_softreset() {
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
	clrc663_write_reg(CLRC663_REG_COMMAND, CLRC663_CMD_SOFTRESET);
 8007da4:	211f      	movs	r1, #31
 8007da6:	2000      	movs	r0, #0
 8007da8:	f7ff ff22 	bl	8007bf0 <clrc663_write_reg>
}
 8007dac:	bf00      	nop
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <clrc663_flush_fifo>:

// ---------------------------------------------------------------------------
// Utility functions.
// ---------------------------------------------------------------------------

void clrc663_flush_fifo() {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
	clrc663_write_reg(CLRC663_REG_FIFOCONTROL, 1 << 4);
 8007db4:	2110      	movs	r1, #16
 8007db6:	2002      	movs	r0, #2
 8007db8:	f7ff ff1a 	bl	8007bf0 <clrc663_write_reg>
}
 8007dbc:	bf00      	nop
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <clrc663_fifo_length>:

uint16_t clrc663_fifo_length() {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
	return clrc663_read_reg(CLRC663_REG_FIFOLENGTH);
 8007dc4:	2004      	movs	r0, #4
 8007dc6:	f7ff fef1 	bl	8007bac <clrc663_read_reg>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	b29b      	uxth	r3, r3
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <clrc663_clear_irq0>:

void clrc663_clear_irq0() {
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	af00      	add	r7, sp, #0
	clrc663_write_reg(CLRC663_REG_IRQ0, (uint8_t) ~(1 << 7));
 8007dd6:	217f      	movs	r1, #127	; 0x7f
 8007dd8:	2006      	movs	r0, #6
 8007dda:	f7ff ff09 	bl	8007bf0 <clrc663_write_reg>
}
 8007dde:	bf00      	nop
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <clrc663_clear_irq1>:
void clrc663_clear_irq1() {
 8007de2:	b580      	push	{r7, lr}
 8007de4:	af00      	add	r7, sp, #0
	clrc663_write_reg(CLRC663_REG_IRQ1, (uint8_t) ~(1 << 7));
 8007de6:	217f      	movs	r1, #127	; 0x7f
 8007de8:	2007      	movs	r0, #7
 8007dea:	f7ff ff01 	bl	8007bf0 <clrc663_write_reg>
}
 8007dee:	bf00      	nop
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <clrc663_irq0>:
uint8_t clrc663_irq0() {
 8007df2:	b580      	push	{r7, lr}
 8007df4:	af00      	add	r7, sp, #0
	return clrc663_read_reg(CLRC663_REG_IRQ0);
 8007df6:	2006      	movs	r0, #6
 8007df8:	f7ff fed8 	bl	8007bac <clrc663_read_reg>
 8007dfc:	4603      	mov	r3, r0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <clrc663_irq1>:
uint8_t clrc663_irq1() {
 8007e02:	b580      	push	{r7, lr}
 8007e04:	af00      	add	r7, sp, #0
	return clrc663_read_reg(CLRC663_REG_IRQ1);
 8007e06:	2007      	movs	r0, #7
 8007e08:	f7ff fed0 	bl	8007bac <clrc663_read_reg>
 8007e0c:	4603      	mov	r3, r0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <clrc663_timer_set_control>:
void clrc663_activate_timer(uint8_t timer, uint8_t active) {
	clrc663_write_reg(CLRC663_REG_TCONTROL,
			((active << timer) << 4) | (1 << timer));
}

void clrc663_timer_set_control(uint8_t timer, uint8_t value) {
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	4603      	mov	r3, r0
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	71fb      	strb	r3, [r7, #7]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	71bb      	strb	r3, [r7, #6]
	clrc663_write_reg(CLRC663_REG_T0CONTROL + (5 * timer), value);
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	461a      	mov	r2, r3
 8007e26:	0092      	lsls	r2, r2, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	330f      	adds	r3, #15
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	79ba      	ldrb	r2, [r7, #6]
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fedb 	bl	8007bf0 <clrc663_write_reg>
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <clrc663_timer_set_reload>:
void clrc663_timer_set_reload(uint8_t timer, uint16_t value) {
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	460a      	mov	r2, r1
 8007e4c:	71fb      	strb	r3, [r7, #7]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	80bb      	strh	r3, [r7, #4]
	clrc663_write_reg(CLRC663_REG_T0RELOADHI + (5 * timer), value >> 8);
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	461a      	mov	r2, r3
 8007e56:	0092      	lsls	r2, r2, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	3310      	adds	r3, #16
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	88bb      	ldrh	r3, [r7, #4]
 8007e62:	0a1b      	lsrs	r3, r3, #8
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7ff fec0 	bl	8007bf0 <clrc663_write_reg>
	clrc663_write_reg(CLRC663_REG_T0RELOADLO + (5 * timer), 0xFF);
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	461a      	mov	r2, r3
 8007e74:	0092      	lsls	r2, r2, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	3311      	adds	r3, #17
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	21ff      	movs	r1, #255	; 0xff
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff feb5 	bl	8007bf0 <clrc663_write_reg>
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <clrc663_timer_set_value>:
void clrc663_timer_set_value(uint8_t timer, uint16_t value) {
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	4603      	mov	r3, r0
 8007e96:	460a      	mov	r2, r1
 8007e98:	71fb      	strb	r3, [r7, #7]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	80bb      	strh	r3, [r7, #4]
	clrc663_write_reg(CLRC663_REG_T0COUNTERVALHI + (5 * timer), value >> 8);
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	0092      	lsls	r2, r2, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	3312      	adds	r3, #18
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	88bb      	ldrh	r3, [r7, #4]
 8007eae:	0a1b      	lsrs	r3, r3, #8
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7ff fe9a 	bl	8007bf0 <clrc663_write_reg>
	clrc663_write_reg(CLRC663_REG_T0COUNTERVALLO + (5 * timer), 0xFF);
 8007ebc:	79fb      	ldrb	r3, [r7, #7]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	0092      	lsls	r2, r2, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	3313      	adds	r3, #19
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	21ff      	movs	r1, #255	; 0xff
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fe8f 	bl	8007bf0 <clrc663_write_reg>
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <clrc663_iso14443a_REQA>:

// ---------------------------------------------------------------------------
// ISO 14443A
// ---------------------------------------------------------------------------

uint16_t clrc663_iso14443a_REQA() {
 8007eda:	b580      	push	{r7, lr}
 8007edc:	af00      	add	r7, sp, #0
	return clrc663_iso14443a_WUPA_REQA(CLRC663_ISO14443_CMD_REQA);
 8007ede:	2026      	movs	r0, #38	; 0x26
 8007ee0:	f000 f803 	bl	8007eea <clrc663_iso14443a_WUPA_REQA>
 8007ee4:	4603      	mov	r3, r0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <clrc663_iso14443a_WUPA_REQA>:
uint16_t clrc663_iso14443a_WUPA() {
	return clrc663_iso14443a_WUPA_REQA(CLRC663_ISO14443_CMD_WUPA);
}

uint16_t clrc663_iso14443a_WUPA_REQA(uint8_t instruction) {
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b086      	sub	sp, #24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	71fb      	strb	r3, [r7, #7]
	clrc663_cmd_idle();
 8007ef4:	f7ff ff4c 	bl	8007d90 <clrc663_cmd_idle>

	clrc663_flush_fifo();
 8007ef8:	f7ff ff5a 	bl	8007db0 <clrc663_flush_fifo>

	// Set register such that we sent 7 bits, set DataEn such that we can send
	// data.
	clrc663_write_reg(CLRC663_REG_TXDATANUM, 7 | CLRC663_TXDATANUM_DATAEN);
 8007efc:	210f      	movs	r1, #15
 8007efe:	202e      	movs	r0, #46	; 0x2e
 8007f00:	f7ff fe76 	bl	8007bf0 <clrc663_write_reg>

	// disable the CRC registers.
	clrc663_write_reg(CLRC663_REG_TXCRCPRESET,
 8007f04:	2118      	movs	r1, #24
 8007f06:	202c      	movs	r0, #44	; 0x2c
 8007f08:	f7ff fe72 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_RECOM_14443A_CRC | CLRC663_CRC_OFF);
	clrc663_write_reg(CLRC663_REG_RXCRCCON,
 8007f0c:	2118      	movs	r1, #24
 8007f0e:	202d      	movs	r0, #45	; 0x2d
 8007f10:	f7ff fe6e 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_RECOM_14443A_CRC | CLRC663_CRC_OFF);

	clrc663_write_reg(CLRC663_REG_RXBITCTRL, 0);
 8007f14:	2100      	movs	r1, #0
 8007f16:	200c      	movs	r0, #12
 8007f18:	f7ff fe6a 	bl	8007bf0 <clrc663_write_reg>

	// prepare the request.
	uint8_t send_req[] = { instruction };
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	743b      	strb	r3, [r7, #16]

	// clear interrupts
	clrc663_clear_irq0();
 8007f20:	f7ff ff57 	bl	8007dd2 <clrc663_clear_irq0>
	clrc663_clear_irq1();
 8007f24:	f7ff ff5d 	bl	8007de2 <clrc663_clear_irq1>

	// enable the global IRQ for Rx done and Errors.
	clrc663_write_reg(CLRC663_REG_IRQ0EN,
 8007f28:	2106      	movs	r1, #6
 8007f2a:	2008      	movs	r0, #8
 8007f2c:	f7ff fe60 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_IRQ0EN_RX_IRQEN | CLRC663_IRQ0EN_ERR_IRQEN);
	clrc663_write_reg(CLRC663_REG_IRQ1EN, CLRC663_IRQ1EN_TIMER0_IRQEN); // only trigger on timer for irq1
 8007f30:	2101      	movs	r1, #1
 8007f32:	2009      	movs	r0, #9
 8007f34:	f7ff fe5c 	bl	8007bf0 <clrc663_write_reg>

	// configure a timeout timer.
	uint8_t timer_for_timeout = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	75bb      	strb	r3, [r7, #22]

	// Set timer to 221 kHz clock, start at the end of Tx.
	clrc663_timer_set_control(timer_for_timeout,
 8007f3c:	7dbb      	ldrb	r3, [r7, #22]
 8007f3e:	2111      	movs	r1, #17
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7ff ff66 	bl	8007e12 <clrc663_timer_set_control>
			CLRC663_TCONTROL_CLK_211KHZ | CLRC663_TCONTROL_START_TX_END);
	// Frame waiting time: FWT = (256 x 16/fc) x 2 FWI
	// FWI defaults to four... so that would mean wait for a maximum of ~ 5ms

	clrc663_timer_set_reload(timer_for_timeout, 1000); // 1000 ticks of 5 usec is 5 ms.
 8007f46:	7dbb      	ldrb	r3, [r7, #22]
 8007f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff ff78 	bl	8007e42 <clrc663_timer_set_reload>
	clrc663_timer_set_value(timer_for_timeout, 1000);
 8007f52:	7dbb      	ldrb	r3, [r7, #22]
 8007f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff ff98 	bl	8007e8e <clrc663_timer_set_value>

	// Go into send, then straight after in receive.
	clrc663_cmd_transceive(send_req, 1);
 8007f5e:	f107 0310 	add.w	r3, r7, #16
 8007f62:	2101      	movs	r1, #1
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff ff00 	bl	8007d6a <clrc663_cmd_transceive>
	// block until we are done
	uint8_t irq1_value = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75fb      	strb	r3, [r7, #23]
	while (!(irq1_value & (1 << timer_for_timeout))) {
 8007f6e:	e008      	b.n	8007f82 <clrc663_iso14443a_WUPA_REQA+0x98>
		irq1_value = clrc663_irq1();
 8007f70:	f7ff ff47 	bl	8007e02 <clrc663_irq1>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]
		if (irq1_value & CLRC663_IRQ1_GLOBAL_IRQ) {  // either ERR_IRQ or RX_IRQ
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d108      	bne.n	8007f94 <clrc663_iso14443a_WUPA_REQA+0xaa>
	while (!(irq1_value & (1 << timer_for_timeout))) {
 8007f82:	7dfa      	ldrb	r2, [r7, #23]
 8007f84:	7dbb      	ldrb	r3, [r7, #22]
 8007f86:	fa42 f303 	asr.w	r3, r2, r3
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0ee      	beq.n	8007f70 <clrc663_iso14443a_WUPA_REQA+0x86>
 8007f92:	e000      	b.n	8007f96 <clrc663_iso14443a_WUPA_REQA+0xac>
			break;  // stop polling irq1 and quit the timeout loop.
 8007f94:	bf00      	nop
		}
	}
	clrc663_cmd_idle();
 8007f96:	f7ff fefb 	bl	8007d90 <clrc663_cmd_idle>

	// if no Rx IRQ, or if there's an error somehow, return 0
	uint8_t irq0 = clrc663_irq0();
 8007f9a:	f7ff ff2a 	bl	8007df2 <clrc663_irq0>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	757b      	strb	r3, [r7, #21]
	if ((!(irq0 & CLRC663_IRQ0_RX_IRQ)) || (irq0 & CLRC663_IRQ0_ERR_IRQ)) {
 8007fa2:	7d7b      	ldrb	r3, [r7, #21]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <clrc663_iso14443a_WUPA_REQA+0xcc>
 8007fac:	7d7b      	ldrb	r3, [r7, #21]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <clrc663_iso14443a_WUPA_REQA+0xd0>
		return 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e011      	b.n	8007fde <clrc663_iso14443a_WUPA_REQA+0xf4>
	}

	uint8_t rx_len = clrc663_fifo_length();
 8007fba:	f7ff ff01 	bl	8007dc0 <clrc663_fifo_length>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	753b      	strb	r3, [r7, #20]
	uint16_t res;
	if (rx_len == 2) {  // ATQA should answer with 2 bytes.
 8007fc2:	7d3b      	ldrb	r3, [r7, #20]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d109      	bne.n	8007fdc <clrc663_iso14443a_WUPA_REQA+0xf2>
		clrc663_read_fifo((uint8_t*) &res, rx_len);
 8007fc8:	7d3b      	ldrb	r3, [r7, #20]
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	f107 030e 	add.w	r3, r7, #14
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fe75 	bl	8007cc2 <clrc663_read_fifo>
		return res;
 8007fd8:	89fb      	ldrh	r3, [r7, #14]
 8007fda:	e000      	b.n	8007fde <clrc663_iso14443a_WUPA_REQA+0xf4>
	}
	return 0;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <clrc663_iso14443a_select>:

uint8_t clrc663_iso14443a_select(uint8_t *uid) {
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b08e      	sub	sp, #56	; 0x38
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
	clrc663_cmd_idle();
 8007fee:	f7ff fecf 	bl	8007d90 <clrc663_cmd_idle>
	clrc663_flush_fifo();
 8007ff2:	f7ff fedd 	bl	8007db0 <clrc663_flush_fifo>
	// Bitshift to get uid_size; 0b00: single, 0b01: double, 0b10: triple, 0b11 RFU
	// uint8_t uid_size = (atqa & (0b11 << 6)) >> 6;
	// uint8_t bit_frame_collision = atqa & 0b11111;

	// enable the global IRQ for Rx done and Errors.
	clrc663_write_reg(CLRC663_REG_IRQ0EN,
 8007ff6:	2106      	movs	r1, #6
 8007ff8:	2008      	movs	r0, #8
 8007ffa:	f7ff fdf9 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_IRQ0EN_RX_IRQEN | CLRC663_IRQ0EN_ERR_IRQEN);
	clrc663_write_reg(CLRC663_REG_IRQ1EN, CLRC663_IRQ1EN_TIMER0_IRQEN); // only trigger on timer for irq1
 8007ffe:	2101      	movs	r1, #1
 8008000:	2009      	movs	r0, #9
 8008002:	f7ff fdf5 	bl	8007bf0 <clrc663_write_reg>

	// configure a timeout timer, use timer 0.
	uint8_t timer_for_timeout = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	// Set timer to 221 kHz clock, start at the end of Tx.
	clrc663_timer_set_control(timer_for_timeout,
 800800c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008010:	2111      	movs	r1, #17
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff fefd 	bl	8007e12 <clrc663_timer_set_control>
			CLRC663_TCONTROL_CLK_211KHZ | CLRC663_TCONTROL_START_TX_END);
	// Frame waiting time: FWT = (256 x 16/fc) x 2 FWI
	// FWI defaults to four... so that would mean wait for a maximum of ~ 5ms

	clrc663_timer_set_reload(timer_for_timeout, 1000); // 1000 ticks of 5 usec is 5 ms.
 8008018:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800801c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff ff0e 	bl	8007e42 <clrc663_timer_set_reload>
	clrc663_timer_set_value(timer_for_timeout, 1000);
 8008026:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800802a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff ff2d 	bl	8007e8e <clrc663_timer_set_value>
	uint8_t cascade_level;
	for (cascade_level = 1; cascade_level <= 3; cascade_level++) {
 8008034:	2301      	movs	r3, #1
 8008036:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800803a:	e25a      	b.n	80084f2 <clrc663_iso14443a_select+0x50c>
		uint8_t cmd = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		uint8_t known_bits = 0;  // known bits of the UID at this level so far.
 8008042:	2300      	movs	r3, #0
 8008044:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t send_req[7] = { 0 };  // used as Tx buffer.
 8008048:	2300      	movs	r3, #0
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	f107 0318 	add.w	r3, r7, #24
 8008050:	2100      	movs	r1, #0
 8008052:	460a      	mov	r2, r1
 8008054:	801a      	strh	r2, [r3, #0]
 8008056:	460a      	mov	r2, r1
 8008058:	709a      	strb	r2, [r3, #2]
		uint8_t *uid_this_level = &(send_req[2]);
 800805a:	f107 0314 	add.w	r3, r7, #20
 800805e:	3302      	adds	r3, #2
 8008060:	62bb      	str	r3, [r7, #40]	; 0x28
		// pointer to the UID so far, by placing this pointer in the send_req
		// array we prevent copying the UID continuously.
		uint8_t message_length;

		switch (cascade_level) {
 8008062:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008066:	2b03      	cmp	r3, #3
 8008068:	d00e      	beq.n	8008088 <clrc663_iso14443a_select+0xa2>
 800806a:	2b03      	cmp	r3, #3
 800806c:	dc10      	bgt.n	8008090 <clrc663_iso14443a_select+0xaa>
 800806e:	2b01      	cmp	r3, #1
 8008070:	d002      	beq.n	8008078 <clrc663_iso14443a_select+0x92>
 8008072:	2b02      	cmp	r3, #2
 8008074:	d004      	beq.n	8008080 <clrc663_iso14443a_select+0x9a>
 8008076:	e00b      	b.n	8008090 <clrc663_iso14443a_select+0xaa>
		case 1:
			cmd = CLRC663_ISO14443_CAS_LEVEL_1;
 8008078:	2393      	movs	r3, #147	; 0x93
 800807a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			break;
 800807e:	e007      	b.n	8008090 <clrc663_iso14443a_select+0xaa>
		case 2:
			cmd = CLRC663_ISO14443_CAS_LEVEL_2;
 8008080:	2395      	movs	r3, #149	; 0x95
 8008082:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			break;
 8008086:	e003      	b.n	8008090 <clrc663_iso14443a_select+0xaa>
		case 3:
			cmd = CLRC663_ISO14443_CAS_LEVEL_3;
 8008088:	2397      	movs	r3, #151	; 0x97
 800808a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			break;
 800808e:	bf00      	nop
		}

		// disable CRC in anticipation of the anti collision protocol
		clrc663_write_reg(CLRC663_REG_TXCRCPRESET,
 8008090:	2118      	movs	r1, #24
 8008092:	202c      	movs	r0, #44	; 0x2c
 8008094:	f7ff fdac 	bl	8007bf0 <clrc663_write_reg>
				CLRC663_RECOM_14443A_CRC | CLRC663_CRC_OFF);
		clrc663_write_reg(CLRC663_REG_RXCRCCON,
 8008098:	2118      	movs	r1, #24
 800809a:	202d      	movs	r0, #45	; 0x2d
 800809c:	f7ff fda8 	bl	8007bf0 <clrc663_write_reg>
				CLRC663_RECOM_14443A_CRC | CLRC663_CRC_OFF);

		// max 32 loops of the collision loop.
		uint8_t collision_n;
		for (collision_n = 0; collision_n < 32; collision_n++) {
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a6:	e137      	b.n	8008318 <clrc663_iso14443a_select+0x332>

			// clear interrupts
			clrc663_clear_irq0();
 80080a8:	f7ff fe93 	bl	8007dd2 <clrc663_clear_irq0>
			clrc663_clear_irq1();
 80080ac:	f7ff fe99 	bl	8007de2 <clrc663_clear_irq1>

			send_req[0] = cmd;
 80080b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80080b4:	753b      	strb	r3, [r7, #20]
			send_req[1] = 0x20 + known_bits;
 80080b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80080ba:	3320      	adds	r3, #32
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	757b      	strb	r3, [r7, #21]
			// send_req[2..] are filled with the UID via the uid_this_level pointer.

			// Only transmit the last 'x' bits of the current byte we are discovering
			// First limit the txdatanum, such that it limits the correct number of bits.
			clrc663_write_reg(CLRC663_REG_TXDATANUM,
 80080c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f043 0308 	orr.w	r3, r3, #8
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	4619      	mov	r1, r3
 80080d2:	202e      	movs	r0, #46	; 0x2e
 80080d4:	f7ff fd8c 	bl	8007bf0 <clrc663_write_reg>
					(known_bits % 8) | CLRC663_TXDATANUM_DATAEN);

			// ValuesAfterColl: If cleared, every received bit after a collision is
			// replaced by a zero. This function is needed for ISO/IEC14443 anticollision (0<<7).
			// We want to shift the bits with RxAlign
			uint8_t rxalign = known_bits % 8;
 80080d8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			clrc663_write_reg(CLRC663_REG_RXBITCTRL, (0 << 7) | (rxalign << 4));
 80080e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	200c      	movs	r0, #12
 80080f0:	f7ff fd7e 	bl	8007bf0 <clrc663_write_reg>

			// then sent the send_req to the hardware,
			// (known_bits / 8) + 1): The ceiled number of bytes by known bits.
			// +2 for cmd and NVB.
			if ((known_bits % 8) == 0) {
 80080f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d107      	bne.n	8008112 <clrc663_iso14443a_select+0x12c>
				message_length = ((known_bits / 8)) + 2;
 8008102:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008106:	08db      	lsrs	r3, r3, #3
 8008108:	b2db      	uxtb	r3, r3
 800810a:	3302      	adds	r3, #2
 800810c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8008110:	e006      	b.n	8008120 <clrc663_iso14443a_select+0x13a>
			} else {
				message_length = ((known_bits / 8) + 1) + 2;
 8008112:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008116:	08db      	lsrs	r3, r3, #3
 8008118:	b2db      	uxtb	r3, r3
 800811a:	3303      	adds	r3, #3
 800811c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			}

			clrc663_cmd_transceive(send_req, message_length);
 8008120:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008124:	b29a      	uxth	r2, r3
 8008126:	f107 0314 	add.w	r3, r7, #20
 800812a:	4611      	mov	r1, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff fe1c 	bl	8007d6a <clrc663_cmd_transceive>

			// block until we are done
			uint8_t irq1_value = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			while (!(irq1_value & (1 << timer_for_timeout))) {
 8008138:	e00a      	b.n	8008150 <clrc663_iso14443a_select+0x16a>
				irq1_value = clrc663_irq1();
 800813a:	f7ff fe62 	bl	8007e02 <clrc663_irq1>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				// either ERR_IRQ or RX_IRQ or Timer
				if (irq1_value & CLRC663_IRQ1_GLOBAL_IRQ) {
 8008144:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <clrc663_iso14443a_select+0x180>
			while (!(irq1_value & (1 << timer_for_timeout))) {
 8008150:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8008154:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008158:	fa42 f303 	asr.w	r3, r2, r3
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0ea      	beq.n	800813a <clrc663_iso14443a_select+0x154>
 8008164:	e000      	b.n	8008168 <clrc663_iso14443a_select+0x182>
					break;  // stop polling irq1 and quit the timeout loop.
 8008166:	bf00      	nop
				}
			}
			clrc663_cmd_idle();
 8008168:	f7ff fe12 	bl	8007d90 <clrc663_cmd_idle>

			// next up, we have to check what happened.
			uint8_t irq0 = clrc663_irq0();
 800816c:	f7ff fe41 	bl	8007df2 <clrc663_irq0>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			uint8_t error = clrc663_read_reg(CLRC663_REG_ERROR);
 8008176:	200a      	movs	r0, #10
 8008178:	f7ff fd18 	bl	8007bac <clrc663_read_reg>
 800817c:	4603      	mov	r3, r0
 800817e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t coll = clrc663_read_reg(CLRC663_REG_RXCOLL);
 8008182:	200d      	movs	r0, #13
 8008184:	f7ff fd12 	bl	8007bac <clrc663_read_reg>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			uint8_t collision_pos = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			if (irq0 & CLRC663_IRQ0_ERR_IRQ) {  // some error occured.
 8008194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d060      	beq.n	8008262 <clrc663_iso14443a_select+0x27c>
				// Check what kind of error.
				// error = clrc663_read_reg(CLRC663_REG_ERROR);
				if (error & CLRC663_ERROR_COLLDET) {
 80081a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d053      	beq.n	8008254 <clrc663_iso14443a_select+0x26e>
					// A collision was detected...
					if (coll & (1 << 7)) {
 80081ac:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	da48      	bge.n	8008246 <clrc663_iso14443a_select+0x260>
						collision_pos = coll & (~(1 << 7));
 80081b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
						// current value of uid at this position, first index right byte, then shift such
						// that it is in the rightmost position, ten select the last bit only.
						// We cannot compensate for the addition of the cascade tag, so this really
						// only works for the first cascade level, since we only know whether we had
						// a cascade level at the end when the SAK was received.
						uint8_t choice_pos = known_bits + collision_pos;
 80081c0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80081c4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80081c8:	4413      	add	r3, r2
 80081ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						uint8_t selection = (uid[((choice_pos
								+ (cascade_level - 1) * 3) / 8)]
 80081ce:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80081d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081d6:	1e5a      	subs	r2, r3, #1
 80081d8:	4613      	mov	r3, r2
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	4413      	add	r3, r2
 80081de:	440b      	add	r3, r1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	da00      	bge.n	80081e6 <clrc663_iso14443a_select+0x200>
 80081e4:	3307      	adds	r3, #7
 80081e6:	10db      	asrs	r3, r3, #3
 80081e8:	461a      	mov	r2, r3
						uint8_t selection = (uid[((choice_pos
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4413      	add	r3, r2
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
								>> ((choice_pos) % 8)) & 1;
 80081f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	fa42 f303 	asr.w	r3, r2, r3
 80081fe:	b2db      	uxtb	r3, r3
						uint8_t selection = (uid[((choice_pos
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

						// We just OR this into the UID at the right position, later we
						// OR the UID up to this point into uid_this_level.
						uid_this_level[((choice_pos) / 8)] |= selection
 8008208:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800820c:	08db      	lsrs	r3, r3, #3
 800820e:	b2d8      	uxtb	r0, r3
 8008210:	4602      	mov	r2, r0
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	4413      	add	r3, r2
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	b25a      	sxtb	r2, r3
								<< ((choice_pos) % 8);
 800821a:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800821e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	fa01 f303 	lsl.w	r3, r1, r3
						uid_this_level[((choice_pos) / 8)] |= selection
 800822a:	b25b      	sxtb	r3, r3
 800822c:	4313      	orrs	r3, r2
 800822e:	b25a      	sxtb	r2, r3
 8008230:	4601      	mov	r1, r0
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	440b      	add	r3, r1
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]
						known_bits++;  // add the bit we just decided.
 800823a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800823e:	3301      	adds	r3, #1
 8008240:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8008244:	e01c      	b.n	8008280 <clrc663_iso14443a_select+0x29a>
					} else {
						// Datasheet of clrc663:
						// bit 7 (CollPosValid) not set:
						// Otherwise no collision is detected or
						// the position of the collision is out of the range of bits CollPos.
						collision_pos = 0x20 - known_bits;
 8008246:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800824a:	f1c3 0320 	rsb	r3, r3, #32
 800824e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008252:	e015      	b.n	8008280 <clrc663_iso14443a_select+0x29a>
					}
				} else {
					// Can this ever occur?
					collision_pos = 0x20 - known_bits;
 8008254:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008258:	f1c3 0320 	rsb	r3, r3, #32
 800825c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8008260:	e00e      	b.n	8008280 <clrc663_iso14443a_select+0x29a>
				}
			} else if (irq0 & CLRC663_IRQ0_RX_IRQ) {
 8008262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d006      	beq.n	800827c <clrc663_iso14443a_select+0x296>
				// we got data, and no collisions, that means all is well.
				collision_pos = 0x20 - known_bits;
 800826e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008272:	f1c3 0320 	rsb	r3, r3, #32
 8008276:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800827a:	e001      	b.n	8008280 <clrc663_iso14443a_select+0x29a>
			} else {
				// We have no error, nor received an RX. No response, no card?
				return 0;
 800827c:	2300      	movs	r3, #0
 800827e:	e13e      	b.n	80084fe <clrc663_iso14443a_select+0x518>
			}

			// read the UID Cln so far from the buffer.
			uint8_t rx_len = clrc663_fifo_length();
 8008280:	f7ff fd9e 	bl	8007dc0 <clrc663_fifo_length>
 8008284:	4603      	mov	r3, r0
 8008286:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			uint8_t buf[5];  // Size is maximum of 5 bytes, UID[0-3] and BCC.

			clrc663_read_fifo(buf, rx_len < 5 ? rx_len : 5);
 800828a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800828e:	2b05      	cmp	r3, #5
 8008290:	bf28      	it	cs
 8008292:	2305      	movcs	r3, #5
 8008294:	b2db      	uxtb	r3, r3
 8008296:	b29a      	uxth	r2, r3
 8008298:	f107 030c 	add.w	r3, r7, #12
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fd0f 	bl	8007cc2 <clrc663_read_fifo>

			// move the buffer into the uid at this level, but OR the result such that
			// we do not lose the bit we just set if we have a collision.
			uint8_t rbx;
			for (rbx = 0; (rbx < rx_len); rbx++) {
 80082a4:	2300      	movs	r3, #0
 80082a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80082aa:	e01f      	b.n	80082ec <clrc663_iso14443a_select+0x306>
				uid_this_level[(known_bits / 8) + rbx] |= buf[rbx];
 80082ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80082b0:	08db      	lsrs	r3, r3, #3
 80082b2:	b2d8      	uxtb	r0, r3
 80082b4:	4602      	mov	r2, r0
 80082b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80082ba:	4413      	add	r3, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	4413      	add	r3, r2
 80082c2:	7819      	ldrb	r1, [r3, #0]
 80082c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80082c8:	3338      	adds	r3, #56	; 0x38
 80082ca:	443b      	add	r3, r7
 80082cc:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 80082d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80082d4:	4403      	add	r3, r0
 80082d6:	4618      	mov	r0, r3
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	4403      	add	r3, r0
 80082dc:	430a      	orrs	r2, r1
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	701a      	strb	r2, [r3, #0]
			for (rbx = 0; (rbx < rx_len); rbx++) {
 80082e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80082e6:	3301      	adds	r3, #1
 80082e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80082ec:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80082f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d3d9      	bcc.n	80082ac <clrc663_iso14443a_select+0x2c6>
			}
			known_bits += collision_pos;
 80082f8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80082fc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008300:	4413      	add	r3, r2
 8008302:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			if ((known_bits >= 32)) {
 8008306:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800830a:	2b1f      	cmp	r3, #31
 800830c:	d80a      	bhi.n	8008324 <clrc663_iso14443a_select+0x33e>
		for (collision_n = 0; collision_n < 32; collision_n++) {
 800830e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008312:	3301      	adds	r3, #1
 8008314:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008318:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800831c:	2b1f      	cmp	r3, #31
 800831e:	f67f aec3 	bls.w	80080a8 <clrc663_iso14443a_select+0xc2>
 8008322:	e000      	b.n	8008326 <clrc663_iso14443a_select+0x340>
				break;  // done with collision loop
 8008324:	bf00      	nop
			}
		}  // end collission loop

		// check if the BCC matches
		uint8_t bcc_val = uid_this_level[4]; // always at position 4, either with CT UID[0-2] or UID[0-3] in front.
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	791b      	ldrb	r3, [r3, #4]
 800832a:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t bcc_calc = uid_this_level[0] ^ uid_this_level[1]
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	3301      	adds	r3, #1
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	4053      	eors	r3, r2
 800833a:	b2da      	uxtb	r2, r3
				^ uid_this_level[2] ^ uid_this_level[3];
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	3302      	adds	r3, #2
 8008340:	781b      	ldrb	r3, [r3, #0]
		uint8_t bcc_calc = uid_this_level[0] ^ uid_this_level[1]
 8008342:	4053      	eors	r3, r2
 8008344:	b2da      	uxtb	r2, r3
				^ uid_this_level[2] ^ uid_this_level[3];
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	3303      	adds	r3, #3
 800834a:	781b      	ldrb	r3, [r3, #0]
		uint8_t bcc_calc = uid_this_level[0] ^ uid_this_level[1]
 800834c:	4053      	eors	r3, r2
 800834e:	77fb      	strb	r3, [r7, #31]
		if (bcc_val != bcc_calc) {
 8008350:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008354:	7ffb      	ldrb	r3, [r7, #31]
 8008356:	429a      	cmp	r2, r3
 8008358:	d001      	beq.n	800835e <clrc663_iso14443a_select+0x378>
			return 0;
 800835a:	2300      	movs	r3, #0
 800835c:	e0cf      	b.n	80084fe <clrc663_iso14443a_select+0x518>
		}

		// clear interrupts
		clrc663_clear_irq0();
 800835e:	f7ff fd38 	bl	8007dd2 <clrc663_clear_irq0>
		clrc663_clear_irq1();
 8008362:	f7ff fd3e 	bl	8007de2 <clrc663_clear_irq1>

		send_req[0] = cmd;
 8008366:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800836a:	753b      	strb	r3, [r7, #20]
		send_req[1] = 0x70;
 800836c:	2370      	movs	r3, #112	; 0x70
 800836e:	757b      	strb	r3, [r7, #21]
		// send_req[2,3,4,5] // contain the CT, UID[0-2] or UID[0-3]
		send_req[6] = bcc_calc;
 8008370:	7ffb      	ldrb	r3, [r7, #31]
 8008372:	76bb      	strb	r3, [r7, #26]
		message_length = 7;
 8008374:	2307      	movs	r3, #7
 8008376:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		// Ok, almost done now, we reenable the CRC's
		clrc663_write_reg(CLRC663_REG_TXCRCPRESET,
 800837a:	2119      	movs	r1, #25
 800837c:	202c      	movs	r0, #44	; 0x2c
 800837e:	f7ff fc37 	bl	8007bf0 <clrc663_write_reg>
				CLRC663_RECOM_14443A_CRC | CLRC663_CRC_ON);
		clrc663_write_reg(CLRC663_REG_RXCRCCON,
 8008382:	2119      	movs	r1, #25
 8008384:	202d      	movs	r0, #45	; 0x2d
 8008386:	f7ff fc33 	bl	8007bf0 <clrc663_write_reg>
				CLRC663_RECOM_14443A_CRC | CLRC663_CRC_ON);

		// reset the Tx and Rx registers (disable alignment, transmit full bytes)
		clrc663_write_reg(CLRC663_REG_TXDATANUM,
 800838a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f043 0308 	orr.w	r3, r3, #8
 8008398:	b2db      	uxtb	r3, r3
 800839a:	4619      	mov	r1, r3
 800839c:	202e      	movs	r0, #46	; 0x2e
 800839e:	f7ff fc27 	bl	8007bf0 <clrc663_write_reg>
				(known_bits % 8) | CLRC663_TXDATANUM_DATAEN);
		uint8_t rxalign = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	77bb      	strb	r3, [r7, #30]
		clrc663_write_reg(CLRC663_REG_RXBITCTRL, (0 << 7) | (rxalign << 4));
 80083a6:	7fbb      	ldrb	r3, [r7, #30]
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	4619      	mov	r1, r3
 80083ae:	200c      	movs	r0, #12
 80083b0:	f7ff fc1e 	bl	8007bf0 <clrc663_write_reg>

		// actually send it!
		clrc663_cmd_transceive(send_req, message_length);
 80083b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	f107 0314 	add.w	r3, r7, #20
 80083be:	4611      	mov	r1, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fcd2 	bl	8007d6a <clrc663_cmd_transceive>

		// Block until we are done...
		uint8_t irq1_value = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		while (!(irq1_value & (1 << timer_for_timeout))) {
 80083cc:	e00a      	b.n	80083e4 <clrc663_iso14443a_select+0x3fe>
			irq1_value = clrc663_irq1();
 80083ce:	f7ff fd18 	bl	8007e02 <clrc663_irq1>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (irq1_value & CLRC663_IRQ1_GLOBAL_IRQ) { // either ERR_IRQ or RX_IRQ
 80083d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <clrc663_iso14443a_select+0x414>
		while (!(irq1_value & (1 << timer_for_timeout))) {
 80083e4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80083e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083ec:	fa42 f303 	asr.w	r3, r2, r3
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0ea      	beq.n	80083ce <clrc663_iso14443a_select+0x3e8>
 80083f8:	e000      	b.n	80083fc <clrc663_iso14443a_select+0x416>
				break;  // stop polling irq1 and quit the timeout loop.
 80083fa:	bf00      	nop
			}
		}
		clrc663_cmd_idle();
 80083fc:	f7ff fcc8 	bl	8007d90 <clrc663_cmd_idle>

		// Check the source of exiting the loop.
		uint8_t irq0_value = clrc663_irq0();
 8008400:	f7ff fcf7 	bl	8007df2 <clrc663_irq0>
 8008404:	4603      	mov	r3, r0
 8008406:	777b      	strb	r3, [r7, #29]
		if (irq0_value & CLRC663_IRQ0_ERR_IRQ) {
 8008408:	7f7b      	ldrb	r3, [r7, #29]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <clrc663_iso14443a_select+0x444>
			// Check what kind of error.
			uint8_t error = clrc663_read_reg(CLRC663_REG_ERROR);
 8008412:	200a      	movs	r0, #10
 8008414:	f7ff fbca 	bl	8007bac <clrc663_read_reg>
 8008418:	4603      	mov	r3, r0
 800841a:	773b      	strb	r3, [r7, #28]
			if (error & CLRC663_ERROR_COLLDET) {
 800841c:	7f3b      	ldrb	r3, [r7, #28]
 800841e:	f003 0304 	and.w	r3, r3, #4
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <clrc663_iso14443a_select+0x444>
				// a collision was detected with NVB=0x70, should never happen.
				return 0;
 8008426:	2300      	movs	r3, #0
 8008428:	e069      	b.n	80084fe <clrc663_iso14443a_select+0x518>
			}
		}

		// Read the sak answer from the fifo.
		uint8_t sak_len = clrc663_fifo_length();
 800842a:	f7ff fcc9 	bl	8007dc0 <clrc663_fifo_length>
 800842e:	4603      	mov	r3, r0
 8008430:	76fb      	strb	r3, [r7, #27]
		if (sak_len != 1) {
 8008432:	7efb      	ldrb	r3, [r7, #27]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d001      	beq.n	800843c <clrc663_iso14443a_select+0x456>
			return 0;
 8008438:	2300      	movs	r3, #0
 800843a:	e060      	b.n	80084fe <clrc663_iso14443a_select+0x518>
		}
		uint8_t sak_value;
		clrc663_read_fifo(&sak_value, sak_len);
 800843c:	7efb      	ldrb	r3, [r7, #27]
 800843e:	b29a      	uxth	r2, r3
 8008440:	f107 0313 	add.w	r3, r7, #19
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff fc3b 	bl	8007cc2 <clrc663_read_fifo>

		if (sak_value & (1 << 2)) {
 800844c:	7cfb      	ldrb	r3, [r7, #19]
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d020      	beq.n	8008498 <clrc663_iso14443a_select+0x4b2>
			// UID not yet complete, continue with next cascade.
			// This also means the 0'th byte of the UID in this level was CT, so we
			// have to shift all bytes when moving to uid from uid_this_level.
			uint8_t UIDn;
			for (UIDn = 0; UIDn < 3; UIDn++) {
 8008456:	2300      	movs	r3, #0
 8008458:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800845c:	e017      	b.n	800848e <clrc663_iso14443a_select+0x4a8>
				// uid_this_level[UIDn] = uid_this_level[UIDn + 1];
				uid[(cascade_level - 1) * 3 + UIDn] = uid_this_level[UIDn + 1];
 800845e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008462:	3301      	adds	r3, #1
 8008464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008466:	18d1      	adds	r1, r2, r3
 8008468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800846c:	1e5a      	subs	r2, r3, #1
 800846e:	4613      	mov	r3, r2
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	441a      	add	r2, r3
 8008474:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008478:	4413      	add	r3, r2
 800847a:	461a      	mov	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4413      	add	r3, r2
 8008480:	780a      	ldrb	r2, [r1, #0]
 8008482:	701a      	strb	r2, [r3, #0]
			for (UIDn = 0; UIDn < 3; UIDn++) {
 8008484:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008488:	3301      	adds	r3, #1
 800848a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800848e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008492:	2b02      	cmp	r3, #2
 8008494:	d9e3      	bls.n	800845e <clrc663_iso14443a_select+0x478>
 8008496:	e027      	b.n	80084e8 <clrc663_iso14443a_select+0x502>
			}
		} else {
			// Done according so SAK!
			// Add the bytes at this level to the UID.
			uint8_t UIDn;
			for (UIDn = 0; UIDn < 4; UIDn++) {
 8008498:	2300      	movs	r3, #0
 800849a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800849e:	e016      	b.n	80084ce <clrc663_iso14443a_select+0x4e8>
				uid[(cascade_level - 1) * 3 + UIDn] = uid_this_level[UIDn];
 80084a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80084a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084a6:	18d1      	adds	r1, r2, r3
 80084a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084ac:	1e5a      	subs	r2, r3, #1
 80084ae:	4613      	mov	r3, r2
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	441a      	add	r2, r3
 80084b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80084b8:	4413      	add	r3, r2
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4413      	add	r3, r2
 80084c0:	780a      	ldrb	r2, [r1, #0]
 80084c2:	701a      	strb	r2, [r3, #0]
			for (UIDn = 0; UIDn < 4; UIDn++) {
 80084c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80084c8:	3301      	adds	r3, #1
 80084ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80084ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d9e4      	bls.n	80084a0 <clrc663_iso14443a_select+0x4ba>
			}

			// Finally, return the length of the UID that's now at the uid pointer.
			return cascade_level * 3 + 1;
 80084d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084da:	461a      	mov	r2, r3
 80084dc:	0052      	lsls	r2, r2, #1
 80084de:	4413      	add	r3, r2
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	3301      	adds	r3, #1
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	e00a      	b.n	80084fe <clrc663_iso14443a_select+0x518>
	for (cascade_level = 1; cascade_level <= 3; cascade_level++) {
 80084e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084ec:	3301      	adds	r3, #1
 80084ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80084f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	f67f ada0 	bls.w	800803c <clrc663_iso14443a_select+0x56>
		}

	}  // cascade loop
	return 0;  // getting an UID failed.
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3738      	adds	r7, #56	; 0x38
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <NTAG_GetVersion>:

// ---------------------------------------------------------------------------
// NTAG216
// ---------------------------------------------------------------------------
uint8_t NTAG_GetVersion(void) {
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
	unsigned char Response[10];
	clrc663_flush_fifo();
 800850c:	f7ff fc50 	bl	8007db0 <clrc663_flush_fifo>

	clrc663_write_reg(CLRC663_REG_TXCRCPRESET,
 8008510:	2119      	movs	r1, #25
 8008512:	202c      	movs	r0, #44	; 0x2c
 8008514:	f7ff fb6c 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_RECOM_14443A_CRC | CLRC663_CRC_ON);
	clrc663_write_reg(CLRC663_REG_RXCRCCON,
 8008518:	2119      	movs	r1, #25
 800851a:	202d      	movs	r0, #45	; 0x2d
 800851c:	f7ff fb68 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_RECOM_14443A_CRC | CLRC663_CRC_ON);

	uint8_t send_req[1] = { 0x60 };
 8008520:	2360      	movs	r3, #96	; 0x60
 8008522:	713b      	strb	r3, [r7, #4]

	// configure a timeout timer.
	uint8_t timer_for_timeout = 0;  // should match the enabled interupt.
 8008524:	2300      	movs	r3, #0
 8008526:	75bb      	strb	r3, [r7, #22]

	// enable the global IRQ for idle, errors and timer.
	clrc663_write_reg(CLRC663_REG_IRQ0EN,
 8008528:	2112      	movs	r1, #18
 800852a:	2008      	movs	r0, #8
 800852c:	f7ff fb60 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_IRQ0EN_IDLE_IRQEN | CLRC663_IRQ0EN_ERR_IRQEN);
	clrc663_write_reg(CLRC663_REG_IRQ1EN, CLRC663_IRQ1EN_TIMER0_IRQEN);
 8008530:	2101      	movs	r1, #1
 8008532:	2009      	movs	r0, #9
 8008534:	f7ff fb5c 	bl	8007bf0 <clrc663_write_reg>

	// Set timer to 221 kHz clock, start at the end of Tx.
	clrc663_timer_set_control(timer_for_timeout,
 8008538:	7dbb      	ldrb	r3, [r7, #22]
 800853a:	2111      	movs	r1, #17
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fc68 	bl	8007e12 <clrc663_timer_set_control>
			CLRC663_TCONTROL_CLK_211KHZ | CLRC663_TCONTROL_START_TX_END);
	// Frame waiting time: FWT = (256 x 16/fc) x 2 FWI
	// FWI defaults to four... so that would mean wait for a maximum of ~ 5ms
	clrc663_timer_set_reload(timer_for_timeout, 2000); // 2000 ticks of 5 usec is 10 ms.
 8008542:	7dbb      	ldrb	r3, [r7, #22]
 8008544:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fc7a 	bl	8007e42 <clrc663_timer_set_reload>
	clrc663_timer_set_value(timer_for_timeout, 2000);
 800854e:	7dbb      	ldrb	r3, [r7, #22]
 8008550:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fc9a 	bl	8007e8e <clrc663_timer_set_value>

	uint8_t irq1_value = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]
	uint8_t irq0_value = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	757b      	strb	r3, [r7, #21]

	clrc663_clear_irq0();  // clear irq0
 8008562:	f7ff fc36 	bl	8007dd2 <clrc663_clear_irq0>
	clrc663_clear_irq1();  // clear irq1
 8008566:	f7ff fc3c 	bl	8007de2 <clrc663_clear_irq1>

	// Go into send, then straight after in receive.
	clrc663_cmd_transceive(send_req, 1);
 800856a:	1d3b      	adds	r3, r7, #4
 800856c:	2101      	movs	r1, #1
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff fbfb 	bl	8007d6a <clrc663_cmd_transceive>

	// block until we are done
	while (!(irq1_value & (1 << timer_for_timeout))) {
 8008574:	e008      	b.n	8008588 <NTAG_GetVersion+0x82>
		irq1_value = clrc663_irq1();
 8008576:	f7ff fc44 	bl	8007e02 <clrc663_irq1>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]
		if (irq1_value & CLRC663_IRQ1_GLOBAL_IRQ) {
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d108      	bne.n	800859a <NTAG_GetVersion+0x94>
	while (!(irq1_value & (1 << timer_for_timeout))) {
 8008588:	7dfa      	ldrb	r2, [r7, #23]
 800858a:	7dbb      	ldrb	r3, [r7, #22]
 800858c:	fa42 f303 	asr.w	r3, r2, r3
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0ee      	beq.n	8008576 <NTAG_GetVersion+0x70>
 8008598:	e000      	b.n	800859c <NTAG_GetVersion+0x96>
			break;  // stop polling irq1 and quit the timeout loop.
 800859a:	bf00      	nop
		}
	}
	clrc663_cmd_idle();
 800859c:	f7ff fbf8 	bl	8007d90 <clrc663_cmd_idle>

	if (irq1_value & (1 << timer_for_timeout)) {
 80085a0:	7dfa      	ldrb	r2, [r7, #23]
 80085a2:	7dbb      	ldrb	r3, [r7, #22]
 80085a4:	fa42 f303 	asr.w	r3, r2, r3
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <NTAG_GetVersion+0xae>
		// this indicates a timeout
		return 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e02a      	b.n	800860a <NTAG_GetVersion+0x104>
	}

	irq0_value = clrc663_irq0();
 80085b4:	f7ff fc1d 	bl	8007df2 <clrc663_irq0>
 80085b8:	4603      	mov	r3, r0
 80085ba:	757b      	strb	r3, [r7, #21]
	if (irq0_value & CLRC663_IRQ0_ERR_IRQ) {
 80085bc:	7d7b      	ldrb	r3, [r7, #21]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <NTAG_GetVersion+0xc4>
		// some error
		return 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e01f      	b.n	800860a <NTAG_GetVersion+0x104>
	}

	uint8_t buffer_length = clrc663_fifo_length();
 80085ca:	f7ff fbf9 	bl	8007dc0 <clrc663_fifo_length>
 80085ce:	4603      	mov	r3, r0
 80085d0:	753b      	strb	r3, [r7, #20]
	uint8_t rx_len = (buffer_length <= 10) ? buffer_length : 10;
 80085d2:	7d3b      	ldrb	r3, [r7, #20]
 80085d4:	2b0a      	cmp	r3, #10
 80085d6:	bf28      	it	cs
 80085d8:	230a      	movcs	r3, #10
 80085da:	74fb      	strb	r3, [r7, #19]
	clrc663_read_fifo(Response, rx_len);
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	b29a      	uxth	r2, r3
 80085e0:	f107 0308 	add.w	r3, r7, #8
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fb6b 	bl	8007cc2 <clrc663_read_fifo>
	if (rx_len == 8 && Response[1] ==0x04 && Response[2] ==0x04 && Response[6] == 0x13)
 80085ec:	7cfb      	ldrb	r3, [r7, #19]
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d10a      	bne.n	8008608 <NTAG_GetVersion+0x102>
 80085f2:	7a7b      	ldrb	r3, [r7, #9]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d107      	bne.n	8008608 <NTAG_GetVersion+0x102>
 80085f8:	7abb      	ldrb	r3, [r7, #10]
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d104      	bne.n	8008608 <NTAG_GetVersion+0x102>
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b13      	cmp	r3, #19
 8008602:	d101      	bne.n	8008608 <NTAG_GetVersion+0x102>
	{
		//Byte 1 indicates vendor ID -> 0x04 -> NXP
		//Byte 2 indicates tag type	-> 0.04 -> NTAG
		//Byte 6 indicates the Storage size -> 0x11 -> NTAG21,5 0x13-> NTAG216

		return (uint8_t)Response[6]; //Was 1. I return the type, so the memory can be filled correctly.
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	e000      	b.n	800860a <NTAG_GetVersion+0x104>
	}
	return 0;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <NTAG_ReadBlock>:

uint8_t NTAG_ReadBlock(uint8_t block_address, uint8_t *dest) {
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	4603      	mov	r3, r0
 800861a:	6039      	str	r1, [r7, #0]
 800861c:	71fb      	strb	r3, [r7, #7]
	clrc663_flush_fifo();
 800861e:	f7ff fbc7 	bl	8007db0 <clrc663_flush_fifo>

	clrc663_write_reg(CLRC663_REG_TXCRCPRESET,
 8008622:	2119      	movs	r1, #25
 8008624:	202c      	movs	r0, #44	; 0x2c
 8008626:	f7ff fae3 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_RECOM_14443A_CRC | CLRC663_CRC_ON);
	clrc663_write_reg(CLRC663_REG_RXCRCCON,
 800862a:	2119      	movs	r1, #25
 800862c:	202d      	movs	r0, #45	; 0x2d
 800862e:	f7ff fadf 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_RECOM_14443A_CRC | CLRC663_CRC_ON);

	uint8_t send_req[2] = { CLRC663_MF_CMD_READ, block_address };
 8008632:	2330      	movs	r3, #48	; 0x30
 8008634:	723b      	strb	r3, [r7, #8]
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	727b      	strb	r3, [r7, #9]

	// configure a timeout timer.
	uint8_t timer_for_timeout = 0;  // should match the enabled interupt.
 800863a:	2300      	movs	r3, #0
 800863c:	73bb      	strb	r3, [r7, #14]

	// enable the global IRQ for idle, errors and timer.
	clrc663_write_reg(CLRC663_REG_IRQ0EN,
 800863e:	2112      	movs	r1, #18
 8008640:	2008      	movs	r0, #8
 8008642:	f7ff fad5 	bl	8007bf0 <clrc663_write_reg>
			CLRC663_IRQ0EN_IDLE_IRQEN | CLRC663_IRQ0EN_ERR_IRQEN);
	clrc663_write_reg(CLRC663_REG_IRQ1EN, CLRC663_IRQ1EN_TIMER0_IRQEN);
 8008646:	2101      	movs	r1, #1
 8008648:	2009      	movs	r0, #9
 800864a:	f7ff fad1 	bl	8007bf0 <clrc663_write_reg>

	// Set timer to 221 kHz clock, start at the end of Tx.
	clrc663_timer_set_control(timer_for_timeout,
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2111      	movs	r1, #17
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff fbdd 	bl	8007e12 <clrc663_timer_set_control>
			CLRC663_TCONTROL_CLK_211KHZ | CLRC663_TCONTROL_START_TX_END);
	// Frame waiting time: FWT = (256 x 16/fc) x 2 FWI
	// FWI defaults to four... so that would mean wait for a maximum of ~ 5ms
	clrc663_timer_set_reload(timer_for_timeout, 2000); // 2000 ticks of 5 usec is 10 ms.
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fbef 	bl	8007e42 <clrc663_timer_set_reload>
	clrc663_timer_set_value(timer_for_timeout, 2000);
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800866a:	4618      	mov	r0, r3
 800866c:	f7ff fc0f 	bl	8007e8e <clrc663_timer_set_value>

	uint8_t irq1_value = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
	uint8_t irq0_value = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	737b      	strb	r3, [r7, #13]

	clrc663_clear_irq0();  // clear irq0
 8008678:	f7ff fbab 	bl	8007dd2 <clrc663_clear_irq0>
	clrc663_clear_irq1();  // clear irq1
 800867c:	f7ff fbb1 	bl	8007de2 <clrc663_clear_irq1>

	// Go into send, then straight after in receive.
	clrc663_cmd_transceive(send_req, 2);
 8008680:	f107 0308 	add.w	r3, r7, #8
 8008684:	2102      	movs	r1, #2
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff fb6f 	bl	8007d6a <clrc663_cmd_transceive>

	// block until we are done
	while (!(irq1_value & (1 << timer_for_timeout))) {
 800868c:	e008      	b.n	80086a0 <NTAG_ReadBlock+0x8e>
		irq1_value = clrc663_irq1();
 800868e:	f7ff fbb8 	bl	8007e02 <clrc663_irq1>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
		if (irq1_value & CLRC663_IRQ1_GLOBAL_IRQ) {
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869c:	2b00      	cmp	r3, #0
 800869e:	d108      	bne.n	80086b2 <NTAG_ReadBlock+0xa0>
	while (!(irq1_value & (1 << timer_for_timeout))) {
 80086a0:	7bfa      	ldrb	r2, [r7, #15]
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	fa42 f303 	asr.w	r3, r2, r3
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0ee      	beq.n	800868e <NTAG_ReadBlock+0x7c>
 80086b0:	e000      	b.n	80086b4 <NTAG_ReadBlock+0xa2>
			break;  // stop polling irq1 and quit the timeout loop.
 80086b2:	bf00      	nop
		}
	}
	clrc663_cmd_idle();
 80086b4:	f7ff fb6c 	bl	8007d90 <clrc663_cmd_idle>

	if (irq1_value & (1 << timer_for_timeout)) {
 80086b8:	7bfa      	ldrb	r2, [r7, #15]
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	fa42 f303 	asr.w	r3, r2, r3
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <NTAG_ReadBlock+0xba>
		// this indicates a timeout
		return 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	e01a      	b.n	8008702 <NTAG_ReadBlock+0xf0>
	}

	irq0_value = clrc663_irq0();
 80086cc:	f7ff fb91 	bl	8007df2 <clrc663_irq0>
 80086d0:	4603      	mov	r3, r0
 80086d2:	737b      	strb	r3, [r7, #13]
	if (irq0_value & CLRC663_IRQ0_ERR_IRQ) {
 80086d4:	7b7b      	ldrb	r3, [r7, #13]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <NTAG_ReadBlock+0xd0>
		// some error
		return 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	e00f      	b.n	8008702 <NTAG_ReadBlock+0xf0>
	}

	// all seems to be well...
	uint8_t buffer_length = clrc663_fifo_length();
 80086e2:	f7ff fb6d 	bl	8007dc0 <clrc663_fifo_length>
 80086e6:	4603      	mov	r3, r0
 80086e8:	733b      	strb	r3, [r7, #12]
	uint8_t rx_len = (buffer_length <= 16) ? buffer_length : 16;
 80086ea:	7b3b      	ldrb	r3, [r7, #12]
 80086ec:	2b10      	cmp	r3, #16
 80086ee:	bf28      	it	cs
 80086f0:	2310      	movcs	r3, #16
 80086f2:	72fb      	strb	r3, [r7, #11]
	clrc663_read_fifo(dest, rx_len);
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	4619      	mov	r1, r3
 80086fa:	6838      	ldr	r0, [r7, #0]
 80086fc:	f7ff fae1 	bl	8007cc2 <clrc663_read_fifo>
	return rx_len;
 8008700:	7afb      	ldrb	r3, [r7, #11]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <CON_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the consumable module
//! \details    Initializes the consumable module
//! \params		None
void CON_Init (void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < TAGDATACOUNT ;i++)
 8008712:	2300      	movs	r3, #0
 8008714:	71fb      	strb	r3, [r7, #7]
 8008716:	e007      	b.n	8008728 <CON_Init+0x1c>
	{
		CON.CardMemory[i] = 0;
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	4a29      	ldr	r2, [pc, #164]	; (80087c0 <CON_Init+0xb4>)
 800871c:	4413      	add	r3, r2
 800871e:	2200      	movs	r2, #0
 8008720:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < TAGDATACOUNT ;i++)
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	3301      	adds	r3, #1
 8008726:	71fb      	strb	r3, [r7, #7]
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	2b39      	cmp	r3, #57	; 0x39
 800872c:	d9f4      	bls.n	8008718 <CON_Init+0xc>
	}
	CON.CardMemory[21] = 42;
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <CON_Init+0xb4>)
 8008730:	222a      	movs	r2, #42	; 0x2a
 8008732:	759a      	strb	r2, [r3, #22]
	CON.CardMemory[22]= 0;
 8008734:	4b22      	ldr	r3, [pc, #136]	; (80087c0 <CON_Init+0xb4>)
 8008736:	2200      	movs	r2, #0
 8008738:	75da      	strb	r2, [r3, #23]
	CON.CardMemory[23]= 0;
 800873a:	4b21      	ldr	r3, [pc, #132]	; (80087c0 <CON_Init+0xb4>)
 800873c:	2200      	movs	r2, #0
 800873e:	761a      	strb	r2, [r3, #24]
	CON.CardMemory[24]= 0;
 8008740:	4b1f      	ldr	r3, [pc, #124]	; (80087c0 <CON_Init+0xb4>)
 8008742:	2200      	movs	r2, #0
 8008744:	765a      	strb	r2, [r3, #25]
	CON.CardMemory[25]= 1;
 8008746:	4b1e      	ldr	r3, [pc, #120]	; (80087c0 <CON_Init+0xb4>)
 8008748:	2201      	movs	r2, #1
 800874a:	769a      	strb	r2, [r3, #26]
	CON.CardMemory[26] = 'F';
 800874c:	4b1c      	ldr	r3, [pc, #112]	; (80087c0 <CON_Init+0xb4>)
 800874e:	2246      	movs	r2, #70	; 0x46
 8008750:	76da      	strb	r2, [r3, #27]
	CON.CardMemory[27] = 'a';
 8008752:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <CON_Init+0xb4>)
 8008754:	2261      	movs	r2, #97	; 0x61
 8008756:	771a      	strb	r2, [r3, #28]
	CON.CardMemory[28] = 'n';
 8008758:	4b19      	ldr	r3, [pc, #100]	; (80087c0 <CON_Init+0xb4>)
 800875a:	226e      	movs	r2, #110	; 0x6e
 800875c:	775a      	strb	r2, [r3, #29]
	CON.CardMemory[29] = 'c';
 800875e:	4b18      	ldr	r3, [pc, #96]	; (80087c0 <CON_Init+0xb4>)
 8008760:	2263      	movs	r2, #99	; 0x63
 8008762:	779a      	strb	r2, [r3, #30]
	CON.CardMemory[30] = 'y';
 8008764:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <CON_Init+0xb4>)
 8008766:	2279      	movs	r2, #121	; 0x79
 8008768:	77da      	strb	r2, [r3, #31]
	CON.CardMemory[31] = ' ';
 800876a:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <CON_Init+0xb4>)
 800876c:	2220      	movs	r2, #32
 800876e:	f883 2020 	strb.w	r2, [r3, #32]
	CON.CardMemory[32] = 'R';
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <CON_Init+0xb4>)
 8008774:	2252      	movs	r2, #82	; 0x52
 8008776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	CON.CardMemory[33] = 'o';
 800877a:	4b11      	ldr	r3, [pc, #68]	; (80087c0 <CON_Init+0xb4>)
 800877c:	226f      	movs	r2, #111	; 0x6f
 800877e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	CON.CardMemory[34] = 'a';
 8008782:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <CON_Init+0xb4>)
 8008784:	2261      	movs	r2, #97	; 0x61
 8008786:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	CON.CardMemory[35] = 's';
 800878a:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <CON_Init+0xb4>)
 800878c:	2273      	movs	r2, #115	; 0x73
 800878e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	CON.CardMemory[36] = 't';
 8008792:	4b0b      	ldr	r3, [pc, #44]	; (80087c0 <CON_Init+0xb4>)
 8008794:	2274      	movs	r2, #116	; 0x74
 8008796:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	if (DUMMYMODERFID)
 800879a:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <CON_Init+0xb8>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <CON_Init+0x9e>
	{
		CON.Status = cPRESENT;
 80087a2:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <CON_Init+0xb4>)
 80087a4:	2203      	movs	r2, #3
 80087a6:	701a      	strb	r2, [r3, #0]
 80087a8:	e002      	b.n	80087b0 <CON_Init+0xa4>
	}
	else
	{
		CON.Status = cNOTPRESENT;
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <CON_Init+0xb4>)
 80087ac:	2202      	movs	r2, #2
 80087ae:	701a      	strb	r2, [r3, #0]
	}
	//Init and Setup RFID Frontend
	RFID_ResetFrontEnd();
 80087b0:	f000 fd4c 	bl	800924c <RFID_ResetFrontEnd>
	RFID_Init14443();
 80087b4:	f000 fd74 	bl	80092a0 <RFID_Init14443>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	200001d4 	.word	0x200001d4
 80087c4:	20000971 	.word	0x20000971

080087c8 <CON_Handle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the RFID reading
//! \details    Returns the RFID content
//! \params		None
void CON_Handle(void)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af08      	add	r7, sp, #32
	static uint16_t TickTime=0;
	TickTime ++;
 80087ce:	4b3e      	ldr	r3, [pc, #248]	; (80088c8 <CON_Handle+0x100>)
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	4b3c      	ldr	r3, [pc, #240]	; (80088c8 <CON_Handle+0x100>)
 80087d8:	801a      	strh	r2, [r3, #0]
	if (TickTime == 501) //Wait 500 ms so RID is not blocking all UART traffic
 80087da:	4b3b      	ldr	r3, [pc, #236]	; (80088c8 <CON_Handle+0x100>)
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	f240 12f5 	movw	r2, #501	; 0x1f5
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d103      	bne.n	80087ee <CON_Handle+0x26>
	{
		RFID_Field(0);
 80087e6:	2000      	movs	r0, #0
 80087e8:	f000 fd74 	bl	80092d4 <RFID_Field>
		{
			LED_Set(STANDBYLED,SWITCHEDON, 255, 0, 0, 100, 500, 500, 0, 0, 0);
		}
		TickTime = 0;
	}
}
 80087ec:	e068      	b.n	80088c0 <CON_Handle+0xf8>
	else if (TickTime == 506) //5 ms later
 80087ee:	4b36      	ldr	r3, [pc, #216]	; (80088c8 <CON_Handle+0x100>)
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 80087f6:	d163      	bne.n	80088c0 <CON_Handle+0xf8>
		RFID_Field(1);
 80087f8:	2001      	movs	r0, #1
 80087fa:	f000 fd6b 	bl	80092d4 <RFID_Field>
		if(RFID_GetCardMemory(CON.CardMemory))
 80087fe:	4833      	ldr	r0, [pc, #204]	; (80088cc <CON_Handle+0x104>)
 8008800:	f000 fd7e 	bl	8009300 <RFID_GetCardMemory>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d041      	beq.n	800888e <CON_Handle+0xc6>
			if (CON.TagVersion == 0x11) //NTAG215
 800880a:	4b31      	ldr	r3, [pc, #196]	; (80088d0 <CON_Handle+0x108>)
 800880c:	f893 3381 	ldrb.w	r3, [r3, #897]	; 0x381
 8008810:	2b11      	cmp	r3, #17
 8008812:	d11b      	bne.n	800884c <CON_Handle+0x84>
				memset(&CON.CardMemory[32*16-8],0,8);
 8008814:	2208      	movs	r2, #8
 8008816:	2100      	movs	r1, #0
 8008818:	482e      	ldr	r0, [pc, #184]	; (80088d4 <CON_Handle+0x10c>)
 800881a:	f00b fd0d 	bl	8014238 <memset>
				LED_Set(STANDBYLED,SWITCHEDON, 0, 255, 0, 100, 500, 500, 0, 0, 0);
 800881e:	2300      	movs	r3, #0
 8008820:	9306      	str	r3, [sp, #24]
 8008822:	2300      	movs	r3, #0
 8008824:	9305      	str	r3, [sp, #20]
 8008826:	2300      	movs	r3, #0
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008834:	9302      	str	r3, [sp, #8]
 8008836:	2364      	movs	r3, #100	; 0x64
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	2300      	movs	r3, #0
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	23ff      	movs	r3, #255	; 0xff
 8008840:	2200      	movs	r2, #0
 8008842:	2101      	movs	r1, #1
 8008844:	2000      	movs	r0, #0
 8008846:	f003 fb11 	bl	800be6c <LED_Set>
 800884a:	e036      	b.n	80088ba <CON_Handle+0xf2>
			else if (CON.TagVersion == 0x13) //NTAG216
 800884c:	4b20      	ldr	r3, [pc, #128]	; (80088d0 <CON_Handle+0x108>)
 800884e:	f893 3381 	ldrb.w	r3, [r3, #897]	; 0x381
 8008852:	2b13      	cmp	r3, #19
 8008854:	d131      	bne.n	80088ba <CON_Handle+0xf2>
			  memset(&CON.CardMemory[56*16-8],0,8);
 8008856:	2208      	movs	r2, #8
 8008858:	2100      	movs	r1, #0
 800885a:	481f      	ldr	r0, [pc, #124]	; (80088d8 <CON_Handle+0x110>)
 800885c:	f00b fcec 	bl	8014238 <memset>
			  LED_Set(STANDBYLED,SWITCHEDON, 0, 255, 0, 100, 500, 500, 0, 0, 0);
 8008860:	2300      	movs	r3, #0
 8008862:	9306      	str	r3, [sp, #24]
 8008864:	2300      	movs	r3, #0
 8008866:	9305      	str	r3, [sp, #20]
 8008868:	2300      	movs	r3, #0
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008870:	9303      	str	r3, [sp, #12]
 8008872:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008876:	9302      	str	r3, [sp, #8]
 8008878:	2364      	movs	r3, #100	; 0x64
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	2300      	movs	r3, #0
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	23ff      	movs	r3, #255	; 0xff
 8008882:	2200      	movs	r2, #0
 8008884:	2101      	movs	r1, #1
 8008886:	2000      	movs	r0, #0
 8008888:	f003 faf0 	bl	800be6c <LED_Set>
 800888c:	e015      	b.n	80088ba <CON_Handle+0xf2>
			LED_Set(STANDBYLED,SWITCHEDON, 255, 0, 0, 100, 500, 500, 0, 0, 0);
 800888e:	2300      	movs	r3, #0
 8008890:	9306      	str	r3, [sp, #24]
 8008892:	2300      	movs	r3, #0
 8008894:	9305      	str	r3, [sp, #20]
 8008896:	2300      	movs	r3, #0
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800889e:	9303      	str	r3, [sp, #12]
 80088a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088a4:	9302      	str	r3, [sp, #8]
 80088a6:	2364      	movs	r3, #100	; 0x64
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	2300      	movs	r3, #0
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	2300      	movs	r3, #0
 80088b0:	22ff      	movs	r2, #255	; 0xff
 80088b2:	2101      	movs	r1, #1
 80088b4:	2000      	movs	r0, #0
 80088b6:	f003 fad9 	bl	800be6c <LED_Set>
		TickTime = 0;
 80088ba:	4b03      	ldr	r3, [pc, #12]	; (80088c8 <CON_Handle+0x100>)
 80088bc:	2200      	movs	r2, #0
 80088be:	801a      	strh	r2, [r3, #0]
}
 80088c0:	bf00      	nop
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000556 	.word	0x20000556
 80088cc:	200001d5 	.word	0x200001d5
 80088d0:	200001d4 	.word	0x200001d4
 80088d4:	200003cd 	.word	0x200003cd
 80088d8:	2000054d 	.word	0x2000054d

080088dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80088e2:	4b14      	ldr	r3, [pc, #80]	; (8008934 <MX_DMA_Init+0x58>)
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	4a13      	ldr	r2, [pc, #76]	; (8008934 <MX_DMA_Init+0x58>)
 80088e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088ec:	61d3      	str	r3, [r2, #28]
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <MX_DMA_Init+0x58>)
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088f6:	607b      	str	r3, [r7, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80088fa:	2200      	movs	r2, #0
 80088fc:	2100      	movs	r1, #0
 80088fe:	200b      	movs	r0, #11
 8008900:	f007 f8d3 	bl	800faaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008904:	200b      	movs	r0, #11
 8008906:	f007 f8ec 	bl	800fae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	200d      	movs	r0, #13
 8008910:	f007 f8cb 	bl	800faaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008914:	200d      	movs	r0, #13
 8008916:	f007 f8e4 	bl	800fae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800891a:	2200      	movs	r2, #0
 800891c:	2100      	movs	r1, #0
 800891e:	2010      	movs	r0, #16
 8008920:	f007 f8c3 	bl	800faaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008924:	2010      	movs	r0, #16
 8008926:	f007 f8dc 	bl	800fae2 <HAL_NVIC_EnableIRQ>

}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	40023800 	.word	0x40023800

08008938 <SLD_GetStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the status of the filter slide
//! \details    Returns the status of the filter slide
//! \param[out] uint8_t status 0 = de-activated, 1 = activated
uint8_t SLD_GetStatus (void)
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
	//To be added: Evaluation of the sensors to determine the filter type

	if (FIL.Type == 0 )
 800893c:	4b08      	ldr	r3, [pc, #32]	; (8008960 <SLD_GetStatus+0x28>)
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d103      	bne.n	800894c <SLD_GetStatus+0x14>
		SLD.Status = sNOTINPOSITION;
 8008944:	4b07      	ldr	r3, [pc, #28]	; (8008964 <SLD_GetStatus+0x2c>)
 8008946:	2209      	movs	r2, #9
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	e002      	b.n	8008952 <SLD_GetStatus+0x1a>
	else
		SLD.Status = sINPOSITION;
 800894c:	4b05      	ldr	r3, [pc, #20]	; (8008964 <SLD_GetStatus+0x2c>)
 800894e:	220a      	movs	r2, #10
 8008950:	701a      	strb	r2, [r3, #0]
	return SLD.Status;
 8008952:	4b04      	ldr	r3, [pc, #16]	; (8008964 <SLD_GetStatus+0x2c>)
 8008954:	781b      	ldrb	r3, [r3, #0]
}
 8008956:	4618      	mov	r0, r3
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	2000097c 	.word	0x2000097c
 8008964:	20000558 	.word	0x20000558

08008968 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b088      	sub	sp, #32
 800896c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800896e:	f107 030c 	add.w	r3, r7, #12
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	605a      	str	r2, [r3, #4]
 8008978:	609a      	str	r2, [r3, #8]
 800897a:	60da      	str	r2, [r3, #12]
 800897c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800897e:	4b58      	ldr	r3, [pc, #352]	; (8008ae0 <MX_GPIO_Init+0x178>)
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	4a57      	ldr	r2, [pc, #348]	; (8008ae0 <MX_GPIO_Init+0x178>)
 8008984:	f043 0304 	orr.w	r3, r3, #4
 8008988:	61d3      	str	r3, [r2, #28]
 800898a:	4b55      	ldr	r3, [pc, #340]	; (8008ae0 <MX_GPIO_Init+0x178>)
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	60bb      	str	r3, [r7, #8]
 8008994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008996:	4b52      	ldr	r3, [pc, #328]	; (8008ae0 <MX_GPIO_Init+0x178>)
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	4a51      	ldr	r2, [pc, #324]	; (8008ae0 <MX_GPIO_Init+0x178>)
 800899c:	f043 0301 	orr.w	r3, r3, #1
 80089a0:	61d3      	str	r3, [r2, #28]
 80089a2:	4b4f      	ldr	r3, [pc, #316]	; (8008ae0 <MX_GPIO_Init+0x178>)
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80089ae:	4b4c      	ldr	r3, [pc, #304]	; (8008ae0 <MX_GPIO_Init+0x178>)
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	4a4b      	ldr	r2, [pc, #300]	; (8008ae0 <MX_GPIO_Init+0x178>)
 80089b4:	f043 0302 	orr.w	r3, r3, #2
 80089b8:	61d3      	str	r3, [r2, #28]
 80089ba:	4b49      	ldr	r3, [pc, #292]	; (8008ae0 <MX_GPIO_Init+0x178>)
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCCLK_Pin|M1_Pin, GPIO_PIN_RESET);
 80089c6:	2200      	movs	r2, #0
 80089c8:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80089cc:	4845      	ldr	r0, [pc, #276]	; (8008ae4 <MX_GPIO_Init+0x17c>)
 80089ce:	f008 f932 	bl	8010c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80089d2:	2200      	movs	r2, #0
 80089d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089d8:	4843      	ldr	r0, [pc, #268]	; (8008ae8 <MX_GPIO_Init+0x180>)
 80089da:	f008 f92c 	bl	8010c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_RES_GPIO_Port, RFID_RES_Pin, GPIO_PIN_RESET);
 80089de:	2200      	movs	r2, #0
 80089e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089e4:	4841      	ldr	r0, [pc, #260]	; (8008aec <MX_GPIO_Init+0x184>)
 80089e6:	f008 f926 	bl	8010c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCDATA_Pin;
 80089ea:	2310      	movs	r3, #16
 80089ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089ee:	2300      	movs	r3, #0
 80089f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LCDATA_GPIO_Port, &GPIO_InitStruct);
 80089f6:	f107 030c 	add.w	r3, r7, #12
 80089fa:	4619      	mov	r1, r3
 80089fc:	4839      	ldr	r0, [pc, #228]	; (8008ae4 <MX_GPIO_Init+0x17c>)
 80089fe:	f007 fea3 	bl	8010748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCCLK_Pin|M1_Pin;
 8008a02:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8008a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a14:	f107 030c 	add.w	r3, r7, #12
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4832      	ldr	r0, [pc, #200]	; (8008ae4 <MX_GPIO_Init+0x17c>)
 8008a1c:	f007 fe94 	bl	8010748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = HW1_Pin|HW3_Pin|HW2_Pin|CONN_Pin
 8008a20:	f44f 635d 	mov.w	r3, #3536	; 0xdd0
 8008a24:	60fb      	str	r3, [r7, #12]
                          |SW2_Pin|SW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a26:	2300      	movs	r3, #0
 8008a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a2e:	f107 030c 	add.w	r3, r7, #12
 8008a32:	4619      	mov	r1, r3
 8008a34:	482d      	ldr	r0, [pc, #180]	; (8008aec <MX_GPIO_Init+0x184>)
 8008a36:	f007 fe87 	bl	8010748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = HW0_Pin|SW4_Pin;
 8008a3a:	2314      	movs	r3, #20
 8008a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a42:	2301      	movs	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a46:	f107 030c 	add.w	r3, r7, #12
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4826      	ldr	r0, [pc, #152]	; (8008ae8 <MX_GPIO_Init+0x180>)
 8008a4e:	f007 fe7b 	bl	8010748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8008a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a60:	2300      	movs	r3, #0
 8008a62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	4619      	mov	r1, r3
 8008a6a:	481f      	ldr	r0, [pc, #124]	; (8008ae8 <MX_GPIO_Init+0x180>)
 8008a6c:	f007 fe6c 	bl	8010748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFID_RES_Pin;
 8008a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a76:	2301      	movs	r3, #1
 8008a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RFID_RES_GPIO_Port, &GPIO_InitStruct);
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4619      	mov	r1, r3
 8008a88:	4818      	ldr	r0, [pc, #96]	; (8008aec <MX_GPIO_Init+0x184>)
 8008a8a:	f007 fe5d 	bl	8010748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin|SW1_Pin;
 8008a8e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8008a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008a94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a9e:	f107 030c 	add.w	r3, r7, #12
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	480f      	ldr	r0, [pc, #60]	; (8008ae4 <MX_GPIO_Init+0x17c>)
 8008aa6:	f007 fe4f 	bl	8010748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8008aaa:	f44f 7308 	mov.w	r3, #544	; 0x220
 8008aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aba:	f107 030c 	add.w	r3, r7, #12
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4809      	ldr	r0, [pc, #36]	; (8008ae8 <MX_GPIO_Init+0x180>)
 8008ac2:	f007 fe41 	bl	8010748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2100      	movs	r1, #0
 8008aca:	2028      	movs	r0, #40	; 0x28
 8008acc:	f006 ffed 	bl	800faaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008ad0:	2028      	movs	r0, #40	; 0x28
 8008ad2:	f007 f806 	bl	800fae2 <HAL_NVIC_EnableIRQ>

}
 8008ad6:	bf00      	nop
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	40020000 	.word	0x40020000
 8008ae8:	40020400 	.word	0x40020400
 8008aec:	40020800 	.word	0x40020800

08008af0 <GND_GetStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the grinder status
//! \details    Returns the grinder status
//! \param[out]	enuStatus GND.Status
enuStatus GND_GetStatus (void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
	return GND.Status;
 8008af4:	4b02      	ldr	r3, [pc, #8]	; (8008b00 <GND_GetStatus+0x10>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr
 8008b00:	2000055c 	.word	0x2000055c

08008b04 <GND_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the grinder module
//! \details    Initializes the grinder module
//! \params		None
void GND_Init(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
	GND.Status = sINACTIVE;
 8008b08:	4b03      	ldr	r3, [pc, #12]	; (8008b18 <GND_Init+0x14>)
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	701a      	strb	r2, [r3, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bc80      	pop	{r7}
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	2000055c 	.word	0x2000055c

08008b1c <GND_Set>:

uint8_t GND_Set (uint16_t newGrindTime)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	80fb      	strh	r3, [r7, #6]
	static uint16_t GrindCounter = 0;
	uint8_t ReturnValue = TASK_BUSY;
 8008b26:	2303      	movs	r3, #3
 8008b28:	73fb      	strb	r3, [r7, #15]

	//if (DUMMYMODEGRINDER)
	//{
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_SET);
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b30:	4811      	ldr	r0, [pc, #68]	; (8008b78 <GND_Set+0x5c>)
 8008b32:	f008 f880 	bl	8010c36 <HAL_GPIO_WritePin>
		GND.Status = sACTIVE;
 8008b36:	4b11      	ldr	r3, [pc, #68]	; (8008b7c <GND_Set+0x60>)
 8008b38:	2203      	movs	r2, #3
 8008b3a:	701a      	strb	r2, [r3, #0]
		GrindCounter += 100;
 8008b3c:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <GND_Set+0x64>)
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	3364      	adds	r3, #100	; 0x64
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <GND_Set+0x64>)
 8008b46:	801a      	strh	r2, [r3, #0]
		if (GrindCounter >= newGrindTime)
 8008b48:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <GND_Set+0x64>)
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	88fa      	ldrh	r2, [r7, #6]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d80d      	bhi.n	8008b6e <GND_Set+0x52>
		{
			HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 8008b52:	2200      	movs	r2, #0
 8008b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b58:	4807      	ldr	r0, [pc, #28]	; (8008b78 <GND_Set+0x5c>)
 8008b5a:	f008 f86c 	bl	8010c36 <HAL_GPIO_WritePin>
			GrindCounter = 0;
 8008b5e:	4b08      	ldr	r3, [pc, #32]	; (8008b80 <GND_Set+0x64>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	801a      	strh	r2, [r3, #0]
			ReturnValue = TASK_READY;
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
			GND.Status = sINACTIVE;
 8008b68:	4b04      	ldr	r3, [pc, #16]	; (8008b7c <GND_Set+0x60>)
 8008b6a:	2204      	movs	r2, #4
 8008b6c:	701a      	strb	r2, [r3, #0]
		}
	//}

	return ReturnValue;
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40020000 	.word	0x40020000
 8008b7c:	2000055c 	.word	0x2000055c
 8008b80:	20000564 	.word	0x20000564

08008b84 <HOP_SetParameter>:
  Description:  	Used to set the hopper data and store variables in EEprom
  Parameters:   	uint8_t newAddress, uint16_t newValue
  Return value: 	None
***************************************************************/
void HOP_SetParameter (uint8_t newAddress, uint16_t newValue)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	71fb      	strb	r3, [r7, #7]
 8008b90:	4613      	mov	r3, r2
 8008b92:	80bb      	strh	r3, [r7, #4]
	switch (newAddress)
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	3b0a      	subs	r3, #10
 8008b98:	2b06      	cmp	r3, #6
 8008b9a:	d830      	bhi.n	8008bfe <HOP_SetParameter+0x7a>
 8008b9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <HOP_SetParameter+0x20>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bc1 	.word	0x08008bc1
 8008ba8:	08008bc9 	.word	0x08008bc9
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008bdb 	.word	0x08008bdb
 8008bb4:	08008be5 	.word	0x08008be5
 8008bb8:	08008bef 	.word	0x08008bef
 8008bbc:	08008bf7 	.word	0x08008bf7
	{
		case HOP_TIMEMIN:
		{
			HOP.TimeMin = newValue;
 8008bc0:	4a14      	ldr	r2, [pc, #80]	; (8008c14 <HOP_SetParameter+0x90>)
 8008bc2:	88bb      	ldrh	r3, [r7, #4]
 8008bc4:	8053      	strh	r3, [r2, #2]
			break;
 8008bc6:	e01b      	b.n	8008c00 <HOP_SetParameter+0x7c>
		}
		case HOP_TIMEMAX:
		{
			HOP.TimeMax = newValue;
 8008bc8:	4a12      	ldr	r2, [pc, #72]	; (8008c14 <HOP_SetParameter+0x90>)
 8008bca:	88bb      	ldrh	r3, [r7, #4]
 8008bcc:	8093      	strh	r3, [r2, #4]
			break;
 8008bce:	e017      	b.n	8008c00 <HOP_SetParameter+0x7c>
		}
		case HOP_DUMPANGLE:
		{
			HOP.DumpAngle = newValue;
 8008bd0:	88bb      	ldrh	r3, [r7, #4]
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <HOP_SetParameter+0x90>)
 8008bd6:	719a      	strb	r2, [r3, #6]
			break;
 8008bd8:	e012      	b.n	8008c00 <HOP_SetParameter+0x7c>
		}
		case HOP_DOSEANGLE:
		{
			HOP.DoseAngle = newValue;
 8008bda:	88bb      	ldrh	r3, [r7, #4]
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4b0d      	ldr	r3, [pc, #52]	; (8008c14 <HOP_SetParameter+0x90>)
 8008be0:	71da      	strb	r2, [r3, #7]
			break;
 8008be2:	e00d      	b.n	8008c00 <HOP_SetParameter+0x7c>
		}
		case HOP_DOSESTEPSMAX:
		{
			HOP.DoseStepsMax = newValue;
 8008be4:	88bb      	ldrh	r3, [r7, #4]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <HOP_SetParameter+0x90>)
 8008bea:	721a      	strb	r2, [r3, #8]
			break;
 8008bec:	e008      	b.n	8008c00 <HOP_SetParameter+0x7c>
		}
		case HOP_CLOSEDPULSETIME:
		{
			HOP.ClosedPulseTime = newValue;
 8008bee:	4a09      	ldr	r2, [pc, #36]	; (8008c14 <HOP_SetParameter+0x90>)
 8008bf0:	88bb      	ldrh	r3, [r7, #4]
 8008bf2:	8393      	strh	r3, [r2, #28]
			break;
 8008bf4:	e004      	b.n	8008c00 <HOP_SetParameter+0x7c>
		}
		case HOP_OPENEDPULSETIME:
		{
			HOP.OpenedPulseTime = newValue;
 8008bf6:	4a07      	ldr	r2, [pc, #28]	; (8008c14 <HOP_SetParameter+0x90>)
 8008bf8:	88bb      	ldrh	r3, [r7, #4]
 8008bfa:	83d3      	strh	r3, [r2, #30]
			break;
 8008bfc:	e000      	b.n	8008c00 <HOP_SetParameter+0x7c>
		}
		default: break;
 8008bfe:	bf00      	nop
	}
	EEP_WriteEEPROM (newAddress, newValue);
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	88ba      	ldrh	r2, [r7, #4]
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f002 fbb2 	bl	800b370 <EEP_WriteEEPROM>
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20000568 	.word	0x20000568

08008c18 <HOP_Handle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the shutter timeout
//! \details    Sets the PWM to 0 after the HOP_MAX_OPERATION_TIME to avoid burning the motor
//! \params		None
void HOP_Handle (void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
	if (HOP.TimeOut < HOP_MAX_OPERATION_TIME)
 8008c1c:	4b08      	ldr	r3, [pc, #32]	; (8008c40 <HOP_Handle+0x28>)
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c24:	d205      	bcs.n	8008c32 <HOP_Handle+0x1a>
		HOP.TimeOut ++;
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <HOP_Handle+0x28>)
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	4a04      	ldr	r2, [pc, #16]	; (8008c40 <HOP_Handle+0x28>)
 8008c2e:	60d3      	str	r3, [r2, #12]
	else
		HOP_ANGLE = 0; //Disable motor, so it will not burn
}
 8008c30:	e002      	b.n	8008c38 <HOP_Handle+0x20>
		HOP_ANGLE = 0; //Disable motor, so it will not burn
 8008c32:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <HOP_Handle+0x2c>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008c38:	bf00      	nop
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bc80      	pop	{r7}
 8008c3e:	4770      	bx	lr
 8008c40:	20000568 	.word	0x20000568
 8008c44:	40000400 	.word	0x40000400

08008c48 <HOP_SetAngle>:
//-----------------------------------------------------------------------------
//! \brief      Sets the shutter angle
//! \details    Sets the PWM to set the hopper angle
//! \param[out]	enuHopper HOP.Status
void HOP_SetAngle (uint8_t newAngle)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	71fb      	strb	r3, [r7, #7]
	uint32_t Pulse;
	if (newAngle > 180) return;
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	2bb4      	cmp	r3, #180	; 0xb4
 8008c56:	d822      	bhi.n	8008c9e <HOP_SetAngle+0x56>
	if (DUMMYMODESCALE)
 8008c58:	4b13      	ldr	r3, [pc, #76]	; (8008ca8 <HOP_SetAngle+0x60>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HOP_SetAngle+0x20>
	{
		HOP_ANGLE=0;
 8008c60:	4b12      	ldr	r3, [pc, #72]	; (8008cac <HOP_SetAngle+0x64>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 8008c66:	e01b      	b.n	8008ca0 <HOP_SetAngle+0x58>
	}
	//Pulse = ((PULSE_180_DEGREES - PULSE_0_DEGREES) * newAngle / 180) + PULSE_0_DEGREES;
	Pulse = ((HOP.ClosedPulseTime - HOP.OpenedPulseTime) * newAngle / 180) + HOP.OpenedPulseTime;
 8008c68:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <HOP_SetAngle+0x68>)
 8008c6a:	8b9b      	ldrh	r3, [r3, #28]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <HOP_SetAngle+0x68>)
 8008c70:	8bdb      	ldrh	r3, [r3, #30]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	79fa      	ldrb	r2, [r7, #7]
 8008c76:	fb02 f303 	mul.w	r3, r2, r3
 8008c7a:	4a0e      	ldr	r2, [pc, #56]	; (8008cb4 <HOP_SetAngle+0x6c>)
 8008c7c:	fb82 1203 	smull	r1, r2, r2, r3
 8008c80:	441a      	add	r2, r3
 8008c82:	11d2      	asrs	r2, r2, #7
 8008c84:	17db      	asrs	r3, r3, #31
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <HOP_SetAngle+0x68>)
 8008c8a:	8bd2      	ldrh	r2, [r2, #30]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
	HOP_ANGLE = Pulse;
 8008c90:	4a06      	ldr	r2, [pc, #24]	; (8008cac <HOP_SetAngle+0x64>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	63d3      	str	r3, [r2, #60]	; 0x3c
	HOP.TimeOut = 0;
 8008c96:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <HOP_SetAngle+0x68>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	60da      	str	r2, [r3, #12]
 8008c9c:	e000      	b.n	8008ca0 <HOP_SetAngle+0x58>
	if (newAngle > 180) return;
 8008c9e:	bf00      	nop
}
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr
 8008ca8:	20000972 	.word	0x20000972
 8008cac:	40000400 	.word	0x40000400
 8008cb0:	20000568 	.word	0x20000568
 8008cb4:	b60b60b7 	.word	0xb60b60b7

08008cb8 <HOP_GetStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the hopper status
//! \details    Returns the hopper status
//! \param[out]	enuHopper HOP.Status
enuHopper HOP_GetStatus (void)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
	enuHopper ReturnValue = hNOTPLACED;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	71fb      	strb	r3, [r7, #7]
	if (CON.Status == cPRESENT)
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <HOP_GetStatus+0x24>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d102      	bne.n	8008cd0 <HOP_GetStatus+0x18>
		ReturnValue = HOP.Status;
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <HOP_GetStatus+0x28>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	71fb      	strb	r3, [r7, #7]

	return ReturnValue;
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr
 8008cdc:	200001d4 	.word	0x200001d4
 8008ce0:	20000568 	.word	0x20000568

08008ce4 <HOP_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the hopper module
//! \details    Initializes the hopper module
//! \params		None
void HOP_Init(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
	if (DUMMYMODEGRINDER)
 8008ce8:	4b46      	ldr	r3, [pc, #280]	; (8008e04 <HOP_Init+0x120>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HOP_Init+0x12>
	{
		HOP.GetAngle = 90;
 8008cf0:	4b45      	ldr	r3, [pc, #276]	; (8008e08 <HOP_Init+0x124>)
 8008cf2:	225a      	movs	r2, #90	; 0x5a
 8008cf4:	729a      	strb	r2, [r3, #10]
	}
	//Check if this is first use. If so write default values in EEPROM
	if (EEP_ReadEEPROM (HOP_EEPROMFILLED) == 0)
 8008cf6:	2013      	movs	r0, #19
 8008cf8:	f002 fb57 	bl	800b3aa <EEP_ReadEEPROM>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d122      	bne.n	8008d48 <HOP_Init+0x64>
	{
		EEP_WriteEEPROM(HOP_TIMEMIN, 175);
 8008d02:	21af      	movs	r1, #175	; 0xaf
 8008d04:	200a      	movs	r0, #10
 8008d06:	f002 fb33 	bl	800b370 <EEP_WriteEEPROM>
		EEP_WriteEEPROM(HOP_TIMEMAX, 500);
 8008d0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008d0e:	200b      	movs	r0, #11
 8008d10:	f002 fb2e 	bl	800b370 <EEP_WriteEEPROM>
		EEP_WriteEEPROM(HOP_DUMPANGLE, 0);
 8008d14:	2100      	movs	r1, #0
 8008d16:	200c      	movs	r0, #12
 8008d18:	f002 fb2a 	bl	800b370 <EEP_WriteEEPROM>
		EEP_WriteEEPROM(HOP_DOSEANGLE, 45);
 8008d1c:	212d      	movs	r1, #45	; 0x2d
 8008d1e:	200d      	movs	r0, #13
 8008d20:	f002 fb26 	bl	800b370 <EEP_WriteEEPROM>
		EEP_WriteEEPROM(HOP_DOSESTEPSMAX, 5);
 8008d24:	2105      	movs	r1, #5
 8008d26:	200e      	movs	r0, #14
 8008d28:	f002 fb22 	bl	800b370 <EEP_WriteEEPROM>
		EEP_WriteEEPROM(HOP_EEPROMFILLED, 1);
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	2013      	movs	r0, #19
 8008d30:	f002 fb1e 	bl	800b370 <EEP_WriteEEPROM>
		EEP_WriteEEPROM(HOP_CLOSEDPULSETIME, 2475);
 8008d34:	f640 11ab 	movw	r1, #2475	; 0x9ab
 8008d38:	200f      	movs	r0, #15
 8008d3a:	f002 fb19 	bl	800b370 <EEP_WriteEEPROM>
		EEP_WriteEEPROM(HOP_OPENEDPULSETIME, 600);
 8008d3e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d42:	2010      	movs	r0, #16
 8008d44:	f002 fb14 	bl	800b370 <EEP_WriteEEPROM>
	}
	HOP.TimeMin = EEP_ReadEEPROM (HOP_TIMEMIN);
 8008d48:	200a      	movs	r0, #10
 8008d4a:	f002 fb2e 	bl	800b3aa <EEP_ReadEEPROM>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	4b2d      	ldr	r3, [pc, #180]	; (8008e08 <HOP_Init+0x124>)
 8008d54:	805a      	strh	r2, [r3, #2]
	HOP.TimeMax = EEP_ReadEEPROM (HOP_TIMEMAX);//500;
 8008d56:	200b      	movs	r0, #11
 8008d58:	f002 fb27 	bl	800b3aa <EEP_ReadEEPROM>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	4b29      	ldr	r3, [pc, #164]	; (8008e08 <HOP_Init+0x124>)
 8008d62:	809a      	strh	r2, [r3, #4]
	HOP.DumpAngle = EEP_ReadEEPROM (HOP_DUMPANGLE);// 0;
 8008d64:	200c      	movs	r0, #12
 8008d66:	f002 fb20 	bl	800b3aa <EEP_ReadEEPROM>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	4b26      	ldr	r3, [pc, #152]	; (8008e08 <HOP_Init+0x124>)
 8008d70:	719a      	strb	r2, [r3, #6]
	HOP.DoseAngle = EEP_ReadEEPROM (HOP_DOSEANGLE);//45;
 8008d72:	200d      	movs	r0, #13
 8008d74:	f002 fb19 	bl	800b3aa <EEP_ReadEEPROM>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	4b22      	ldr	r3, [pc, #136]	; (8008e08 <HOP_Init+0x124>)
 8008d7e:	71da      	strb	r2, [r3, #7]
	HOP.DoseStepsMax = EEP_ReadEEPROM (HOP_DOSESTEPSMAX);//5;
 8008d80:	200e      	movs	r0, #14
 8008d82:	f002 fb12 	bl	800b3aa <EEP_ReadEEPROM>
 8008d86:	4603      	mov	r3, r0
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	4b1f      	ldr	r3, [pc, #124]	; (8008e08 <HOP_Init+0x124>)
 8008d8c:	721a      	strb	r2, [r3, #8]
	HOP.ClosedPulseTime = EEP_ReadEEPROM (HOP_CLOSEDPULSETIME);//2475;
 8008d8e:	200f      	movs	r0, #15
 8008d90:	f002 fb0b 	bl	800b3aa <EEP_ReadEEPROM>
 8008d94:	4603      	mov	r3, r0
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	4b1b      	ldr	r3, [pc, #108]	; (8008e08 <HOP_Init+0x124>)
 8008d9a:	839a      	strh	r2, [r3, #28]
	if (HOP.ClosedPulseTime == 0)
 8008d9c:	4b1a      	ldr	r3, [pc, #104]	; (8008e08 <HOP_Init+0x124>)
 8008d9e:	8b9b      	ldrh	r3, [r3, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d108      	bne.n	8008db6 <HOP_Init+0xd2>
	{
		HOP.ClosedPulseTime = 2475;
 8008da4:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <HOP_Init+0x124>)
 8008da6:	f640 12ab 	movw	r2, #2475	; 0x9ab
 8008daa:	839a      	strh	r2, [r3, #28]
		EEP_WriteEEPROM(HOP_CLOSEDPULSETIME, 2475);
 8008dac:	f640 11ab 	movw	r1, #2475	; 0x9ab
 8008db0:	200f      	movs	r0, #15
 8008db2:	f002 fadd 	bl	800b370 <EEP_WriteEEPROM>
	}
	HOP.OpenedPulseTime = EEP_ReadEEPROM (HOP_OPENEDPULSETIME);//600;
 8008db6:	2010      	movs	r0, #16
 8008db8:	f002 faf7 	bl	800b3aa <EEP_ReadEEPROM>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <HOP_Init+0x124>)
 8008dc2:	83da      	strh	r2, [r3, #30]
	if (HOP.OpenedPulseTime == 0)
 8008dc4:	4b10      	ldr	r3, [pc, #64]	; (8008e08 <HOP_Init+0x124>)
 8008dc6:	8bdb      	ldrh	r3, [r3, #30]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d108      	bne.n	8008dde <HOP_Init+0xfa>
	{
		HOP.OpenedPulseTime = 600;
 8008dcc:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <HOP_Init+0x124>)
 8008dce:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008dd2:	83da      	strh	r2, [r3, #30]
		EEP_WriteEEPROM(HOP_OPENEDPULSETIME, 600);
 8008dd4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008dd8:	2010      	movs	r0, #16
 8008dda:	f002 fac9 	bl	800b370 <EEP_WriteEEPROM>
	}
	HOP.Status = hCLOSED;
 8008dde:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <HOP_Init+0x124>)
 8008de0:	2203      	movs	r2, #3
 8008de2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim3);
 8008de4:	4809      	ldr	r0, [pc, #36]	; (8008e0c <HOP_Init+0x128>)
 8008de6:	f009 fb37 	bl	8012458 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8008dea:	2108      	movs	r1, #8
 8008dec:	4807      	ldr	r0, [pc, #28]	; (8008e0c <HOP_Init+0x128>)
 8008dee:	f009 fc3d 	bl	801266c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8008df2:	210c      	movs	r1, #12
 8008df4:	4805      	ldr	r0, [pc, #20]	; (8008e0c <HOP_Init+0x128>)
 8008df6:	f009 fc39 	bl	801266c <HAL_TIM_PWM_Start>
	HOP_SetAngle (180);
 8008dfa:	20b4      	movs	r0, #180	; 0xb4
 8008dfc:	f7ff ff24 	bl	8008c48 <HOP_SetAngle>
}
 8008e00:	bf00      	nop
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	2000096f 	.word	0x2000096f
 8008e08:	20000568 	.word	0x20000568
 8008e0c:	20000708 	.word	0x20000708

08008e10 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8008e14:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <MX_IWDG_Init+0x2c>)
 8008e16:	4a0a      	ldr	r2, [pc, #40]	; (8008e40 <MX_IWDG_Init+0x30>)
 8008e18:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8008e1a:	4b08      	ldr	r3, [pc, #32]	; (8008e3c <MX_IWDG_Init+0x2c>)
 8008e1c:	2206      	movs	r2, #6
 8008e1e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8008e20:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <MX_IWDG_Init+0x2c>)
 8008e22:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008e26:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008e28:	4804      	ldr	r0, [pc, #16]	; (8008e3c <MX_IWDG_Init+0x2c>)
 8008e2a:	f007 ff3f 	bl	8010cac <HAL_IWDG_Init>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8008e34:	f000 f98c 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8008e38:	bf00      	nop
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000588 	.word	0x20000588
 8008e40:	40003000 	.word	0x40003000

08008e44 <CheckString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t CheckString (uint8_t *StringToCheck, char *CheckString)
{
 8008e44:	b590      	push	{r4, r7, lr}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
	uint8_t ReturnValue = 1;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i< strlen(CheckString); i++)
 8008e52:	2300      	movs	r3, #0
 8008e54:	73bb      	strb	r3, [r7, #14]
 8008e56:	e00e      	b.n	8008e76 <CheckString+0x32>
	{
		if (StringToCheck[i] != CheckString[i])
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	440b      	add	r3, r1
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d001      	beq.n	8008e70 <CheckString+0x2c>
		{
			ReturnValue = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i< strlen(CheckString); i++)
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	3301      	adds	r3, #1
 8008e74:	73bb      	strb	r3, [r7, #14]
 8008e76:	7bbc      	ldrb	r4, [r7, #14]
 8008e78:	6838      	ldr	r0, [r7, #0]
 8008e7a:	f7fc fd81 	bl	8005980 <strlen>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	429c      	cmp	r4, r3
 8008e82:	d3e9      	bcc.n	8008e58 <CheckString+0x14>
		}
	}
	return ReturnValue;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd90      	pop	{r4, r7, pc}
	...

08008e90 <MX_USART3_UART_9600_Init>:

void MX_USART3_UART_9600_Init(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008e94:	4b11      	ldr	r3, [pc, #68]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008e96:	4a12      	ldr	r2, [pc, #72]	; (8008ee0 <MX_USART3_UART_9600_Init+0x50>)
 8008e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8008e9a:	4b10      	ldr	r3, [pc, #64]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008e9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008ea2:	4b0e      	ldr	r3, [pc, #56]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008eae:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008eb4:	4b09      	ldr	r3, [pc, #36]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008eb6:	220c      	movs	r2, #12
 8008eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008eba:	4b08      	ldr	r3, [pc, #32]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008ec6:	4805      	ldr	r0, [pc, #20]	; (8008edc <MX_USART3_UART_9600_Init+0x4c>)
 8008ec8:	f00a fa6e 	bl	80133a8 <HAL_UART_Init>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <MX_USART3_UART_9600_Init+0x46>
  {
    Error_Handler();
 8008ed2:	f000 f93d 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008ed6:	bf00      	nop
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	2000088c 	.word	0x2000088c
 8008ee0:	40004800 	.word	0x40004800

08008ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Initialized = 0;
 8008eea:	4b60      	ldr	r3, [pc, #384]	; (800906c <main+0x188>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
  SCB->VTOR = FLA_MAINADDRESS; /* Vector Table Relocation to partition 2 in Internal FLASH */
 8008ef0:	4b5f      	ldr	r3, [pc, #380]	; (8009070 <main+0x18c>)
 8008ef2:	4a60      	ldr	r2, [pc, #384]	; (8009074 <main+0x190>)
 8008ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = 1;
 8008ef6:	4b60      	ldr	r3, [pc, #384]	; (8009078 <main+0x194>)
 8008ef8:	2201      	movs	r2, #1
 8008efa:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8008efc:	b662      	cpsie	i
}
 8008efe:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008f00:	f006 f824 	bl	800ef4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008f04:	f000 f8d4 	bl	80090b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008f08:	f7ff fd2e 	bl	8008968 <MX_GPIO_Init>
  MX_DMA_Init();
 8008f0c:	f7ff fce6 	bl	80088dc <MX_DMA_Init>
  MX_ADC_Init();
 8008f10:	f7fd fed8 	bl	8006cc4 <MX_ADC_Init>
  MX_SPI2_Init();
 8008f14:	f000 fc7c 	bl	8009810 <MX_SPI2_Init>
  MX_TIM3_Init();
 8008f18:	f000 fe72 	bl	8009c00 <MX_TIM3_Init>
  MX_SPI1_Init();
 8008f1c:	f000 fc42 	bl	80097a4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8008f20:	f000 feec 	bl	8009cfc <MX_TIM4_Init>
  MX_TIM2_Init();
 8008f24:	f000 fe18 	bl	8009b58 <MX_TIM2_Init>
  MX_TIM10_Init();
 8008f28:	f000 ff8a 	bl	8009e40 <MX_TIM10_Init>
  MX_TIM11_Init();
 8008f2c:	f000 ffe6 	bl	8009efc <MX_TIM11_Init>
  MX_TIM5_Init();
 8008f30:	f000 ff38 	bl	8009da4 <MX_TIM5_Init>
  MX_IWDG_Init();
 8008f34:	f7ff ff6c 	bl	8008e10 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  MX_USART2_UART_Init();
 8008f38:	f001 f99e 	bl	800a278 <MX_USART2_UART_Init>
#ifdef CHECKHC06
  //Init USART3 at 9600 baud
  MX_USART3_UART_9600_Init();
 8008f3c:	f7ff ffa8 	bl	8008e90 <MX_USART3_UART_9600_Init>
  SER_Init();
 8008f40:	f004 fb20 	bl	800d584 <SER_Init>
  AT_Flag=1; //So the return data is not deleted
 8008f44:	4b4d      	ldr	r3, [pc, #308]	; (800907c <main+0x198>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	701a      	strb	r2, [r3, #0]
  AT_Counter = 0; //Return data counter
 8008f4a:	4b4d      	ldr	r3, [pc, #308]	; (8009080 <main+0x19c>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	701a      	strb	r2, [r3, #0]
  char* Test = "AT";
 8008f50:	4b4c      	ldr	r3, [pc, #304]	; (8009084 <main+0x1a0>)
 8008f52:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit (&huart3,(uint8_t*)Test, strlen(Test) , 100);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7fc fd13 	bl	8005980 <strlen>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	2364      	movs	r3, #100	; 0x64
 8008f60:	68f9      	ldr	r1, [r7, #12]
 8008f62:	4849      	ldr	r0, [pc, #292]	; (8009088 <main+0x1a4>)
 8008f64:	f00a fa9c 	bl	80134a0 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8008f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f6c:	f006 f85c 	bl	800f028 <HAL_Delay>
  if (CheckString(Message.RxData, "OK") == 1) //HC06 is responding with OK, so it is set at 9600 baud
 8008f70:	4946      	ldr	r1, [pc, #280]	; (800908c <main+0x1a8>)
 8008f72:	4847      	ldr	r0, [pc, #284]	; (8009090 <main+0x1ac>)
 8008f74:	f7ff ff66 	bl	8008e44 <CheckString>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d11b      	bne.n	8008fb6 <main+0xd2>
  {
	AT_Counter = 0;
 8008f7e:	4b40      	ldr	r3, [pc, #256]	; (8009080 <main+0x19c>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	701a      	strb	r2, [r3, #0]
	//Send command to set to 115200 baud
	char* Test2 = "AT+BAUD8";
 8008f84:	4b43      	ldr	r3, [pc, #268]	; (8009094 <main+0x1b0>)
 8008f86:	60bb      	str	r3, [r7, #8]
	memset(Message.RxData, 0, sizeof(Message.RxData));
 8008f88:	22ff      	movs	r2, #255	; 0xff
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	4840      	ldr	r0, [pc, #256]	; (8009090 <main+0x1ac>)
 8008f8e:	f00b f953 	bl	8014238 <memset>
	HAL_UART_Transmit (&huart3,(uint8_t*)Test2, strlen(Test2) , 100);
 8008f92:	68b8      	ldr	r0, [r7, #8]
 8008f94:	f7fc fcf4 	bl	8005980 <strlen>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	2364      	movs	r3, #100	; 0x64
 8008f9e:	68b9      	ldr	r1, [r7, #8]
 8008fa0:	4839      	ldr	r0, [pc, #228]	; (8009088 <main+0x1a4>)
 8008fa2:	f00a fa7d 	bl	80134a0 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8008fa6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008faa:	f006 f83d 	bl	800f028 <HAL_Delay>
	if (CheckString(Message.RxData, "OK115200") == 1)
 8008fae:	493a      	ldr	r1, [pc, #232]	; (8009098 <main+0x1b4>)
 8008fb0:	4837      	ldr	r0, [pc, #220]	; (8009090 <main+0x1ac>)
 8008fb2:	f7ff ff47 	bl	8008e44 <CheckString>
		//Do something with the result --> Send to debug port
	}
  }

  //Set USART3 to 115200 baud
  HAL_UART_DeInit(&huart3);
 8008fb6:	4834      	ldr	r0, [pc, #208]	; (8009088 <main+0x1a4>)
 8008fb8:	f00a fa43 	bl	8013442 <HAL_UART_DeInit>
  HAL_Delay(1000);
 8008fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008fc0:	f006 f832 	bl	800f028 <HAL_Delay>
#endif
  MX_USART3_UART_Init();
 8008fc4:	f001 f982 	bl	800a2cc <MX_USART3_UART_Init>
  SER_Init(); //Init (again) to start DMA receive
 8008fc8:	f004 fadc 	bl	800d584 <SER_Init>
#ifdef CHECKHC06
  //Set the module name to "nunc-grinder"
  AT_Counter = 0;
 8008fcc:	4b2c      	ldr	r3, [pc, #176]	; (8009080 <main+0x19c>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
  memset(Message.RxData, 0, sizeof(Message.RxData));
 8008fd2:	22ff      	movs	r2, #255	; 0xff
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	482e      	ldr	r0, [pc, #184]	; (8009090 <main+0x1ac>)
 8008fd8:	f00b f92e 	bl	8014238 <memset>
  //char* Test3 = "AT+NAMEnunc-grinder";
  char* Test3 = "AT+NAMEnunc-grinder";
 8008fdc:	4b2f      	ldr	r3, [pc, #188]	; (800909c <main+0x1b8>)
 8008fde:	607b      	str	r3, [r7, #4]
  //char* Test3 = "AT+BAUD4"; uncomment to set to 9600 baud
  HAL_UART_Transmit (&huart3,(uint8_t*)Test3, strlen(Test3) , 100);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7fc fccd 	bl	8005980 <strlen>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	2364      	movs	r3, #100	; 0x64
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	4826      	ldr	r0, [pc, #152]	; (8009088 <main+0x1a4>)
 8008ff0:	f00a fa56 	bl	80134a0 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8008ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ff8:	f006 f816 	bl	800f028 <HAL_Delay>
  if (CheckString(Message.RxData, "OKsetname") == 1)
 8008ffc:	4928      	ldr	r1, [pc, #160]	; (80090a0 <main+0x1bc>)
 8008ffe:	4824      	ldr	r0, [pc, #144]	; (8009090 <main+0x1ac>)
 8009000:	f7ff ff20 	bl	8008e44 <CheckString>
  {
	  //Do something with the result --> Send to debug port
  }
  memset(Message.RxData, 0, sizeof(Message.RxData));
 8009004:	22ff      	movs	r2, #255	; 0xff
 8009006:	2100      	movs	r1, #0
 8009008:	4821      	ldr	r0, [pc, #132]	; (8009090 <main+0x1ac>)
 800900a:	f00b f915 	bl	8014238 <memset>
  Message.RxBuffer = 0;
 800900e:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <main+0x1c0>)
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
  Message.Counter = 0;
 8009014:	4b23      	ldr	r3, [pc, #140]	; (80090a4 <main+0x1c0>)
 8009016:	2200      	movs	r2, #0
 8009018:	80da      	strh	r2, [r3, #6]
  AT_Flag=0; //Clear the flag for normal use
 800901a:	4b18      	ldr	r3, [pc, #96]	; (800907c <main+0x198>)
 800901c:	2200      	movs	r2, #0
 800901e:	701a      	strb	r2, [r3, #0]
#endif
  MX_ADC_Init();
 8009020:	f7fd fe50 	bl	8006cc4 <MX_ADC_Init>
  WRK_Init();
 8009024:	f001 fad2 	bl	800a5cc <WRK_Init>
  REC_Init();
 8009028:	f000 f8ac 	bl	8009184 <REC_Init>
  GND_Init();
 800902c:	f7ff fd6a 	bl	8008b04 <GND_Init>
  ADJ_Init();
 8009030:	f7fe f8fe 	bl	8007230 <ADJ_Init>
  SCL_Init();
 8009034:	f000 fb54 	bl	80096e0 <SCL_Init>
  CON_Init();
 8009038:	f7ff fb68 	bl	800870c <CON_Init>
  HOP_Init();
 800903c:	f7ff fe52 	bl	8008ce4 <HOP_Init>
  ANA_Init();
 8009040:	f7fe fc50 	bl	80078e4 <ANA_Init>
  LED_Init();
 8009044:	f003 fa40 	bl	800c4c8 <LED_Init>
  FLA_Init();
 8009048:	f002 fd44 	bl	800bad4 <FLA_Init>
  //HAL_TIM_Base_Start_IT(&htim6);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Initialized = 1;
 800904c:	4b07      	ldr	r3, [pc, #28]	; (800906c <main+0x188>)
 800904e:	2201      	movs	r2, #1
 8009050:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8009052:	4815      	ldr	r0, [pc, #84]	; (80090a8 <main+0x1c4>)
 8009054:	f007 fe6c 	bl	8010d30 <HAL_IWDG_Refresh>
	if (Flg1ms == 1)
 8009058:	4b14      	ldr	r3, [pc, #80]	; (80090ac <main+0x1c8>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d1f8      	bne.n	8009052 <main+0x16e>
	{
		Flg1ms = 0;
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <main+0x1c8>)
 8009062:	2200      	movs	r2, #0
 8009064:	701a      	strb	r2, [r3, #0]
		WRK_HandleTickTime();
 8009066:	f002 f899 	bl	800b19c <WRK_HandleTickTime>
	HAL_IWDG_Refresh(&hiwdg);
 800906a:	e7f2      	b.n	8009052 <main+0x16e>
 800906c:	2000096c 	.word	0x2000096c
 8009070:	e000ed00 	.word	0xe000ed00
 8009074:	08005800 	.word	0x08005800
 8009078:	e000e010 	.word	0xe000e010
 800907c:	20000594 	.word	0x20000594
 8009080:	20000595 	.word	0x20000595
 8009084:	08014638 	.word	0x08014638
 8009088:	2000088c 	.word	0x2000088c
 800908c:	0801463c 	.word	0x0801463c
 8009090:	20000d15 	.word	0x20000d15
 8009094:	08014640 	.word	0x08014640
 8009098:	0801464c 	.word	0x0801464c
 800909c:	08014658 	.word	0x08014658
 80090a0:	0801466c 	.word	0x0801466c
 80090a4:	20000d0c 	.word	0x20000d0c
 80090a8:	20000588 	.word	0x20000588
 80090ac:	20000958 	.word	0x20000958

080090b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b092      	sub	sp, #72	; 0x48
 80090b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80090b6:	f107 0314 	add.w	r3, r7, #20
 80090ba:	2234      	movs	r2, #52	; 0x34
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f00b f8ba 	bl	8014238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80090c4:	463b      	mov	r3, r7
 80090c6:	2200      	movs	r2, #0
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	605a      	str	r2, [r3, #4]
 80090cc:	609a      	str	r2, [r3, #8]
 80090ce:	60da      	str	r2, [r3, #12]
 80090d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80090d2:	4b1e      	ldr	r3, [pc, #120]	; (800914c <SystemClock_Config+0x9c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80090da:	4a1c      	ldr	r2, [pc, #112]	; (800914c <SystemClock_Config+0x9c>)
 80090dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80090e0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80090e2:	230a      	movs	r3, #10
 80090e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80090e6:	2301      	movs	r3, #1
 80090e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80090ea:	2310      	movs	r3, #16
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80090ee:	2301      	movs	r3, #1
 80090f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80090f2:	2302      	movs	r3, #2
 80090f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80090fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8009100:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009104:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009106:	f107 0314 	add.w	r3, r7, #20
 800910a:	4618      	mov	r0, r3
 800910c:	f007 fe20 	bl	8010d50 <HAL_RCC_OscConfig>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8009116:	f000 f81b 	bl	8009150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800911a:	230f      	movs	r3, #15
 800911c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800911e:	2303      	movs	r3, #3
 8009120:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009122:	2300      	movs	r3, #0
 8009124:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800912e:	463b      	mov	r3, r7
 8009130:	2101      	movs	r1, #1
 8009132:	4618      	mov	r0, r3
 8009134:	f008 f93c 	bl	80113b0 <HAL_RCC_ClockConfig>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800913e:	f000 f807 	bl	8009150 <Error_Handler>
  }
}
 8009142:	bf00      	nop
 8009144:	3748      	adds	r7, #72	; 0x48
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	40007000 	.word	0x40007000

08009150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009154:	b672      	cpsid	i
}
 8009156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009158:	e7fe      	b.n	8009158 <Error_Handler+0x8>
	...

0800915c <REC_GetRequiredWeight>:
//-----------------------------------------------------------------------------
//! \brief      Returns the grind weight
//! \details    Returns the grind weight
//! \param[out]	uint16_t GrindWeight
uint16_t REC_GetRequiredWeight (void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
	return gRecipe.RecipeBlocks[0].GrindWeight;
 8009160:	4b02      	ldr	r3, [pc, #8]	; (800916c <REC_GetRequiredWeight+0x10>)
 8009162:	889b      	ldrh	r3, [r3, #4]
}
 8009164:	4618      	mov	r0, r3
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr
 800916c:	20000598 	.word	0x20000598

08009170 <REC_GetGrindSize>:
//-----------------------------------------------------------------------------
//! \brief      Returns the grind size
//! \details    Returns the grind size
//! \param[out]	uint16_t GrindSize
uint16_t REC_GetGrindSize (void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
	return gRecipe.RecipeBlocks[0].GrindSize;
 8009174:	4b02      	ldr	r3, [pc, #8]	; (8009180 <REC_GetGrindSize+0x10>)
 8009176:	88db      	ldrh	r3, [r3, #6]
}
 8009178:	4618      	mov	r0, r3
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr
 8009180:	20000598 	.word	0x20000598

08009184 <REC_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initiates the recipe unit
//! \details    Fills default recipe values
//! \param      None
void REC_Init(void)
{
 8009184:	b480      	push	{r7}
 8009186:	af00      	add	r7, sp, #0
	if (DUMMYMODEGRINDER)
 8009188:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <REC_Init+0x34>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00f      	beq.n	80091b0 <REC_Init+0x2c>
	{
		gRecipe.RecipeBlocks[0].GrindWeight = 120;
 8009190:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <REC_Init+0x38>)
 8009192:	2278      	movs	r2, #120	; 0x78
 8009194:	809a      	strh	r2, [r3, #4]
		gRecipe.RecipeBlocks[0].GrindSize = 350;
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <REC_Init+0x38>)
 8009198:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800919c:	80da      	strh	r2, [r3, #6]
		gRecipe.RecipeBlocks[0].ShutterTime = 225;
 800919e:	4b07      	ldr	r3, [pc, #28]	; (80091bc <REC_Init+0x38>)
 80091a0:	22e1      	movs	r2, #225	; 0xe1
 80091a2:	815a      	strh	r2, [r3, #10]
		gRecipe.Blocks = 1;
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <REC_Init+0x38>)
 80091a6:	2201      	movs	r2, #1
 80091a8:	709a      	strb	r2, [r3, #2]
		gRecipe.Valid = 1;
 80091aa:	4b04      	ldr	r3, [pc, #16]	; (80091bc <REC_Init+0x38>)
 80091ac:	2201      	movs	r2, #1
 80091ae:	701a      	strb	r2, [r3, #0]
	}
}
 80091b0:	bf00      	nop
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bc80      	pop	{r7}
 80091b6:	4770      	bx	lr
 80091b8:	2000096f 	.word	0x2000096f
 80091bc:	20000598 	.word	0x20000598

080091c0 <REC_ClearRecipe>:
//-----------------------------------------------------------------------------
//! \brief      clears the recipe
//! \details    Resets all values of the recipe
//! \params		None
void REC_ClearRecipe(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
	gRecipe.RecipeBlocks[0].GrindWeight = 0;
 80091c4:	4b09      	ldr	r3, [pc, #36]	; (80091ec <REC_ClearRecipe+0x2c>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	809a      	strh	r2, [r3, #4]
	gRecipe.RecipeBlocks[0].GrindSize = 0;
 80091ca:	4b08      	ldr	r3, [pc, #32]	; (80091ec <REC_ClearRecipe+0x2c>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	80da      	strh	r2, [r3, #6]
	gRecipe.RecipeBlocks[0].ShutterTime = 0;
 80091d0:	4b06      	ldr	r3, [pc, #24]	; (80091ec <REC_ClearRecipe+0x2c>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	815a      	strh	r2, [r3, #10]
	gRecipe.Valid = 0;
 80091d6:	4b05      	ldr	r3, [pc, #20]	; (80091ec <REC_ClearRecipe+0x2c>)
 80091d8:	2200      	movs	r2, #0
 80091da:	701a      	strb	r2, [r3, #0]
	gRecipe.Blocks = 0;
 80091dc:	4b03      	ldr	r3, [pc, #12]	; (80091ec <REC_ClearRecipe+0x2c>)
 80091de:	2200      	movs	r2, #0
 80091e0:	709a      	strb	r2, [r3, #2]
}
 80091e2:	bf00      	nop
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bc80      	pop	{r7}
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20000598 	.word	0x20000598

080091f0 <clrc663_SPI_transfer>:
//! \details    Initiates the SPI transfer
//! \param[in]	tx,	Transmit buffer
//! \param[in]	rx,	Receive buffer
//! \param[in]	len, length of buffer
void clrc663_SPI_transfer(const uint8_t *tx, uint8_t *rx, uint16_t len)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	4613      	mov	r3, r2
 80091fc:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi2, (unsigned char*) tx, (unsigned char*) rx,
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009204:	9200      	str	r2, [sp, #0]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	68f9      	ldr	r1, [r7, #12]
 800920a:	4803      	ldr	r0, [pc, #12]	; (8009218 <clrc663_SPI_transfer+0x28>)
 800920c:	f008 fc1f 	bl	8011a4e <HAL_SPI_TransmitReceive>
			len, 500);
}
 8009210:	bf00      	nop
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20000670 	.word	0x20000670

0800921c <clrc663_SPI_select>:
//-----------------------------------------------------------------------------
//! \brief      Selects the SPI
//! \details    Switches NSS low
//! \params		None
void clrc663_SPI_select()
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8009220:	2200      	movs	r2, #0
 8009222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009226:	4802      	ldr	r0, [pc, #8]	; (8009230 <clrc663_SPI_select+0x14>)
 8009228:	f007 fd05 	bl	8010c36 <HAL_GPIO_WritePin>
}
 800922c:	bf00      	nop
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40020400 	.word	0x40020400

08009234 <clrc663_SPI_unselect>:
//-----------------------------------------------------------------------------
//! \brief      Selects the SPI
//! \details    Switches NSS high
//! \params		None
void clrc663_SPI_unselect()
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8009238:	2201      	movs	r2, #1
 800923a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800923e:	4802      	ldr	r0, [pc, #8]	; (8009248 <clrc663_SPI_unselect+0x14>)
 8009240:	f007 fcf9 	bl	8010c36 <HAL_GPIO_WritePin>
}
 8009244:	bf00      	nop
 8009246:	bd80      	pop	{r7, pc}
 8009248:	40020400 	.word	0x40020400

0800924c <RFID_ResetFrontEnd>:
//-----------------------------------------------------------------------------
//! \brief      Resets the NFC chip
//! \details    Reset routine
//! \params		None
void RFID_ResetFrontEnd(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8009250:	2201      	movs	r2, #1
 8009252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009256:	4810      	ldr	r0, [pc, #64]	; (8009298 <RFID_ResetFrontEnd+0x4c>)
 8009258:	f007 fced 	bl	8010c36 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800925c:	200a      	movs	r0, #10
 800925e:	f005 fee3 	bl	800f028 <HAL_Delay>
	HAL_GPIO_WritePin(RFID_RES_GPIO_Port, RFID_RES_Pin, GPIO_PIN_SET);
 8009262:	2201      	movs	r2, #1
 8009264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009268:	480c      	ldr	r0, [pc, #48]	; (800929c <RFID_ResetFrontEnd+0x50>)
 800926a:	f007 fce4 	bl	8010c36 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800926e:	200a      	movs	r0, #10
 8009270:	f005 feda 	bl	800f028 <HAL_Delay>
	HAL_GPIO_WritePin(RFID_RES_GPIO_Port, RFID_RES_Pin, GPIO_PIN_RESET);
 8009274:	2200      	movs	r2, #0
 8009276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800927a:	4808      	ldr	r0, [pc, #32]	; (800929c <RFID_ResetFrontEnd+0x50>)
 800927c:	f007 fcdb 	bl	8010c36 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009280:	200a      	movs	r0, #10
 8009282:	f005 fed1 	bl	800f028 <HAL_Delay>
	clrc663_cmd_idle();      //abort any ongoing command on reader
 8009286:	f7fe fd83 	bl	8007d90 <clrc663_cmd_idle>
	clrc663_flush_fifo();    //flush FIFO (MOSI: 0x00 0x00)
 800928a:	f7fe fd91 	bl	8007db0 <clrc663_flush_fifo>
	clrc663_cmd_softreset(); //soft reset
 800928e:	f7fe fd87 	bl	8007da0 <clrc663_cmd_softreset>
}
 8009292:	bf00      	nop
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	40020400 	.word	0x40020400
 800929c:	40020800 	.word	0x40020800

080092a0 <RFID_Init14443>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the NFC chip
//! \details    Init routine
//! \params		None
unsigned char RFID_Init14443(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
	uint8_t ProtocolNr[] = { 0x00, 0x00 };
 80092a6:	2300      	movs	r3, #0
 80092a8:	80bb      	strh	r3, [r7, #4]

	clrc663_cmd_load_protocol(ProtocolNr[0], ProtocolNr[0]);
 80092aa:	793b      	ldrb	r3, [r7, #4]
 80092ac:	793a      	ldrb	r2, [r7, #4]
 80092ae:	4611      	mov	r1, r2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe fd3e 	bl	8007d32 <clrc663_cmd_load_protocol>
	HAL_Delay(10);
 80092b6:	200a      	movs	r0, #10
 80092b8:	f005 feb6 	bl	800f028 <HAL_Delay>
	clrc663_flush_fifo();
 80092bc:	f7fe fd78 	bl	8007db0 <clrc663_flush_fifo>
	unsigned char clrc663_errorReg = clrc663_read_reg(CLRC663_REG_ERROR);
 80092c0:	200a      	movs	r0, #10
 80092c2:	f7fe fc73 	bl	8007bac <clrc663_read_reg>
 80092c6:	4603      	mov	r3, r0
 80092c8:	71fb      	strb	r3, [r7, #7]
	return clrc663_errorReg;
 80092ca:	79fb      	ldrb	r3, [r7, #7]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <RFID_Field>:
//-----------------------------------------------------------------------------
//! \brief      Sets the antenna
//! \details    Switches field on or off
//! \param[in]	OnOff, 0 = off, 1 = on
void RFID_Field(unsigned char OnOff)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	71fb      	strb	r3, [r7, #7]
	if (OnOff)
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d004      	beq.n	80092ee <RFID_Field+0x1a>
	{
		clrc663_write_reg(CLRC663_REG_DRVMOD, 0x89);
 80092e4:	2189      	movs	r1, #137	; 0x89
 80092e6:	2028      	movs	r0, #40	; 0x28
 80092e8:	f7fe fc82 	bl	8007bf0 <clrc663_write_reg>
	}
	else
	{
		clrc663_write_reg(CLRC663_REG_DRVMOD, 0x81);
	}
}
 80092ec:	e003      	b.n	80092f6 <RFID_Field+0x22>
		clrc663_write_reg(CLRC663_REG_DRVMOD, 0x81);
 80092ee:	2181      	movs	r1, #129	; 0x81
 80092f0:	2028      	movs	r0, #40	; 0x28
 80092f2:	f7fe fc7d 	bl	8007bf0 <clrc663_write_reg>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <RFID_GetCardMemory>:
}
//-----------------------------------------------------------------------------
//! \brief      Retrieves data from tag
//! \details    Retrieves data and stores it
//! \param[in]	*Data, data container
unsigned char RFID_GetCardMemory(unsigned char *Data) {
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	unsigned char UID[10];
	if (clrc663_iso14443a_REQA()) {
 8009308:	f7fe fde7 	bl	8007eda <clrc663_iso14443a_REQA>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 80a1 	beq.w	8009456 <RFID_GetCardMemory+0x156>
		//Card present:

		if (clrc663_iso14443a_select(UID))
 8009314:	f107 030c 	add.w	r3, r7, #12
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fe64 	bl	8007fe6 <clrc663_iso14443a_select>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 8096 	beq.w	8009452 <RFID_GetCardMemory+0x152>
		{
			//Card found - check if NTAG216
			CON.TagVersion = NTAG_GetVersion();
 8009326:	f7ff f8ee 	bl	8008506 <NTAG_GetVersion>
 800932a:	4603      	mov	r3, r0
 800932c:	461a      	mov	r2, r3
 800932e:	4b54      	ldr	r3, [pc, #336]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009330:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
			if (CON.TagVersion==0x13)
 8009334:	4b52      	ldr	r3, [pc, #328]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009336:	f893 3381 	ldrb.w	r3, [r3, #897]	; 0x381
 800933a:	2b13      	cmp	r3, #19
 800933c:	d120      	bne.n	8009380 <RFID_GetCardMemory+0x80>
			{
				//NTAG216 -> Read Complete memory (888/16 = 55.5 -> 56 ignore last 8 bytes
				for (int i = 0; i < 56; i++) {
 800933e:	2300      	movs	r3, #0
 8009340:	61fb      	str	r3, [r7, #28]
 8009342:	e018      	b.n	8009376 <RFID_GetCardMemory+0x76>
					if (!NTAG_ReadBlock(4 + 4 * i, &Data[16 * i]))
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3301      	adds	r3, #1
 8009348:	b2db      	uxtb	r3, r3
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	b2da      	uxtb	r2, r3
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	011b      	lsls	r3, r3, #4
 8009352:	4619      	mov	r1, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	440b      	add	r3, r1
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f7ff f959 	bl	8008612 <NTAG_ReadBlock>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <RFID_GetCardMemory+0x6a>
					{
						return 0;
 8009366:	2300      	movs	r3, #0
 8009368:	e085      	b.n	8009476 <RFID_GetCardMemory+0x176>
					CON.CardMemory[32] = 'R';
					CON.CardMemory[33] = 'o';
					CON.CardMemory[34] = 'a';
					CON.CardMemory[35] = 's';
					CON.CardMemory[36] = 't';*/
					CON.Status = cPRESENT;
 800936a:	4b45      	ldr	r3, [pc, #276]	; (8009480 <RFID_GetCardMemory+0x180>)
 800936c:	2203      	movs	r2, #3
 800936e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 56; i++) {
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	3301      	adds	r3, #1
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	2b37      	cmp	r3, #55	; 0x37
 800937a:	dde3      	ble.n	8009344 <RFID_GetCardMemory+0x44>
				}
				return 0x13;
 800937c:	2313      	movs	r3, #19
 800937e:	e07a      	b.n	8009476 <RFID_GetCardMemory+0x176>
			}
			else if (CON.TagVersion == 0x11)
 8009380:	4b3f      	ldr	r3, [pc, #252]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009382:	f893 3381 	ldrb.w	r3, [r3, #897]	; 0x381
 8009386:	2b11      	cmp	r3, #17
 8009388:	d161      	bne.n	800944e <RFID_GetCardMemory+0x14e>
			{
				//NTAG215 -> Read Complete memory (504/16 = 31.5 -> 32. Ignore last 8 bytes
				for (int i = 0; i < 32; i++)
 800938a:	2300      	movs	r3, #0
 800938c:	61bb      	str	r3, [r7, #24]
 800938e:	e059      	b.n	8009444 <RFID_GetCardMemory+0x144>
				{
					if (!NTAG_ReadBlock(4 + 4 * i, &Data[16 * i]))
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	3301      	adds	r3, #1
 8009394:	b2db      	uxtb	r3, r3
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	b2da      	uxtb	r2, r3
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	4619      	mov	r1, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	440b      	add	r3, r1
 80093a4:	4619      	mov	r1, r3
 80093a6:	4610      	mov	r0, r2
 80093a8:	f7ff f933 	bl	8008612 <NTAG_ReadBlock>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <RFID_GetCardMemory+0xb6>
					{
						return 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e05f      	b.n	8009476 <RFID_GetCardMemory+0x176>
					}
					//Temporary until tags are written correctly
					if ((CON.CardMemory[25]>0)&&(CON.CardMemory[25] > 48)) CON.CardMemory[25] -= 48;
 80093b6:	4b32      	ldr	r3, [pc, #200]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093b8:	7e9b      	ldrb	r3, [r3, #26]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <RFID_GetCardMemory+0xd2>
 80093be:	4b30      	ldr	r3, [pc, #192]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093c0:	7e9b      	ldrb	r3, [r3, #26]
 80093c2:	2b30      	cmp	r3, #48	; 0x30
 80093c4:	d905      	bls.n	80093d2 <RFID_GetCardMemory+0xd2>
 80093c6:	4b2e      	ldr	r3, [pc, #184]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093c8:	7e9b      	ldrb	r3, [r3, #26]
 80093ca:	3b30      	subs	r3, #48	; 0x30
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	4b2c      	ldr	r3, [pc, #176]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093d0:	769a      	strb	r2, [r3, #26]
					CON.CardMemory[21] = 42;
 80093d2:	4b2b      	ldr	r3, [pc, #172]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093d4:	222a      	movs	r2, #42	; 0x2a
 80093d6:	759a      	strb	r2, [r3, #22]
					CON.CardMemory[22]= 0;
 80093d8:	4b29      	ldr	r3, [pc, #164]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093da:	2200      	movs	r2, #0
 80093dc:	75da      	strb	r2, [r3, #23]
					CON.CardMemory[23]= 0;
 80093de:	4b28      	ldr	r3, [pc, #160]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	761a      	strb	r2, [r3, #24]
					CON.CardMemory[24]= 0;
 80093e4:	4b26      	ldr	r3, [pc, #152]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	765a      	strb	r2, [r3, #25]
						//CardMemory[25]= 1;
					CON.CardMemory[26] = 'F';
 80093ea:	4b25      	ldr	r3, [pc, #148]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093ec:	2246      	movs	r2, #70	; 0x46
 80093ee:	76da      	strb	r2, [r3, #27]
					CON.CardMemory[27] = 'a';
 80093f0:	4b23      	ldr	r3, [pc, #140]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093f2:	2261      	movs	r2, #97	; 0x61
 80093f4:	771a      	strb	r2, [r3, #28]
					CON.CardMemory[28] = 'n';
 80093f6:	4b22      	ldr	r3, [pc, #136]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093f8:	226e      	movs	r2, #110	; 0x6e
 80093fa:	775a      	strb	r2, [r3, #29]
					CON.CardMemory[29] = 'c';
 80093fc:	4b20      	ldr	r3, [pc, #128]	; (8009480 <RFID_GetCardMemory+0x180>)
 80093fe:	2263      	movs	r2, #99	; 0x63
 8009400:	779a      	strb	r2, [r3, #30]
					CON.CardMemory[30] = 'y';
 8009402:	4b1f      	ldr	r3, [pc, #124]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009404:	2279      	movs	r2, #121	; 0x79
 8009406:	77da      	strb	r2, [r3, #31]
					CON.CardMemory[31] = ' ';
 8009408:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <RFID_GetCardMemory+0x180>)
 800940a:	2220      	movs	r2, #32
 800940c:	f883 2020 	strb.w	r2, [r3, #32]
					CON.CardMemory[32] = 'R';
 8009410:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009412:	2252      	movs	r2, #82	; 0x52
 8009414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					CON.CardMemory[33] = 'o';
 8009418:	4b19      	ldr	r3, [pc, #100]	; (8009480 <RFID_GetCardMemory+0x180>)
 800941a:	226f      	movs	r2, #111	; 0x6f
 800941c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
					CON.CardMemory[34] = 'a';
 8009420:	4b17      	ldr	r3, [pc, #92]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009422:	2261      	movs	r2, #97	; 0x61
 8009424:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					CON.CardMemory[35] = 's';
 8009428:	4b15      	ldr	r3, [pc, #84]	; (8009480 <RFID_GetCardMemory+0x180>)
 800942a:	2273      	movs	r2, #115	; 0x73
 800942c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					CON.CardMemory[36] = 't';
 8009430:	4b13      	ldr	r3, [pc, #76]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009432:	2274      	movs	r2, #116	; 0x74
 8009434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					CON.Status = cPRESENT;
 8009438:	4b11      	ldr	r3, [pc, #68]	; (8009480 <RFID_GetCardMemory+0x180>)
 800943a:	2203      	movs	r2, #3
 800943c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 32; i++)
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	3301      	adds	r3, #1
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	2b1f      	cmp	r3, #31
 8009448:	dda2      	ble.n	8009390 <RFID_GetCardMemory+0x90>
				}
				return 0x11;
 800944a:	2311      	movs	r3, #17
 800944c:	e013      	b.n	8009476 <RFID_GetCardMemory+0x176>
			}
			else
			{
				return 0;
 800944e:	2300      	movs	r3, #0
 8009450:	e011      	b.n	8009476 <RFID_GetCardMemory+0x176>
			}
		}
		else
		{
			return 0;
 8009452:	2300      	movs	r3, #0
 8009454:	e00f      	b.n	8009476 <RFID_GetCardMemory+0x176>
		}
	}
	else
	{
		CON.Status = cNOTPRESENT;
 8009456:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009458:	2202      	movs	r2, #2
 800945a:	701a      	strb	r2, [r3, #0]
		REC_ClearRecipe();
 800945c:	f7ff feb0 	bl	80091c0 <REC_ClearRecipe>
		CON.TagVersion = 0;
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <RFID_GetCardMemory+0x180>)
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
		memset(CON.CardMemory,0,56*16); //Clear the tag memory
 8009468:	f44f 7260 	mov.w	r2, #896	; 0x380
 800946c:	2100      	movs	r1, #0
 800946e:	4805      	ldr	r0, [pc, #20]	; (8009484 <RFID_GetCardMemory+0x184>)
 8009470:	f00a fee2 	bl	8014238 <memset>
		return 0;
 8009474:	2300      	movs	r3, #0
	}
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200001d4 	.word	0x200001d4
 8009484:	200001d5 	.word	0x200001d5

08009488 <SCL_SetParameter>:
  Description:  	Used to set the scale parameters and store variables in EEprom
  Parameters:   	uint8_t newAddress, uint16_t newValue
  Return value: 	None
***************************************************************/
void SCL_SetParameter (uint8_t newAddress, uint16_t newValue)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	460a      	mov	r2, r1
 8009492:	71fb      	strb	r3, [r7, #7]
 8009494:	4613      	mov	r3, r2
 8009496:	80bb      	strh	r3, [r7, #4]
	switch (newAddress)
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	2b14      	cmp	r3, #20
 800949c:	d103      	bne.n	80094a6 <SCL_SetParameter+0x1e>
	{
		case SCL_STABLETIME:
		{
			SCL.StableTime = newValue;
 800949e:	88bb      	ldrh	r3, [r7, #4]
 80094a0:	4a06      	ldr	r2, [pc, #24]	; (80094bc <SCL_SetParameter+0x34>)
 80094a2:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 80094a4:	e000      	b.n	80094a8 <SCL_SetParameter+0x20>
		}
		default: break;
 80094a6:	bf00      	nop
	}
	EEP_WriteEEPROM (newAddress, newValue);
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	88ba      	ldrh	r2, [r7, #4]
 80094ac:	4611      	mov	r1, r2
 80094ae:	4618      	mov	r0, r3
 80094b0:	f001 ff5e 	bl	800b370 <EEP_WriteEEPROM>
}
 80094b4:	bf00      	nop
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	200005dc 	.word	0x200005dc

080094c0 <SCL_GetWeight>:
//-----------------------------------------------------------------------------
//! \brief      Returns the scale GetWeight value
//! \details    Returns the scale GetWeight value
//! \param[out]	uint16_t GetWeight x0.1g
int32_t SCL_GetWeight (void)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
	uint32_t ReturnValue;
	if (SCL.GetWeight > 0)
 80094c6:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <SCL_GetWeight+0x28>)
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dd02      	ble.n	80094d4 <SCL_GetWeight+0x14>
		ReturnValue = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
 80094d2:	e003      	b.n	80094dc <SCL_GetWeight+0x1c>
	else
		ReturnValue = -SCL.GetWeight;
 80094d4:	4b04      	ldr	r3, [pc, #16]	; (80094e8 <SCL_GetWeight+0x28>)
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	425b      	negs	r3, r3
 80094da:	607b      	str	r3, [r7, #4]
	return ReturnValue;
 80094dc:	687b      	ldr	r3, [r7, #4]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc80      	pop	{r7}
 80094e6:	4770      	bx	lr
 80094e8:	200005dc 	.word	0x200005dc

080094ec <SCL_Measure>:
//-----------------------------------------------------------------------------
//! \brief      Returns the scale measured weight
//! \details    Returns the scale measured weight
//! \param[in]	uint8_t newCycles
void SCL_Measure (uint8_t newCycles)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	71fb      	strb	r3, [r7, #7]
		ReturnValue = (SCL.rawvalue - SCL.offset)/SCL.factor;
		SCL.Stable = 1;
		SCL.GetWeight = ReturnValue;
	}
	*/
	if (DUMMYMODESCALE) return;
 80094f6:	4b26      	ldr	r3, [pc, #152]	; (8009590 <SCL_Measure+0xa4>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d143      	bne.n	8009586 <SCL_Measure+0x9a>
	SCL.rawvalue = 0;
 80094fe:	4b25      	ldr	r3, [pc, #148]	; (8009594 <SCL_Measure+0xa8>)
 8009500:	2200      	movs	r2, #0
 8009502:	621a      	str	r2, [r3, #32]
	SCL.Stable = 0;
 8009504:	4b23      	ldr	r3, [pc, #140]	; (8009594 <SCL_Measure+0xa8>)
 8009506:	2200      	movs	r2, #0
 8009508:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i<newCycles; i++)
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]
 800950e:	e00a      	b.n	8009526 <SCL_Measure+0x3a>
	{
		SCL.rawvalue += SCL_ReadValue();
 8009510:	f000 f842 	bl	8009598 <SCL_ReadValue>
 8009514:	4602      	mov	r2, r0
 8009516:	4b1f      	ldr	r3, [pc, #124]	; (8009594 <SCL_Measure+0xa8>)
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	4413      	add	r3, r2
 800951c:	4a1d      	ldr	r2, [pc, #116]	; (8009594 <SCL_Measure+0xa8>)
 800951e:	6213      	str	r3, [r2, #32]
	for (uint8_t i = 0; i<newCycles; i++)
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	3301      	adds	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
 8009526:	7bfa      	ldrb	r2, [r7, #15]
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	429a      	cmp	r2, r3
 800952c:	d3f0      	bcc.n	8009510 <SCL_Measure+0x24>
	}
	SCL.rawvalue /= newCycles;
 800952e:	4b19      	ldr	r3, [pc, #100]	; (8009594 <SCL_Measure+0xa8>)
 8009530:	6a1a      	ldr	r2, [r3, #32]
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	fb92 f3f3 	sdiv	r3, r2, r3
 8009538:	4a16      	ldr	r2, [pc, #88]	; (8009594 <SCL_Measure+0xa8>)
 800953a:	6213      	str	r3, [r2, #32]
	SCL.GetWeightOld = SCL.GetWeight;
 800953c:	4b15      	ldr	r3, [pc, #84]	; (8009594 <SCL_Measure+0xa8>)
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	4a14      	ldr	r2, [pc, #80]	; (8009594 <SCL_Measure+0xa8>)
 8009542:	6093      	str	r3, [r2, #8]
	SCL.GetWeight = (SCL.rawvalue - SCL.offset)/SCL.factor;
 8009544:	4b13      	ldr	r3, [pc, #76]	; (8009594 <SCL_Measure+0xa8>)
 8009546:	6a1a      	ldr	r2, [r3, #32]
 8009548:	4b12      	ldr	r3, [pc, #72]	; (8009594 <SCL_Measure+0xa8>)
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	4618      	mov	r0, r3
 8009550:	f7fc ff94 	bl	800647c <__aeabi_i2f>
 8009554:	4602      	mov	r2, r0
 8009556:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <SCL_Measure+0xa8>)
 8009558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955a:	4619      	mov	r1, r3
 800955c:	4610      	mov	r0, r2
 800955e:	f7fd f895 	bl	800668c <__aeabi_fdiv>
 8009562:	4603      	mov	r3, r0
 8009564:	4618      	mov	r0, r3
 8009566:	f7fd f9a3 	bl	80068b0 <__aeabi_f2iz>
 800956a:	4603      	mov	r3, r0
 800956c:	4a09      	ldr	r2, [pc, #36]	; (8009594 <SCL_Measure+0xa8>)
 800956e:	6053      	str	r3, [r2, #4]
	SCL.ShotWeight = SCL.GetWeightOld - SCL.GetWeight;
 8009570:	4b08      	ldr	r3, [pc, #32]	; (8009594 <SCL_Measure+0xa8>)
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	4b07      	ldr	r3, [pc, #28]	; (8009594 <SCL_Measure+0xa8>)
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	4a06      	ldr	r2, [pc, #24]	; (8009594 <SCL_Measure+0xa8>)
 800957c:	60d3      	str	r3, [r2, #12]
	SCL.Stable = 1;
 800957e:	4b05      	ldr	r3, [pc, #20]	; (8009594 <SCL_Measure+0xa8>)
 8009580:	2201      	movs	r2, #1
 8009582:	709a      	strb	r2, [r3, #2]
 8009584:	e000      	b.n	8009588 <SCL_Measure+0x9c>
	if (DUMMYMODESCALE) return;
 8009586:	bf00      	nop
}
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000972 	.word	0x20000972
 8009594:	200005dc 	.word	0x200005dc

08009598 <SCL_ReadValue>:
//-----------------------------------------------------------------------------
//! \brief      Retrieves a value from HX711
//! \details    If HX711 is ready, sends a clock signal and reads the value
//! \param      None
int32_t SCL_ReadValue(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
    int32_t buffer = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	607b      	str	r3, [r7, #4]

    if 	(HAL_GPIO_ReadPin(LCDATA_GPIO_Port, LCDATA_Pin)==1)
 80095a2:	2110      	movs	r1, #16
 80095a4:	481d      	ldr	r0, [pc, #116]	; (800961c <SCL_ReadValue+0x84>)
 80095a6:	f007 fb2f 	bl	8010c08 <HAL_GPIO_ReadPin>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d102      	bne.n	80095b6 <SCL_ReadValue+0x1e>
    {
    	return 0xffffffff;
 80095b0:	f04f 33ff 	mov.w	r3, #4294967295
 80095b4:	e02e      	b.n	8009614 <SCL_ReadValue+0x7c>
    }
    for (uint8_t i = 0; i < 24; i++)
 80095b6:	2300      	movs	r3, #0
 80095b8:	70fb      	strb	r3, [r7, #3]
 80095ba:	e019      	b.n	80095f0 <SCL_ReadValue+0x58>
    {
    	HAL_GPIO_WritePin(LCCLK_GPIO_Port, LCCLK_Pin, GPIO_PIN_SET);
 80095bc:	2201      	movs	r2, #1
 80095be:	2120      	movs	r1, #32
 80095c0:	4816      	ldr	r0, [pc, #88]	; (800961c <SCL_ReadValue+0x84>)
 80095c2:	f007 fb38 	bl	8010c36 <HAL_GPIO_WritePin>
        buffer = buffer << 1 ;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	607b      	str	r3, [r7, #4]
        if (HAL_GPIO_ReadPin(LCDATA_GPIO_Port, LCDATA_Pin))
 80095cc:	2110      	movs	r1, #16
 80095ce:	4813      	ldr	r0, [pc, #76]	; (800961c <SCL_ReadValue+0x84>)
 80095d0:	f007 fb1a 	bl	8010c08 <HAL_GPIO_ReadPin>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <SCL_ReadValue+0x48>
        {
            buffer ++;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3301      	adds	r3, #1
 80095de:	607b      	str	r3, [r7, #4]
        }
        HAL_GPIO_WritePin(LCCLK_GPIO_Port, LCCLK_Pin, GPIO_PIN_RESET);
 80095e0:	2200      	movs	r2, #0
 80095e2:	2120      	movs	r1, #32
 80095e4:	480d      	ldr	r0, [pc, #52]	; (800961c <SCL_ReadValue+0x84>)
 80095e6:	f007 fb26 	bl	8010c36 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 24; i++)
 80095ea:	78fb      	ldrb	r3, [r7, #3]
 80095ec:	3301      	adds	r3, #1
 80095ee:	70fb      	strb	r3, [r7, #3]
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	2b17      	cmp	r3, #23
 80095f4:	d9e2      	bls.n	80095bc <SCL_ReadValue+0x24>
    }
    //for (int i = 0; i < SCL.gain; i++)
    //{
    	HAL_GPIO_WritePin(LCCLK_GPIO_Port, LCCLK_Pin, GPIO_PIN_SET);
 80095f6:	2201      	movs	r2, #1
 80095f8:	2120      	movs	r1, #32
 80095fa:	4808      	ldr	r0, [pc, #32]	; (800961c <SCL_ReadValue+0x84>)
 80095fc:	f007 fb1b 	bl	8010c36 <HAL_GPIO_WritePin>
    	buffer = buffer ^ 0x800000; //To convert to int32
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8009606:	607b      	str	r3, [r7, #4]
    	HAL_GPIO_WritePin(LCCLK_GPIO_Port, LCCLK_Pin, GPIO_PIN_RESET);
 8009608:	2200      	movs	r2, #0
 800960a:	2120      	movs	r1, #32
 800960c:	4803      	ldr	r0, [pc, #12]	; (800961c <SCL_ReadValue+0x84>)
 800960e:	f007 fb12 	bl	8010c36 <HAL_GPIO_WritePin>
    //}

    return buffer;
 8009612:	687b      	ldr	r3, [r7, #4]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	40020000 	.word	0x40020000

08009620 <SCL_Tare>:
//-----------------------------------------------------------------------------
//! \brief      Determines the tare value of the scale
//! \details    Stores the tare value in the structure
//! \param[out]	int32_t SCL.Offset
int32_t SCL_Tare(void)
{
 8009620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009624:	af00      	add	r7, sp, #0
	static int64_t AverageOffset = 0;
	static uint8_t Counter = 0;

	SCL.offset = 0;
 8009626:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <SCL_Tare+0x98>)
 8009628:	2200      	movs	r2, #0
 800962a:	619a      	str	r2, [r3, #24]
	while (Counter < SCL_TARE_SAMPLES)
 800962c:	e025      	b.n	800967a <SCL_Tare+0x5a>
	{
		if (HAL_GPIO_ReadPin(LCDATA_GPIO_Port, LCDATA_Pin)==GPIO_PIN_RESET)
 800962e:	2110      	movs	r1, #16
 8009630:	4822      	ldr	r0, [pc, #136]	; (80096bc <SCL_Tare+0x9c>)
 8009632:	f007 fae9 	bl	8010c08 <HAL_GPIO_ReadPin>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11e      	bne.n	800967a <SCL_Tare+0x5a>
		{
			SCL.rawvalue = SCL_ReadValue();
 800963c:	f7ff ffac 	bl	8009598 <SCL_ReadValue>
 8009640:	4603      	mov	r3, r0
 8009642:	4a1d      	ldr	r2, [pc, #116]	; (80096b8 <SCL_Tare+0x98>)
 8009644:	6213      	str	r3, [r2, #32]

			if (SCL.rawvalue != 0xffffffff)
 8009646:	4b1c      	ldr	r3, [pc, #112]	; (80096b8 <SCL_Tare+0x98>)
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964e:	d014      	beq.n	800967a <SCL_Tare+0x5a>
			{
				Counter++;
 8009650:	4b1b      	ldr	r3, [pc, #108]	; (80096c0 <SCL_Tare+0xa0>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	3301      	adds	r3, #1
 8009656:	b2da      	uxtb	r2, r3
 8009658:	4b19      	ldr	r3, [pc, #100]	; (80096c0 <SCL_Tare+0xa0>)
 800965a:	701a      	strb	r2, [r3, #0]
				AverageOffset += SCL.rawvalue;
 800965c:	4b16      	ldr	r3, [pc, #88]	; (80096b8 <SCL_Tare+0x98>)
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	17da      	asrs	r2, r3, #31
 8009662:	461c      	mov	r4, r3
 8009664:	4615      	mov	r5, r2
 8009666:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <SCL_Tare+0xa4>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	eb14 0802 	adds.w	r8, r4, r2
 8009670:	eb45 0903 	adc.w	r9, r5, r3
 8009674:	4b13      	ldr	r3, [pc, #76]	; (80096c4 <SCL_Tare+0xa4>)
 8009676:	e9c3 8900 	strd	r8, r9, [r3]
	while (Counter < SCL_TARE_SAMPLES)
 800967a:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <SCL_Tare+0xa0>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	2b13      	cmp	r3, #19
 8009680:	d9d5      	bls.n	800962e <SCL_Tare+0xe>
			}
		}
	}
	SCL.offset  = (int32_t) AverageOffset / SCL_TARE_SAMPLES;
 8009682:	4b10      	ldr	r3, [pc, #64]	; (80096c4 <SCL_Tare+0xa4>)
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	4613      	mov	r3, r2
 800968a:	4a0f      	ldr	r2, [pc, #60]	; (80096c8 <SCL_Tare+0xa8>)
 800968c:	fb82 1203 	smull	r1, r2, r2, r3
 8009690:	10d2      	asrs	r2, r2, #3
 8009692:	17db      	asrs	r3, r3, #31
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	4a08      	ldr	r2, [pc, #32]	; (80096b8 <SCL_Tare+0x98>)
 8009698:	6193      	str	r3, [r2, #24]
	Counter = 0;
 800969a:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <SCL_Tare+0xa0>)
 800969c:	2200      	movs	r2, #0
 800969e:	701a      	strb	r2, [r3, #0]
	AverageOffset = 0;
 80096a0:	4908      	ldr	r1, [pc, #32]	; (80096c4 <SCL_Tare+0xa4>)
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	e9c1 2300 	strd	r2, r3, [r1]

	return SCL.offset;
 80096ae:	4b02      	ldr	r3, [pc, #8]	; (80096b8 <SCL_Tare+0x98>)
 80096b0:	699b      	ldr	r3, [r3, #24]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80096b8:	200005dc 	.word	0x200005dc
 80096bc:	40020000 	.word	0x40020000
 80096c0:	20000608 	.word	0x20000608
 80096c4:	20000610 	.word	0x20000610
 80096c8:	66666667 	.word	0x66666667

080096cc <SCL_GetStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the scale status
//! \details    Returns the scale status
//! \param[out]	enuStatus SCL.Status
enuStatus SCL_GetStatus (void)
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0
	return SCL.Status;
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <SCL_GetStatus+0x10>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr
 80096dc:	200005dc 	.word	0x200005dc

080096e0 <SCL_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the scale module
//! \details    Initializes the scale module
//! \params		None
void SCL_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
	if (DUMMYMODESCALE)
 80096e6:	4b2b      	ldr	r3, [pc, #172]	; (8009794 <SCL_Init+0xb4>)
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <SCL_Init+0x1a>
	{
		SCL.GetWeight = 0;
 80096ee:	4b2a      	ldr	r3, [pc, #168]	; (8009798 <SCL_Init+0xb8>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	605a      	str	r2, [r3, #4]
		SCL.Status=sINACTIVE;
 80096f4:	4b28      	ldr	r3, [pc, #160]	; (8009798 <SCL_Init+0xb8>)
 80096f6:	2204      	movs	r2, #4
 80096f8:	701a      	strb	r2, [r3, #0]
	}
	SCL.Status = sACTIVE;
 80096fa:	4b27      	ldr	r3, [pc, #156]	; (8009798 <SCL_Init+0xb8>)
 80096fc:	2203      	movs	r2, #3
 80096fe:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = LCCLK_Pin;
 8009700:	2320      	movs	r3, #32
 8009702:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009704:	2301      	movs	r3, #1
 8009706:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009708:	2300      	movs	r3, #0
 800970a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800970c:	2300      	movs	r3, #0
 800970e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LCCLK_GPIO_Port, &GPIO_InitStruct);
 8009710:	1d3b      	adds	r3, r7, #4
 8009712:	4619      	mov	r1, r3
 8009714:	4821      	ldr	r0, [pc, #132]	; (800979c <SCL_Init+0xbc>)
 8009716:	f007 f817 	bl	8010748 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LCDATA_Pin;
 800971a:	2310      	movs	r3, #16
 800971c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800971e:	2300      	movs	r3, #0
 8009720:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009722:	2301      	movs	r3, #1
 8009724:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009726:	2300      	movs	r3, #0
 8009728:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LCDATA_GPIO_Port, &GPIO_InitStruct);
 800972a:	1d3b      	adds	r3, r7, #4
 800972c:	4619      	mov	r1, r3
 800972e:	481b      	ldr	r0, [pc, #108]	; (800979c <SCL_Init+0xbc>)
 8009730:	f007 f80a 	bl	8010748 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCCLK_GPIO_Port, LCCLK_Pin, GPIO_PIN_SET);
 8009734:	2201      	movs	r2, #1
 8009736:	2120      	movs	r1, #32
 8009738:	4818      	ldr	r0, [pc, #96]	; (800979c <SCL_Init+0xbc>)
 800973a:	f007 fa7c 	bl	8010c36 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800973e:	2032      	movs	r0, #50	; 0x32
 8009740:	f005 fc72 	bl	800f028 <HAL_Delay>
	HAL_GPIO_WritePin(LCCLK_GPIO_Port, LCCLK_Pin, GPIO_PIN_RESET);
 8009744:	2200      	movs	r2, #0
 8009746:	2120      	movs	r1, #32
 8009748:	4814      	ldr	r0, [pc, #80]	; (800979c <SCL_Init+0xbc>)
 800974a:	f007 fa74 	bl	8010c36 <HAL_GPIO_WritePin>

	SCL.factor = 112.0;//444.147328 for 500 g loadcell;
 800974e:	4b12      	ldr	r3, [pc, #72]	; (8009798 <SCL_Init+0xb8>)
 8009750:	4a13      	ldr	r2, [pc, #76]	; (80097a0 <SCL_Init+0xc0>)
 8009752:	629a      	str	r2, [r3, #40]	; 0x28
	SCL.Accuracy = 2; //0.2 gram accurate
 8009754:	4b10      	ldr	r3, [pc, #64]	; (8009798 <SCL_Init+0xb8>)
 8009756:	2202      	movs	r2, #2
 8009758:	751a      	strb	r2, [r3, #20]
	SCL.gain = 1; //1 = A 128, 2 = B 32, 3 = A 64
 800975a:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <SCL_Init+0xb8>)
 800975c:	2201      	movs	r2, #1
 800975e:	61da      	str	r2, [r3, #28]
	//Check if this is first use. If so write default values in EEPROM
	if (EEP_ReadEEPROM (SCL_EEPROMFILLED == 0))
 8009760:	2000      	movs	r0, #0
 8009762:	f001 fe22 	bl	800b3aa <EEP_ReadEEPROM>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d008      	beq.n	800977e <SCL_Init+0x9e>
	{
		EEP_WriteEEPROM(SCL_STABLETIME, 500);
 800976c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009770:	2014      	movs	r0, #20
 8009772:	f001 fdfd 	bl	800b370 <EEP_WriteEEPROM>
		EEP_WriteEEPROM(SCL_EEPROMFILLED, 1);
 8009776:	2101      	movs	r1, #1
 8009778:	201d      	movs	r0, #29
 800977a:	f001 fdf9 	bl	800b370 <EEP_WriteEEPROM>
	}
	SCL.StableTime = EEP_ReadEEPROM (SCL_STABLETIME);
 800977e:	2014      	movs	r0, #20
 8009780:	f001 fe13 	bl	800b3aa <EEP_ReadEEPROM>
 8009784:	4603      	mov	r3, r0
 8009786:	461a      	mov	r2, r3
 8009788:	4b03      	ldr	r3, [pc, #12]	; (8009798 <SCL_Init+0xb8>)
 800978a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800978c:	bf00      	nop
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000972 	.word	0x20000972
 8009798:	200005dc 	.word	0x200005dc
 800979c:	40020000 	.word	0x40020000
 80097a0:	42e00000 	.word	0x42e00000

080097a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80097a8:	4b17      	ldr	r3, [pc, #92]	; (8009808 <MX_SPI1_Init+0x64>)
 80097aa:	4a18      	ldr	r2, [pc, #96]	; (800980c <MX_SPI1_Init+0x68>)
 80097ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80097ae:	4b16      	ldr	r3, [pc, #88]	; (8009808 <MX_SPI1_Init+0x64>)
 80097b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80097b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <MX_SPI1_Init+0x64>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80097bc:	4b12      	ldr	r3, [pc, #72]	; (8009808 <MX_SPI1_Init+0x64>)
 80097be:	2200      	movs	r2, #0
 80097c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80097c2:	4b11      	ldr	r3, [pc, #68]	; (8009808 <MX_SPI1_Init+0x64>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80097c8:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <MX_SPI1_Init+0x64>)
 80097ca:	2201      	movs	r2, #1
 80097cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <MX_SPI1_Init+0x64>)
 80097d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80097d6:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <MX_SPI1_Init+0x64>)
 80097d8:	2200      	movs	r2, #0
 80097da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <MX_SPI1_Init+0x64>)
 80097de:	2200      	movs	r2, #0
 80097e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <MX_SPI1_Init+0x64>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097e8:	4b07      	ldr	r3, [pc, #28]	; (8009808 <MX_SPI1_Init+0x64>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80097ee:	4b06      	ldr	r3, [pc, #24]	; (8009808 <MX_SPI1_Init+0x64>)
 80097f0:	220a      	movs	r2, #10
 80097f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80097f4:	4804      	ldr	r0, [pc, #16]	; (8009808 <MX_SPI1_Init+0x64>)
 80097f6:	f008 f8a1 	bl	801193c <HAL_SPI_Init>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009800:	f7ff fca6 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009804:	bf00      	nop
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000618 	.word	0x20000618
 800980c:	40013000 	.word	0x40013000

08009810 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8009814:	4b17      	ldr	r3, [pc, #92]	; (8009874 <MX_SPI2_Init+0x64>)
 8009816:	4a18      	ldr	r2, [pc, #96]	; (8009878 <MX_SPI2_Init+0x68>)
 8009818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800981a:	4b16      	ldr	r3, [pc, #88]	; (8009874 <MX_SPI2_Init+0x64>)
 800981c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009822:	4b14      	ldr	r3, [pc, #80]	; (8009874 <MX_SPI2_Init+0x64>)
 8009824:	2200      	movs	r2, #0
 8009826:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009828:	4b12      	ldr	r3, [pc, #72]	; (8009874 <MX_SPI2_Init+0x64>)
 800982a:	2200      	movs	r2, #0
 800982c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <MX_SPI2_Init+0x64>)
 8009830:	2200      	movs	r2, #0
 8009832:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009834:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <MX_SPI2_Init+0x64>)
 8009836:	2200      	movs	r2, #0
 8009838:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800983a:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <MX_SPI2_Init+0x64>)
 800983c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009840:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8009842:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <MX_SPI2_Init+0x64>)
 8009844:	2208      	movs	r2, #8
 8009846:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009848:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <MX_SPI2_Init+0x64>)
 800984a:	2200      	movs	r2, #0
 800984c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <MX_SPI2_Init+0x64>)
 8009850:	2200      	movs	r2, #0
 8009852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <MX_SPI2_Init+0x64>)
 8009856:	2200      	movs	r2, #0
 8009858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800985a:	4b06      	ldr	r3, [pc, #24]	; (8009874 <MX_SPI2_Init+0x64>)
 800985c:	220a      	movs	r2, #10
 800985e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009860:	4804      	ldr	r0, [pc, #16]	; (8009874 <MX_SPI2_Init+0x64>)
 8009862:	f008 f86b 	bl	801193c <HAL_SPI_Init>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800986c:	f7ff fc70 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009870:	bf00      	nop
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20000670 	.word	0x20000670
 8009878:	40003800 	.word	0x40003800

0800987c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08c      	sub	sp, #48	; 0x30
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009884:	f107 031c 	add.w	r3, r7, #28
 8009888:	2200      	movs	r2, #0
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	605a      	str	r2, [r3, #4]
 800988e:	609a      	str	r2, [r3, #8]
 8009890:	60da      	str	r2, [r3, #12]
 8009892:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a41      	ldr	r2, [pc, #260]	; (80099a0 <HAL_SPI_MspInit+0x124>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d14d      	bne.n	800993a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800989e:	4b41      	ldr	r3, [pc, #260]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	4a40      	ldr	r2, [pc, #256]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098a8:	6213      	str	r3, [r2, #32]
 80098aa:	4b3e      	ldr	r3, [pc, #248]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098b2:	61bb      	str	r3, [r7, #24]
 80098b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098b6:	4b3b      	ldr	r3, [pc, #236]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	4a3a      	ldr	r2, [pc, #232]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098bc:	f043 0301 	orr.w	r3, r3, #1
 80098c0:	61d3      	str	r3, [r2, #28]
 80098c2:	4b38      	ldr	r3, [pc, #224]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098ce:	4b35      	ldr	r3, [pc, #212]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	4a34      	ldr	r2, [pc, #208]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098d4:	f043 0302 	orr.w	r3, r3, #2
 80098d8:	61d3      	str	r3, [r2, #28]
 80098da:	4b32      	ldr	r3, [pc, #200]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	f003 0302 	and.w	r3, r3, #2
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = LED_Pin;
 80098e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ec:	2302      	movs	r3, #2
 80098ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098f0:	2300      	movs	r3, #0
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098f4:	2303      	movs	r3, #3
 80098f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80098f8:	2305      	movs	r3, #5
 80098fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80098fc:	f107 031c 	add.w	r3, r7, #28
 8009900:	4619      	mov	r1, r3
 8009902:	4829      	ldr	r0, [pc, #164]	; (80099a8 <HAL_SPI_MspInit+0x12c>)
 8009904:	f006 ff20 	bl	8010748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009908:	2308      	movs	r3, #8
 800990a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800990c:	2302      	movs	r3, #2
 800990e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009910:	2300      	movs	r3, #0
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009914:	2303      	movs	r3, #3
 8009916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009918:	2305      	movs	r3, #5
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800991c:	f107 031c 	add.w	r3, r7, #28
 8009920:	4619      	mov	r1, r3
 8009922:	4822      	ldr	r0, [pc, #136]	; (80099ac <HAL_SPI_MspInit+0x130>)
 8009924:	f006 ff10 	bl	8010748 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	2023      	movs	r0, #35	; 0x23
 800992e:	f006 f8bc 	bl	800faaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009932:	2023      	movs	r0, #35	; 0x23
 8009934:	f006 f8d5 	bl	800fae2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009938:	e02d      	b.n	8009996 <HAL_SPI_MspInit+0x11a>
  else if(spiHandle->Instance==SPI2)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a1c      	ldr	r2, [pc, #112]	; (80099b0 <HAL_SPI_MspInit+0x134>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d128      	bne.n	8009996 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009944:	4b17      	ldr	r3, [pc, #92]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	4a16      	ldr	r2, [pc, #88]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 800994a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800994e:	6253      	str	r3, [r2, #36]	; 0x24
 8009950:	4b14      	ldr	r3, [pc, #80]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800995c:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	4a10      	ldr	r2, [pc, #64]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 8009962:	f043 0302 	orr.w	r3, r3, #2
 8009966:	61d3      	str	r3, [r2, #28]
 8009968:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <HAL_SPI_MspInit+0x128>)
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8009974:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800997a:	2302      	movs	r3, #2
 800997c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800997e:	2300      	movs	r3, #0
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009982:	2303      	movs	r3, #3
 8009984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009986:	2305      	movs	r3, #5
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800998a:	f107 031c 	add.w	r3, r7, #28
 800998e:	4619      	mov	r1, r3
 8009990:	4806      	ldr	r0, [pc, #24]	; (80099ac <HAL_SPI_MspInit+0x130>)
 8009992:	f006 fed9 	bl	8010748 <HAL_GPIO_Init>
}
 8009996:	bf00      	nop
 8009998:	3730      	adds	r7, #48	; 0x30
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	40013000 	.word	0x40013000
 80099a4:	40023800 	.word	0x40023800
 80099a8:	40020000 	.word	0x40020000
 80099ac:	40020400 	.word	0x40020400
 80099b0:	40003800 	.word	0x40003800

080099b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80099ba:	4b14      	ldr	r3, [pc, #80]	; (8009a0c <HAL_MspInit+0x58>)
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	4a13      	ldr	r2, [pc, #76]	; (8009a0c <HAL_MspInit+0x58>)
 80099c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099c4:	6253      	str	r3, [r2, #36]	; 0x24
 80099c6:	4b11      	ldr	r3, [pc, #68]	; (8009a0c <HAL_MspInit+0x58>)
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099d2:	4b0e      	ldr	r3, [pc, #56]	; (8009a0c <HAL_MspInit+0x58>)
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	4a0d      	ldr	r2, [pc, #52]	; (8009a0c <HAL_MspInit+0x58>)
 80099d8:	f043 0301 	orr.w	r3, r3, #1
 80099dc:	6213      	str	r3, [r2, #32]
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <HAL_MspInit+0x58>)
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	60bb      	str	r3, [r7, #8]
 80099e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80099ea:	4b08      	ldr	r3, [pc, #32]	; (8009a0c <HAL_MspInit+0x58>)
 80099ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ee:	4a07      	ldr	r2, [pc, #28]	; (8009a0c <HAL_MspInit+0x58>)
 80099f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099f4:	6253      	str	r3, [r2, #36]	; 0x24
 80099f6:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <HAL_MspInit+0x58>)
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099fe:	607b      	str	r3, [r7, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009a02:	bf00      	nop
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bc80      	pop	{r7}
 8009a0a:	4770      	bx	lr
 8009a0c:	40023800 	.word	0x40023800

08009a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009a14:	e7fe      	b.n	8009a14 <NMI_Handler+0x4>

08009a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009a16:	b480      	push	{r7}
 8009a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009a1a:	e7fe      	b.n	8009a1a <HardFault_Handler+0x4>

08009a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009a20:	e7fe      	b.n	8009a20 <MemManage_Handler+0x4>

08009a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009a22:	b480      	push	{r7}
 8009a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009a26:	e7fe      	b.n	8009a26 <BusFault_Handler+0x4>

08009a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009a2c:	e7fe      	b.n	8009a2c <UsageFault_Handler+0x4>

08009a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8009a32:	bf00      	nop
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr

08009a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009a3e:	bf00      	nop
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bc80      	pop	{r7}
 8009a44:	4770      	bx	lr

08009a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009a46:	b480      	push	{r7}
 8009a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009a4a:	bf00      	nop
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc80      	pop	{r7}
 8009a50:	4770      	bx	lr
	...

08009a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Flg1ms = 1;
 8009a58:	4b03      	ldr	r3, [pc, #12]	; (8009a68 <SysTick_Handler+0x14>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009a5e:	f005 fac7 	bl	800eff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009a62:	bf00      	nop
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000958 	.word	0x20000958

08009a6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8009a70:	4802      	ldr	r0, [pc, #8]	; (8009a7c <DMA1_Channel1_IRQHandler+0x10>)
 8009a72:	f006 fa23 	bl	800febc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009a76:	bf00      	nop
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	200000e8 	.word	0x200000e8

08009a80 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009a84:	4802      	ldr	r0, [pc, #8]	; (8009a90 <DMA1_Channel3_IRQHandler+0x10>)
 8009a86:	f006 fa19 	bl	800febc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009a8a:	bf00      	nop
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000914 	.word	0x20000914

08009a94 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009a98:	4802      	ldr	r0, [pc, #8]	; (8009aa4 <DMA1_Channel6_IRQHandler+0x10>)
 8009a9a:	f006 fa0f 	bl	800febc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8009a9e:	bf00      	nop
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	200008d0 	.word	0x200008d0

08009aa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009aac:	4802      	ldr	r0, [pc, #8]	; (8009ab8 <TIM4_IRQHandler+0x10>)
 8009aae:	f008 ff7b 	bl	80129a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009ab2:	bf00      	nop
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000748 	.word	0x20000748

08009abc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009ac0:	4802      	ldr	r0, [pc, #8]	; (8009acc <SPI1_IRQHandler+0x10>)
 8009ac2:	f008 f9f1 	bl	8011ea8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8009ac6:	bf00      	nop
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20000618 	.word	0x20000618

08009ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009ad4:	4802      	ldr	r0, [pc, #8]	; (8009ae0 <USART2_IRQHandler+0x10>)
 8009ad6:	f009 fe01 	bl	80136dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009ada:	bf00      	nop
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20000848 	.word	0x20000848

08009ae4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009ae8:	4802      	ldr	r0, [pc, #8]	; (8009af4 <USART3_IRQHandler+0x10>)
 8009aea:	f009 fdf7 	bl	80136dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009aee:	bf00      	nop
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	2000088c 	.word	0x2000088c

08009af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(SW1_Pin) != RESET) //Interrupt from Grinder home switch
 8009afc:	4b0c      	ldr	r3, [pc, #48]	; (8009b30 <EXTI15_10_IRQHandler+0x38>)
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d008      	beq.n	8009b1a <EXTI15_10_IRQHandler+0x22>
	{
		if(ADJ_Motor.HomeFlag == 1)
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <EXTI15_10_IRQHandler+0x3c>)
 8009b0a:	791b      	ldrb	r3, [r3, #4]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d104      	bne.n	8009b1a <EXTI15_10_IRQHandler+0x22>
		{
			ADJ_Motor.HomeFlag = 0;
 8009b10:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <EXTI15_10_IRQHandler+0x3c>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	711a      	strb	r2, [r3, #4]
			ADJ_ResetPosition();
 8009b16:	f7fd faab 	bl	8007070 <ADJ_ResetPosition>
		}
		//ADJ_Motor.HomeFlag = 1;
		//ADJ_Motor.GetPosition = 0;
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFID_IRQ_Pin);
 8009b1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009b1e:	f007 f8a3 	bl	8010c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8009b22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009b26:	f007 f89f 	bl	8010c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009b2a:	bf00      	nop
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	40010400 	.word	0x40010400
 8009b34:	20000140 	.word	0x20000140

08009b38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009b3c:	4802      	ldr	r0, [pc, #8]	; (8009b48 <TIM5_IRQHandler+0x10>)
 8009b3e:	f008 ff33 	bl	80129a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8009b42:	bf00      	nop
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000788 	.word	0x20000788

08009b4c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009b50:	bf00      	nop
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bc80      	pop	{r7}
 8009b56:	4770      	bx	lr

08009b58 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08c      	sub	sp, #48	; 0x30
 8009b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009b5e:	f107 030c 	add.w	r3, r7, #12
 8009b62:	2224      	movs	r2, #36	; 0x24
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f00a fb66 	bl	8014238 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009b74:	4b21      	ldr	r3, [pc, #132]	; (8009bfc <MX_TIM2_Init+0xa4>)
 8009b76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009b7c:	4b1f      	ldr	r3, [pc, #124]	; (8009bfc <MX_TIM2_Init+0xa4>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b82:	4b1e      	ldr	r3, [pc, #120]	; (8009bfc <MX_TIM2_Init+0xa4>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8009b88:	4b1c      	ldr	r3, [pc, #112]	; (8009bfc <MX_TIM2_Init+0xa4>)
 8009b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b90:	4b1a      	ldr	r3, [pc, #104]	; (8009bfc <MX_TIM2_Init+0xa4>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b96:	4b19      	ldr	r3, [pc, #100]	; (8009bfc <MX_TIM2_Init+0xa4>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8009bc0:	f107 030c 	add.w	r3, r7, #12
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	480d      	ldr	r0, [pc, #52]	; (8009bfc <MX_TIM2_Init+0xa4>)
 8009bc8:	f008 fde6 	bl	8012798 <HAL_TIM_Encoder_Init>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8009bd2:	f7ff fabd 	bl	8009150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009bde:	1d3b      	adds	r3, r7, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4806      	ldr	r0, [pc, #24]	; (8009bfc <MX_TIM2_Init+0xa4>)
 8009be4:	f009 fb82 	bl	80132ec <HAL_TIMEx_MasterConfigSynchronization>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8009bee:	f7ff faaf 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009bf2:	bf00      	nop
 8009bf4:	3730      	adds	r7, #48	; 0x30
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200006c8 	.word	0x200006c8

08009c00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08a      	sub	sp, #40	; 0x28
 8009c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c06:	f107 0318 	add.w	r3, r7, #24
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	605a      	str	r2, [r3, #4]
 8009c10:	609a      	str	r2, [r3, #8]
 8009c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c14:	f107 0310 	add.w	r3, r7, #16
 8009c18:	2200      	movs	r2, #0
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c1e:	463b      	mov	r3, r7
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	605a      	str	r2, [r3, #4]
 8009c26:	609a      	str	r2, [r3, #8]
 8009c28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009c2a:	4b32      	ldr	r3, [pc, #200]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c2c:	4a32      	ldr	r2, [pc, #200]	; (8009cf8 <MX_TIM3_Init+0xf8>)
 8009c2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8009c30:	4b30      	ldr	r3, [pc, #192]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c32:	221f      	movs	r2, #31
 8009c34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c36:	4b2f      	ldr	r3, [pc, #188]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8009c3c:	4b2d      	ldr	r3, [pc, #180]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c3e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009c42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c44:	4b2b      	ldr	r3, [pc, #172]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c4a:	4b2a      	ldr	r3, [pc, #168]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009c50:	4828      	ldr	r0, [pc, #160]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c52:	f008 fbc1 	bl	80123d8 <HAL_TIM_Base_Init>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8009c5c:	f7ff fa78 	bl	8009150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c64:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009c66:	f107 0318 	add.w	r3, r7, #24
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4821      	ldr	r0, [pc, #132]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c6e:	f009 f835 	bl	8012cdc <HAL_TIM_ConfigClockSource>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8009c78:	f7ff fa6a 	bl	8009150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009c7c:	481d      	ldr	r0, [pc, #116]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c7e:	f008 fcad 	bl	80125dc <HAL_TIM_PWM_Init>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8009c88:	f7ff fa62 	bl	8009150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009c94:	f107 0310 	add.w	r3, r7, #16
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4816      	ldr	r0, [pc, #88]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009c9c:	f009 fb26 	bl	80132ec <HAL_TIMEx_MasterConfigSynchronization>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8009ca6:	f7ff fa53 	bl	8009150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009caa:	2360      	movs	r3, #96	; 0x60
 8009cac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009cba:	463b      	mov	r3, r7
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	480c      	ldr	r0, [pc, #48]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009cc2:	f008 ff4d 	bl	8012b60 <HAL_TIM_PWM_ConfigChannel>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8009ccc:	f7ff fa40 	bl	8009150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	220c      	movs	r2, #12
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4807      	ldr	r0, [pc, #28]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009cd8:	f008 ff42 	bl	8012b60 <HAL_TIM_PWM_ConfigChannel>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8009ce2:	f7ff fa35 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009ce6:	4803      	ldr	r0, [pc, #12]	; (8009cf4 <MX_TIM3_Init+0xf4>)
 8009ce8:	f000 fa44 	bl	800a174 <HAL_TIM_MspPostInit>

}
 8009cec:	bf00      	nop
 8009cee:	3728      	adds	r7, #40	; 0x28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	20000708 	.word	0x20000708
 8009cf8:	40000400 	.word	0x40000400

08009cfc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	; 0x30
 8009d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009d02:	f107 030c 	add.w	r3, r7, #12
 8009d06:	2224      	movs	r2, #36	; 0x24
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f00a fa94 	bl	8014238 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d10:	1d3b      	adds	r3, r7, #4
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009d18:	4b20      	ldr	r3, [pc, #128]	; (8009d9c <MX_TIM4_Init+0xa0>)
 8009d1a:	4a21      	ldr	r2, [pc, #132]	; (8009da0 <MX_TIM4_Init+0xa4>)
 8009d1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009d1e:	4b1f      	ldr	r3, [pc, #124]	; (8009d9c <MX_TIM4_Init+0xa0>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d24:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <MX_TIM4_Init+0xa0>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009d2a:	4b1c      	ldr	r3, [pc, #112]	; (8009d9c <MX_TIM4_Init+0xa0>)
 8009d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d32:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <MX_TIM4_Init+0xa0>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d38:	4b18      	ldr	r3, [pc, #96]	; (8009d9c <MX_TIM4_Init+0xa0>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009d42:	2300      	movs	r3, #0
 8009d44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009d46:	2301      	movs	r3, #1
 8009d48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009d52:	2300      	movs	r3, #0
 8009d54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009d56:	2301      	movs	r3, #1
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009d62:	f107 030c 	add.w	r3, r7, #12
 8009d66:	4619      	mov	r1, r3
 8009d68:	480c      	ldr	r0, [pc, #48]	; (8009d9c <MX_TIM4_Init+0xa0>)
 8009d6a:	f008 fd15 	bl	8012798 <HAL_TIM_Encoder_Init>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8009d74:	f7ff f9ec 	bl	8009150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009d80:	1d3b      	adds	r3, r7, #4
 8009d82:	4619      	mov	r1, r3
 8009d84:	4805      	ldr	r0, [pc, #20]	; (8009d9c <MX_TIM4_Init+0xa0>)
 8009d86:	f009 fab1 	bl	80132ec <HAL_TIMEx_MasterConfigSynchronization>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8009d90:	f7ff f9de 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009d94:	bf00      	nop
 8009d96:	3730      	adds	r7, #48	; 0x30
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000748 	.word	0x20000748
 8009da0:	40000800 	.word	0x40000800

08009da4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	2200      	movs	r2, #0
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	605a      	str	r2, [r3, #4]
 8009db4:	609a      	str	r2, [r3, #8]
 8009db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009db8:	463b      	mov	r3, r7
 8009dba:	2200      	movs	r2, #0
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009dc0:	4b1d      	ldr	r3, [pc, #116]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009dc2:	4a1e      	ldr	r2, [pc, #120]	; (8009e3c <MX_TIM5_Init+0x98>)
 8009dc4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 31;
 8009dc6:	4b1c      	ldr	r3, [pc, #112]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009dc8:	221f      	movs	r2, #31
 8009dca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8009dd2:	4b19      	ldr	r3, [pc, #100]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009dda:	4b17      	ldr	r3, [pc, #92]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009de0:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009de6:	4814      	ldr	r0, [pc, #80]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009de8:	f008 faf6 	bl	80123d8 <HAL_TIM_Base_Init>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8009df2:	f7ff f9ad 	bl	8009150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009dfc:	f107 0308 	add.w	r3, r7, #8
 8009e00:	4619      	mov	r1, r3
 8009e02:	480d      	ldr	r0, [pc, #52]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009e04:	f008 ff6a 	bl	8012cdc <HAL_TIM_ConfigClockSource>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8009e0e:	f7ff f99f 	bl	8009150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009e12:	2320      	movs	r3, #32
 8009e14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4806      	ldr	r0, [pc, #24]	; (8009e38 <MX_TIM5_Init+0x94>)
 8009e20:	f009 fa64 	bl	80132ec <HAL_TIMEx_MasterConfigSynchronization>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8009e2a:	f7ff f991 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009e2e:	bf00      	nop
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000788 	.word	0x20000788
 8009e3c:	40000c00 	.word	0x40000c00

08009e40 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e46:	f107 0310 	add.w	r3, r7, #16
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	605a      	str	r2, [r3, #4]
 8009e50:	609a      	str	r2, [r3, #8]
 8009e52:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e54:	463b      	mov	r3, r7
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	605a      	str	r2, [r3, #4]
 8009e5c:	609a      	str	r2, [r3, #8]
 8009e5e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009e60:	4b24      	ldr	r3, [pc, #144]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009e62:	4a25      	ldr	r2, [pc, #148]	; (8009ef8 <MX_TIM10_Init+0xb8>)
 8009e64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 8009e66:	4b23      	ldr	r3, [pc, #140]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009e68:	220f      	movs	r2, #15
 8009e6a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e6c:	4b21      	ldr	r3, [pc, #132]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8009e72:	4b20      	ldr	r3, [pc, #128]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009e74:	2263      	movs	r2, #99	; 0x63
 8009e76:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e78:	4b1e      	ldr	r3, [pc, #120]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e7e:	4b1d      	ldr	r3, [pc, #116]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009e84:	481b      	ldr	r0, [pc, #108]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009e86:	f008 faa7 	bl	80123d8 <HAL_TIM_Base_Init>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <MX_TIM10_Init+0x54>
  {
    Error_Handler();
 8009e90:	f7ff f95e 	bl	8009150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8009e9a:	f107 0310 	add.w	r3, r7, #16
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4814      	ldr	r0, [pc, #80]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009ea2:	f008 ff1b 	bl	8012cdc <HAL_TIM_ConfigClockSource>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <MX_TIM10_Init+0x70>
  {
    Error_Handler();
 8009eac:	f7ff f950 	bl	8009150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8009eb0:	4810      	ldr	r0, [pc, #64]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009eb2:	f008 fb93 	bl	80125dc <HAL_TIM_PWM_Init>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <MX_TIM10_Init+0x80>
  {
    Error_Handler();
 8009ebc:	f7ff f948 	bl	8009150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ec0:	2360      	movs	r3, #96	; 0x60
 8009ec2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009ed0:	463b      	mov	r3, r7
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4807      	ldr	r0, [pc, #28]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009ed8:	f008 fe42 	bl	8012b60 <HAL_TIM_PWM_ConfigChannel>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <MX_TIM10_Init+0xa6>
  {
    Error_Handler();
 8009ee2:	f7ff f935 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8009ee6:	4803      	ldr	r0, [pc, #12]	; (8009ef4 <MX_TIM10_Init+0xb4>)
 8009ee8:	f000 f944 	bl	800a174 <HAL_TIM_MspPostInit>

}
 8009eec:	bf00      	nop
 8009eee:	3720      	adds	r7, #32
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	200007c8 	.word	0x200007c8
 8009ef8:	40010c00 	.word	0x40010c00

08009efc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f02:	f107 0310 	add.w	r3, r7, #16
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	605a      	str	r2, [r3, #4]
 8009f0c:	609a      	str	r2, [r3, #8]
 8009f0e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f10:	463b      	mov	r3, r7
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	605a      	str	r2, [r3, #4]
 8009f18:	609a      	str	r2, [r3, #8]
 8009f1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8009f1c:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f1e:	4a25      	ldr	r2, [pc, #148]	; (8009fb4 <MX_TIM11_Init+0xb8>)
 8009f20:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 15;
 8009f22:	4b23      	ldr	r3, [pc, #140]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f24:	220f      	movs	r2, #15
 8009f26:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f28:	4b21      	ldr	r3, [pc, #132]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8009f2e:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f30:	2263      	movs	r2, #99	; 0x63
 8009f32:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f34:	4b1e      	ldr	r3, [pc, #120]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f3a:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009f40:	481b      	ldr	r0, [pc, #108]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f42:	f008 fa49 	bl	80123d8 <HAL_TIM_Base_Init>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <MX_TIM11_Init+0x54>
  {
    Error_Handler();
 8009f4c:	f7ff f900 	bl	8009150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8009f56:	f107 0310 	add.w	r3, r7, #16
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	4814      	ldr	r0, [pc, #80]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f5e:	f008 febd 	bl	8012cdc <HAL_TIM_ConfigClockSource>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8009f68:	f7ff f8f2 	bl	8009150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8009f6c:	4810      	ldr	r0, [pc, #64]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f6e:	f008 fb35 	bl	80125dc <HAL_TIM_PWM_Init>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <MX_TIM11_Init+0x80>
  {
    Error_Handler();
 8009f78:	f7ff f8ea 	bl	8009150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f7c:	2360      	movs	r3, #96	; 0x60
 8009f7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	2200      	movs	r2, #0
 8009f90:	4619      	mov	r1, r3
 8009f92:	4807      	ldr	r0, [pc, #28]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009f94:	f008 fde4 	bl	8012b60 <HAL_TIM_PWM_ConfigChannel>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <MX_TIM11_Init+0xa6>
  {
    Error_Handler();
 8009f9e:	f7ff f8d7 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8009fa2:	4803      	ldr	r0, [pc, #12]	; (8009fb0 <MX_TIM11_Init+0xb4>)
 8009fa4:	f000 f8e6 	bl	800a174 <HAL_TIM_MspPostInit>

}
 8009fa8:	bf00      	nop
 8009faa:	3720      	adds	r7, #32
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20000808 	.word	0x20000808
 8009fb4:	40011000 	.word	0x40011000

08009fb8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08c      	sub	sp, #48	; 0x30
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fc0:	f107 031c 	add.w	r3, r7, #28
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	605a      	str	r2, [r3, #4]
 8009fca:	609a      	str	r2, [r3, #8]
 8009fcc:	60da      	str	r2, [r3, #12]
 8009fce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd8:	d128      	bne.n	800a02c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009fda:	4b31      	ldr	r3, [pc, #196]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	4a30      	ldr	r2, [pc, #192]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8009fe0:	f043 0301 	orr.w	r3, r3, #1
 8009fe4:	6253      	str	r3, [r2, #36]	; 0x24
 8009fe6:	4b2e      	ldr	r3, [pc, #184]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8009fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	61bb      	str	r3, [r7, #24]
 8009ff0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ff2:	4b2b      	ldr	r3, [pc, #172]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	4a2a      	ldr	r2, [pc, #168]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8009ff8:	f043 0301 	orr.w	r3, r3, #1
 8009ffc:	61d3      	str	r3, [r2, #28]
 8009ffe:	4b28      	ldr	r3, [pc, #160]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP1     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 800a00a:	2303      	movs	r3, #3
 800a00c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a00e:	2302      	movs	r3, #2
 800a010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a012:	2300      	movs	r3, #0
 800a014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a016:	2300      	movs	r3, #0
 800a018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a01a:	2301      	movs	r3, #1
 800a01c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a01e:	f107 031c 	add.w	r3, r7, #28
 800a022:	4619      	mov	r1, r3
 800a024:	481f      	ldr	r0, [pc, #124]	; (800a0a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800a026:	f006 fb8f 	bl	8010748 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a02a:	e034      	b.n	800a096 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1d      	ldr	r2, [pc, #116]	; (800a0a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d12f      	bne.n	800a096 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a036:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800a03c:	f043 0304 	orr.w	r3, r3, #4
 800a040:	6253      	str	r3, [r2, #36]	; 0x24
 800a042:	4b17      	ldr	r3, [pc, #92]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	f003 0304 	and.w	r3, r3, #4
 800a04a:	613b      	str	r3, [r7, #16]
 800a04c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a04e:	4b14      	ldr	r3, [pc, #80]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	4a13      	ldr	r2, [pc, #76]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800a054:	f043 0302 	orr.w	r3, r3, #2
 800a058:	61d3      	str	r3, [r2, #28]
 800a05a:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3B_Pin|ENC3A_Pin;
 800a066:	23c0      	movs	r3, #192	; 0xc0
 800a068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a06a:	2302      	movs	r3, #2
 800a06c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a072:	2300      	movs	r3, #0
 800a074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a076:	2302      	movs	r3, #2
 800a078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a07a:	f107 031c 	add.w	r3, r7, #28
 800a07e:	4619      	mov	r1, r3
 800a080:	480a      	ldr	r0, [pc, #40]	; (800a0ac <HAL_TIM_Encoder_MspInit+0xf4>)
 800a082:	f006 fb61 	bl	8010748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a086:	2200      	movs	r2, #0
 800a088:	2100      	movs	r1, #0
 800a08a:	201e      	movs	r0, #30
 800a08c:	f005 fd0d 	bl	800faaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a090:	201e      	movs	r0, #30
 800a092:	f005 fd26 	bl	800fae2 <HAL_NVIC_EnableIRQ>
}
 800a096:	bf00      	nop
 800a098:	3730      	adds	r7, #48	; 0x30
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	40023800 	.word	0x40023800
 800a0a4:	40020000 	.word	0x40020000
 800a0a8:	40000800 	.word	0x40000800
 800a0ac:	40020400 	.word	0x40020400

0800a0b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a28      	ldr	r2, [pc, #160]	; (800a160 <HAL_TIM_Base_MspInit+0xb0>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d10c      	bne.n	800a0dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a0c2:	4b28      	ldr	r3, [pc, #160]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	4a27      	ldr	r2, [pc, #156]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a0c8:	f043 0302 	orr.w	r3, r3, #2
 800a0cc:	6253      	str	r3, [r2, #36]	; 0x24
 800a0ce:	4b25      	ldr	r3, [pc, #148]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800a0da:	e03c      	b.n	800a156 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a21      	ldr	r2, [pc, #132]	; (800a168 <HAL_TIM_Base_MspInit+0xb8>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d114      	bne.n	800a110 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a0e6:	4b1f      	ldr	r3, [pc, #124]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	4a1e      	ldr	r2, [pc, #120]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a0ec:	f043 0308 	orr.w	r3, r3, #8
 800a0f0:	6253      	str	r3, [r2, #36]	; 0x24
 800a0f2:	4b1c      	ldr	r3, [pc, #112]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	f003 0308 	and.w	r3, r3, #8
 800a0fa:	613b      	str	r3, [r7, #16]
 800a0fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	202e      	movs	r0, #46	; 0x2e
 800a104:	f005 fcd1 	bl	800faaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800a108:	202e      	movs	r0, #46	; 0x2e
 800a10a:	f005 fcea 	bl	800fae2 <HAL_NVIC_EnableIRQ>
}
 800a10e:	e022      	b.n	800a156 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM10)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a15      	ldr	r2, [pc, #84]	; (800a16c <HAL_TIM_Base_MspInit+0xbc>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d10c      	bne.n	800a134 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a11a:	4b12      	ldr	r3, [pc, #72]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	4a11      	ldr	r2, [pc, #68]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a120:	f043 0308 	orr.w	r3, r3, #8
 800a124:	6213      	str	r3, [r2, #32]
 800a126:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f003 0308 	and.w	r3, r3, #8
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	68fb      	ldr	r3, [r7, #12]
}
 800a132:	e010      	b.n	800a156 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM11)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a0d      	ldr	r2, [pc, #52]	; (800a170 <HAL_TIM_Base_MspInit+0xc0>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d10b      	bne.n	800a156 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a13e:	4b09      	ldr	r3, [pc, #36]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	4a08      	ldr	r2, [pc, #32]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a144:	f043 0310 	orr.w	r3, r3, #16
 800a148:	6213      	str	r3, [r2, #32]
 800a14a:	4b06      	ldr	r3, [pc, #24]	; (800a164 <HAL_TIM_Base_MspInit+0xb4>)
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	f003 0310 	and.w	r3, r3, #16
 800a152:	60bb      	str	r3, [r7, #8]
 800a154:	68bb      	ldr	r3, [r7, #8]
}
 800a156:	bf00      	nop
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	40000400 	.word	0x40000400
 800a164:	40023800 	.word	0x40023800
 800a168:	40000c00 	.word	0x40000c00
 800a16c:	40010c00 	.word	0x40010c00
 800a170:	40011000 	.word	0x40011000

0800a174 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08a      	sub	sp, #40	; 0x28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a17c:	f107 0314 	add.w	r3, r7, #20
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	605a      	str	r2, [r3, #4]
 800a186:	609a      	str	r2, [r3, #8]
 800a188:	60da      	str	r2, [r3, #12]
 800a18a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a33      	ldr	r2, [pc, #204]	; (800a260 <HAL_TIM_MspPostInit+0xec>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d11c      	bne.n	800a1d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a196:	4b33      	ldr	r3, [pc, #204]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	4a32      	ldr	r2, [pc, #200]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a19c:	f043 0302 	orr.w	r3, r3, #2
 800a1a0:	61d3      	str	r3, [r2, #28]
 800a1a2:	4b30      	ldr	r3, [pc, #192]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = M2A_Pin|M2B_Pin;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a1be:	2302      	movs	r3, #2
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1c2:	f107 0314 	add.w	r3, r7, #20
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4827      	ldr	r0, [pc, #156]	; (800a268 <HAL_TIM_MspPostInit+0xf4>)
 800a1ca:	f006 fabd 	bl	8010748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800a1ce:	e042      	b.n	800a256 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM10)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a25      	ldr	r2, [pc, #148]	; (800a26c <HAL_TIM_MspPostInit+0xf8>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d11c      	bne.n	800a214 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1da:	4b22      	ldr	r3, [pc, #136]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	4a21      	ldr	r2, [pc, #132]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a1e0:	f043 0301 	orr.w	r3, r3, #1
 800a1e4:	61d3      	str	r3, [r2, #28]
 800a1e6:	4b1f      	ldr	r3, [pc, #124]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3A_Pin;
 800a1f2:	2340      	movs	r3, #64	; 0x40
 800a1f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1fe:	2300      	movs	r3, #0
 800a200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a202:	2303      	movs	r3, #3
 800a204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M3A_GPIO_Port, &GPIO_InitStruct);
 800a206:	f107 0314 	add.w	r3, r7, #20
 800a20a:	4619      	mov	r1, r3
 800a20c:	4818      	ldr	r0, [pc, #96]	; (800a270 <HAL_TIM_MspPostInit+0xfc>)
 800a20e:	f006 fa9b 	bl	8010748 <HAL_GPIO_Init>
}
 800a212:	e020      	b.n	800a256 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM11)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a16      	ldr	r2, [pc, #88]	; (800a274 <HAL_TIM_MspPostInit+0x100>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d11b      	bne.n	800a256 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a21e:	4b11      	ldr	r3, [pc, #68]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	4a10      	ldr	r2, [pc, #64]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a224:	f043 0301 	orr.w	r3, r3, #1
 800a228:	61d3      	str	r3, [r2, #28]
 800a22a:	4b0e      	ldr	r3, [pc, #56]	; (800a264 <HAL_TIM_MspPostInit+0xf0>)
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	60bb      	str	r3, [r7, #8]
 800a234:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3B_Pin;
 800a236:	2380      	movs	r3, #128	; 0x80
 800a238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a23a:	2302      	movs	r3, #2
 800a23c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a242:	2300      	movs	r3, #0
 800a244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a246:	2303      	movs	r3, #3
 800a248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M3B_GPIO_Port, &GPIO_InitStruct);
 800a24a:	f107 0314 	add.w	r3, r7, #20
 800a24e:	4619      	mov	r1, r3
 800a250:	4807      	ldr	r0, [pc, #28]	; (800a270 <HAL_TIM_MspPostInit+0xfc>)
 800a252:	f006 fa79 	bl	8010748 <HAL_GPIO_Init>
}
 800a256:	bf00      	nop
 800a258:	3728      	adds	r7, #40	; 0x28
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	40000400 	.word	0x40000400
 800a264:	40023800 	.word	0x40023800
 800a268:	40020400 	.word	0x40020400
 800a26c:	40010c00 	.word	0x40010c00
 800a270:	40020000 	.word	0x40020000
 800a274:	40011000 	.word	0x40011000

0800a278 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a27c:	4b11      	ldr	r3, [pc, #68]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a27e:	4a12      	ldr	r2, [pc, #72]	; (800a2c8 <MX_USART2_UART_Init+0x50>)
 800a280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a282:	4b10      	ldr	r3, [pc, #64]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a28a:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a290:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a292:	2200      	movs	r2, #0
 800a294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a298:	2200      	movs	r2, #0
 800a29a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a29e:	220c      	movs	r2, #12
 800a2a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2a2:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2a8:	4b06      	ldr	r3, [pc, #24]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a2ae:	4805      	ldr	r0, [pc, #20]	; (800a2c4 <MX_USART2_UART_Init+0x4c>)
 800a2b0:	f009 f87a 	bl	80133a8 <HAL_UART_Init>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a2ba:	f7fe ff49 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a2be:	bf00      	nop
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000848 	.word	0x20000848
 800a2c8:	40004400 	.word	0x40004400

0800a2cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a2d0:	4b11      	ldr	r3, [pc, #68]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a2d2:	4a12      	ldr	r2, [pc, #72]	; (800a31c <MX_USART3_UART_Init+0x50>)
 800a2d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a2d6:	4b10      	ldr	r3, [pc, #64]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a2d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a2dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a2de:	4b0e      	ldr	r3, [pc, #56]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a2e4:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a2ea:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a2f0:	4b09      	ldr	r3, [pc, #36]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a2f2:	220c      	movs	r2, #12
 800a2f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2f6:	4b08      	ldr	r3, [pc, #32]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a302:	4805      	ldr	r0, [pc, #20]	; (800a318 <MX_USART3_UART_Init+0x4c>)
 800a304:	f009 f850 	bl	80133a8 <HAL_UART_Init>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a30e:	f7fe ff1f 	bl	8009150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a312:	bf00      	nop
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	2000088c 	.word	0x2000088c
 800a31c:	40004800 	.word	0x40004800

0800a320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08c      	sub	sp, #48	; 0x30
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a328:	f107 031c 	add.w	r3, r7, #28
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	609a      	str	r2, [r3, #8]
 800a334:	60da      	str	r2, [r3, #12]
 800a336:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a5c      	ldr	r2, [pc, #368]	; (800a4b0 <HAL_UART_MspInit+0x190>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d156      	bne.n	800a3f0 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a342:	4b5c      	ldr	r3, [pc, #368]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	4a5b      	ldr	r2, [pc, #364]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a34c:	6253      	str	r3, [r2, #36]	; 0x24
 800a34e:	4b59      	ldr	r3, [pc, #356]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a356:	61bb      	str	r3, [r7, #24]
 800a358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a35a:	4b56      	ldr	r3, [pc, #344]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	4a55      	ldr	r2, [pc, #340]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a360:	f043 0301 	orr.w	r3, r3, #1
 800a364:	61d3      	str	r3, [r2, #28]
 800a366:	4b53      	ldr	r3, [pc, #332]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	617b      	str	r3, [r7, #20]
 800a370:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a372:	230c      	movs	r3, #12
 800a374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a376:	2302      	movs	r3, #2
 800a378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a37a:	2300      	movs	r3, #0
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a37e:	2303      	movs	r3, #3
 800a380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a382:	2307      	movs	r3, #7
 800a384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a386:	f107 031c 	add.w	r3, r7, #28
 800a38a:	4619      	mov	r1, r3
 800a38c:	484a      	ldr	r0, [pc, #296]	; (800a4b8 <HAL_UART_MspInit+0x198>)
 800a38e:	f006 f9db 	bl	8010748 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800a392:	4b4a      	ldr	r3, [pc, #296]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a394:	4a4a      	ldr	r2, [pc, #296]	; (800a4c0 <HAL_UART_MspInit+0x1a0>)
 800a396:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a398:	4b48      	ldr	r3, [pc, #288]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a39e:	4b47      	ldr	r3, [pc, #284]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a3a4:	4b45      	ldr	r3, [pc, #276]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3a6:	2280      	movs	r2, #128	; 0x80
 800a3a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3aa:	4b44      	ldr	r3, [pc, #272]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3b0:	4b42      	ldr	r3, [pc, #264]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800a3b6:	4b41      	ldr	r3, [pc, #260]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a3bc:	4b3f      	ldr	r3, [pc, #252]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a3c2:	483e      	ldr	r0, [pc, #248]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3c4:	f005 fbba 	bl	800fb3c <HAL_DMA_Init>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 800a3ce:	f7fe febf 	bl	8009150 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a39      	ldr	r2, [pc, #228]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38
 800a3d8:	4a38      	ldr	r2, [pc, #224]	; (800a4bc <HAL_UART_MspInit+0x19c>)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a3de:	2200      	movs	r2, #0
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	2026      	movs	r0, #38	; 0x26
 800a3e4:	f005 fb61 	bl	800faaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a3e8:	2026      	movs	r0, #38	; 0x26
 800a3ea:	f005 fb7a 	bl	800fae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a3ee:	e05b      	b.n	800a4a8 <HAL_UART_MspInit+0x188>
  else if(uartHandle->Instance==USART3)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a33      	ldr	r2, [pc, #204]	; (800a4c4 <HAL_UART_MspInit+0x1a4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d156      	bne.n	800a4a8 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a3fa:	4b2e      	ldr	r3, [pc, #184]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	4a2d      	ldr	r2, [pc, #180]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a404:	6253      	str	r3, [r2, #36]	; 0x24
 800a406:	4b2b      	ldr	r3, [pc, #172]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a40e:	613b      	str	r3, [r7, #16]
 800a410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a412:	4b28      	ldr	r3, [pc, #160]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	4a27      	ldr	r2, [pc, #156]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a418:	f043 0302 	orr.w	r3, r3, #2
 800a41c:	61d3      	str	r3, [r2, #28]
 800a41e:	4b25      	ldr	r3, [pc, #148]	; (800a4b4 <HAL_UART_MspInit+0x194>)
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a42a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a42e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a430:	2302      	movs	r3, #2
 800a432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a434:	2300      	movs	r3, #0
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a438:	2303      	movs	r3, #3
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a43c:	2307      	movs	r3, #7
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a440:	f107 031c 	add.w	r3, r7, #28
 800a444:	4619      	mov	r1, r3
 800a446:	4820      	ldr	r0, [pc, #128]	; (800a4c8 <HAL_UART_MspInit+0x1a8>)
 800a448:	f006 f97e 	bl	8010748 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800a44c:	4b1f      	ldr	r3, [pc, #124]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a44e:	4a20      	ldr	r2, [pc, #128]	; (800a4d0 <HAL_UART_MspInit+0x1b0>)
 800a450:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a452:	4b1e      	ldr	r3, [pc, #120]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a454:	2200      	movs	r2, #0
 800a456:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a458:	4b1c      	ldr	r3, [pc, #112]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a45e:	4b1b      	ldr	r3, [pc, #108]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a460:	2280      	movs	r2, #128	; 0x80
 800a462:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a464:	4b19      	ldr	r3, [pc, #100]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a466:	2200      	movs	r2, #0
 800a468:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a46a:	4b18      	ldr	r3, [pc, #96]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800a470:	4b16      	ldr	r3, [pc, #88]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a472:	2220      	movs	r2, #32
 800a474:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a476:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a478:	2200      	movs	r2, #0
 800a47a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a47c:	4813      	ldr	r0, [pc, #76]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a47e:	f005 fb5d 	bl	800fb3c <HAL_DMA_Init>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <HAL_UART_MspInit+0x16c>
      Error_Handler();
 800a488:	f7fe fe62 	bl	8009150 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a0f      	ldr	r2, [pc, #60]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a490:	639a      	str	r2, [r3, #56]	; 0x38
 800a492:	4a0e      	ldr	r2, [pc, #56]	; (800a4cc <HAL_UART_MspInit+0x1ac>)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800a498:	2200      	movs	r2, #0
 800a49a:	2100      	movs	r1, #0
 800a49c:	2027      	movs	r0, #39	; 0x27
 800a49e:	f005 fb04 	bl	800faaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a4a2:	2027      	movs	r0, #39	; 0x27
 800a4a4:	f005 fb1d 	bl	800fae2 <HAL_NVIC_EnableIRQ>
}
 800a4a8:	bf00      	nop
 800a4aa:	3730      	adds	r7, #48	; 0x30
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	40004400 	.word	0x40004400
 800a4b4:	40023800 	.word	0x40023800
 800a4b8:	40020000 	.word	0x40020000
 800a4bc:	200008d0 	.word	0x200008d0
 800a4c0:	4002606c 	.word	0x4002606c
 800a4c4:	40004800 	.word	0x40004800
 800a4c8:	40020400 	.word	0x40020400
 800a4cc:	20000914 	.word	0x20000914
 800a4d0:	40026030 	.word	0x40026030

0800a4d4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a18      	ldr	r2, [pc, #96]	; (800a544 <HAL_UART_MspDeInit+0x70>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d112      	bne.n	800a50c <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800a4e6:	4b18      	ldr	r3, [pc, #96]	; (800a548 <HAL_UART_MspDeInit+0x74>)
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	4a17      	ldr	r2, [pc, #92]	; (800a548 <HAL_UART_MspDeInit+0x74>)
 800a4ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4f0:	6253      	str	r3, [r2, #36]	; 0x24

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800a4f2:	210c      	movs	r1, #12
 800a4f4:	4815      	ldr	r0, [pc, #84]	; (800a54c <HAL_UART_MspDeInit+0x78>)
 800a4f6:	f006 faa7 	bl	8010a48 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fe:	4618      	mov	r0, r3
 800a500:	f005 fb90 	bl	800fc24 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800a504:	2026      	movs	r0, #38	; 0x26
 800a506:	f005 fafa 	bl	800fafe <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800a50a:	e017      	b.n	800a53c <HAL_UART_MspDeInit+0x68>
  else if(uartHandle->Instance==USART3)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a0f      	ldr	r2, [pc, #60]	; (800a550 <HAL_UART_MspDeInit+0x7c>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d112      	bne.n	800a53c <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART3_CLK_DISABLE();
 800a516:	4b0c      	ldr	r3, [pc, #48]	; (800a548 <HAL_UART_MspDeInit+0x74>)
 800a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51a:	4a0b      	ldr	r2, [pc, #44]	; (800a548 <HAL_UART_MspDeInit+0x74>)
 800a51c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a520:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800a522:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a526:	480b      	ldr	r0, [pc, #44]	; (800a554 <HAL_UART_MspDeInit+0x80>)
 800a528:	f006 fa8e 	bl	8010a48 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a530:	4618      	mov	r0, r3
 800a532:	f005 fb77 	bl	800fc24 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800a536:	2027      	movs	r0, #39	; 0x27
 800a538:	f005 fae1 	bl	800fafe <HAL_NVIC_DisableIRQ>
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	40004400 	.word	0x40004400
 800a548:	40023800 	.word	0x40023800
 800a54c:	40020000 	.word	0x40020000
 800a550:	40004800 	.word	0x40004800
 800a554:	40020400 	.word	0x40020400

0800a558 <WRK_SetDummyMode>:
  Description:  	Used to set the dummymode and store variables in EEprom
  Parameters:   	uint8_t newAddress, uint8_t newValue
  Return value: 	None
***************************************************************/
void WRK_SetDummyMode (uint8_t newAddress, uint8_t newValue)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	460a      	mov	r2, r1
 800a562:	71fb      	strb	r3, [r7, #7]
 800a564:	4613      	mov	r3, r2
 800a566:	71bb      	strb	r3, [r7, #6]
	switch (newAddress)
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d81a      	bhi.n	800a5a4 <WRK_SetDummyMode+0x4c>
 800a56e:	a201      	add	r2, pc, #4	; (adr r2, 800a574 <WRK_SetDummyMode+0x1c>)
 800a570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a574:	0800a585 	.word	0x0800a585
 800a578:	0800a58d 	.word	0x0800a58d
 800a57c:	0800a595 	.word	0x0800a595
 800a580:	0800a59d 	.word	0x0800a59d
	{
		case WRK_DUMMYMODEGRINDER:
		{
			DUMMYMODEGRINDER = newValue;
 800a584:	4a0d      	ldr	r2, [pc, #52]	; (800a5bc <WRK_SetDummyMode+0x64>)
 800a586:	79bb      	ldrb	r3, [r7, #6]
 800a588:	7013      	strb	r3, [r2, #0]
			break;
 800a58a:	e00c      	b.n	800a5a6 <WRK_SetDummyMode+0x4e>
		}
		case WRK_DUMMYMODEFILTER:
		{
			DUMMYMODEFILTER = newValue;
 800a58c:	4a0c      	ldr	r2, [pc, #48]	; (800a5c0 <WRK_SetDummyMode+0x68>)
 800a58e:	79bb      	ldrb	r3, [r7, #6]
 800a590:	7013      	strb	r3, [r2, #0]
			break;
 800a592:	e008      	b.n	800a5a6 <WRK_SetDummyMode+0x4e>
		}
		case WRK_DUMMYMODERFID:
		{
			DUMMYMODERFID = newValue;
 800a594:	4a0b      	ldr	r2, [pc, #44]	; (800a5c4 <WRK_SetDummyMode+0x6c>)
 800a596:	79bb      	ldrb	r3, [r7, #6]
 800a598:	7013      	strb	r3, [r2, #0]
			break;
 800a59a:	e004      	b.n	800a5a6 <WRK_SetDummyMode+0x4e>
		}
		case WRK_DUMMYMODESCALE:
		{
			DUMMYMODESCALE = newValue;
 800a59c:	4a0a      	ldr	r2, [pc, #40]	; (800a5c8 <WRK_SetDummyMode+0x70>)
 800a59e:	79bb      	ldrb	r3, [r7, #6]
 800a5a0:	7013      	strb	r3, [r2, #0]
			break;
 800a5a2:	e000      	b.n	800a5a6 <WRK_SetDummyMode+0x4e>
		}
		default: break;
 800a5a4:	bf00      	nop
	}
	EEP_WriteEEPROM (newAddress, newValue);
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	79ba      	ldrb	r2, [r7, #6]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fedf 	bl	800b370 <EEP_WriteEEPROM>
}
 800a5b2:	bf00      	nop
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	2000096f 	.word	0x2000096f
 800a5c0:	20000970 	.word	0x20000970
 800a5c4:	20000971 	.word	0x20000971
 800a5c8:	20000972 	.word	0x20000972

0800a5cc <WRK_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initalizes the work module
//! \details    Initalizes the work module
//! \params		None
void WRK_Init (void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b088      	sub	sp, #32
 800a5d0:	af08      	add	r7, sp, #32
	DUMMYMODEGRINDER = EEP_ReadEEPROM (WRK_DUMMYMODEGRINDER);
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	f000 fee9 	bl	800b3aa <EEP_ReadEEPROM>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	4b33      	ldr	r3, [pc, #204]	; (800a6ac <WRK_Init+0xe0>)
 800a5de:	701a      	strb	r2, [r3, #0]
	DUMMYMODEFILTER = EEP_ReadEEPROM (WRK_DUMMYMODEFILTER);
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f000 fee2 	bl	800b3aa <EEP_ReadEEPROM>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	4b31      	ldr	r3, [pc, #196]	; (800a6b0 <WRK_Init+0xe4>)
 800a5ec:	701a      	strb	r2, [r3, #0]
	DUMMYMODERFID = EEP_ReadEEPROM (WRK_DUMMYMODERFID);
 800a5ee:	2002      	movs	r0, #2
 800a5f0:	f000 fedb 	bl	800b3aa <EEP_ReadEEPROM>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	4b2e      	ldr	r3, [pc, #184]	; (800a6b4 <WRK_Init+0xe8>)
 800a5fa:	701a      	strb	r2, [r3, #0]
	DUMMYMODESCALE = EEP_ReadEEPROM (WRK_DUMMYMODESCALE);
 800a5fc:	2003      	movs	r0, #3
 800a5fe:	f000 fed4 	bl	800b3aa <EEP_ReadEEPROM>
 800a602:	4603      	mov	r3, r0
 800a604:	b2da      	uxtb	r2, r3
 800a606:	4b2c      	ldr	r3, [pc, #176]	; (800a6b8 <WRK_Init+0xec>)
 800a608:	701a      	strb	r2, [r3, #0]
	if (DUMMYMODEGRINDER)
 800a60a:	4b28      	ldr	r3, [pc, #160]	; (800a6ac <WRK_Init+0xe0>)
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <WRK_Init+0x4e>
	{
		WRK_SetMainStatus(sIDLE);
 800a612:	2002      	movs	r0, #2
 800a614:	f000 fe24 	bl	800b260 <WRK_SetMainStatus>
		return;
 800a618:	e046      	b.n	800a6a8 <WRK_Init+0xdc>
	}
	if (WRK_GetHardwareVersion() < HARDWAREVERSIONMINIMUM)
 800a61a:	f000 fded 	bl	800b1f8 <WRK_GetHardwareVersion>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b01      	cmp	r3, #1
 800a622:	d83e      	bhi.n	800a6a2 <WRK_Init+0xd6>
	{
		LED_Set(STANDBYLED, BLINKING, 255, 0, 0, 255, 100, 100, 0, 0, 0);
 800a624:	2300      	movs	r3, #0
 800a626:	9306      	str	r3, [sp, #24]
 800a628:	2300      	movs	r3, #0
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	2300      	movs	r3, #0
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	2364      	movs	r3, #100	; 0x64
 800a632:	9303      	str	r3, [sp, #12]
 800a634:	2364      	movs	r3, #100	; 0x64
 800a636:	9302      	str	r3, [sp, #8]
 800a638:	23ff      	movs	r3, #255	; 0xff
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	22ff      	movs	r2, #255	; 0xff
 800a644:	2102      	movs	r1, #2
 800a646:	2000      	movs	r0, #0
 800a648:	f001 fc10 	bl	800be6c <LED_Set>
		LED_Set(OUTLETLED, BLINKING, 255, 0, 0, 255, 100, 100, 0, 0, 0);
 800a64c:	2300      	movs	r3, #0
 800a64e:	9306      	str	r3, [sp, #24]
 800a650:	2300      	movs	r3, #0
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	2300      	movs	r3, #0
 800a656:	9304      	str	r3, [sp, #16]
 800a658:	2364      	movs	r3, #100	; 0x64
 800a65a:	9303      	str	r3, [sp, #12]
 800a65c:	2364      	movs	r3, #100	; 0x64
 800a65e:	9302      	str	r3, [sp, #8]
 800a660:	23ff      	movs	r3, #255	; 0xff
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	2300      	movs	r3, #0
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	2300      	movs	r3, #0
 800a66a:	22ff      	movs	r2, #255	; 0xff
 800a66c:	2102      	movs	r1, #2
 800a66e:	2002      	movs	r0, #2
 800a670:	f001 fbfc 	bl	800be6c <LED_Set>
		LED_Set(WATERTANKLEDS, BLINKING, 255, 0, 0, 255, 100, 100, 0, 0, 0);
 800a674:	2300      	movs	r3, #0
 800a676:	9306      	str	r3, [sp, #24]
 800a678:	2300      	movs	r3, #0
 800a67a:	9305      	str	r3, [sp, #20]
 800a67c:	2300      	movs	r3, #0
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	2364      	movs	r3, #100	; 0x64
 800a682:	9303      	str	r3, [sp, #12]
 800a684:	2364      	movs	r3, #100	; 0x64
 800a686:	9302      	str	r3, [sp, #8]
 800a688:	23ff      	movs	r3, #255	; 0xff
 800a68a:	9301      	str	r3, [sp, #4]
 800a68c:	2300      	movs	r3, #0
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	2300      	movs	r3, #0
 800a692:	22ff      	movs	r2, #255	; 0xff
 800a694:	2102      	movs	r1, #2
 800a696:	2000      	movs	r0, #0
 800a698:	f001 fbe8 	bl	800be6c <LED_Set>
		WRK_SetMainStatus(sHARDWAREINCOMPATIBLE);
 800a69c:	2015      	movs	r0, #21
 800a69e:	f000 fddf 	bl	800b260 <WRK_SetMainStatus>
	}
	WRK.PrepareStatus[0] = pINACTIVE;
 800a6a2:	4b06      	ldr	r3, [pc, #24]	; (800a6bc <WRK_Init+0xf0>)
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	711a      	strb	r2, [r3, #4]
}
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	2000096f 	.word	0x2000096f
 800a6b0:	20000970 	.word	0x20000970
 800a6b4:	20000971 	.word	0x20000971
 800a6b8:	20000972 	.word	0x20000972
 800a6bc:	2000095c 	.word	0x2000095c

0800a6c0 <WRK_GetPrepareStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the prepare status
//! \details    Returns the prepare status
//! \param[out]	enuPrepare WRK.PrepareStatus
enuPrepare WRK_GetPrepareStatus (void)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	af00      	add	r7, sp, #0
	return WRK.PrepareStatus[0];
 800a6c4:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <WRK_GetPrepareStatus+0x10>)
 800a6c6:	791b      	ldrb	r3, [r3, #4]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bc80      	pop	{r7}
 800a6ce:	4770      	bx	lr
 800a6d0:	2000095c 	.word	0x2000095c

0800a6d4 <WRK_GetMainStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the main status
//! \details    Returns the main status
//! \param[out]	enuStatus WRK.MainStatus
enuStatus WRK_GetMainStatus (void)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0
	return WRK.MainStatus;
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <WRK_GetMainStatus+0x10>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bc80      	pop	{r7}
 800a6e2:	4770      	bx	lr
 800a6e4:	2000095c 	.word	0x2000095c

0800a6e8 <WRK_GetSubStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the sub status
//! \details    Returns the sub status
//! \param[out]	enuStatus WRK.MainStatus
enuStatus WRK_GetSubStatus (void)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
	return WRK.SubStatus;
 800a6ec:	4b02      	ldr	r3, [pc, #8]	; (800a6f8 <WRK_GetSubStatus+0x10>)
 800a6ee:	789b      	ldrb	r3, [r3, #2]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bc80      	pop	{r7}
 800a6f6:	4770      	bx	lr
 800a6f8:	2000095c 	.word	0x2000095c

0800a6fc <WRK_HandleSequence>:
//-----------------------------------------------------------------------------
//! \brief      Handles the sequence of the coffee machine
//! \details    Handles the different modules
//! \param      None
void WRK_HandleSequence (void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
	static uint8_t TickTimer=30;
	if (TickTimer ++ < 99) return; //100 ms interval
 800a700:	4b24      	ldr	r3, [pc, #144]	; (800a794 <WRK_HandleSequence+0x98>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	b2d1      	uxtb	r1, r2
 800a708:	4a22      	ldr	r2, [pc, #136]	; (800a794 <WRK_HandleSequence+0x98>)
 800a70a:	7011      	strb	r1, [r2, #0]
 800a70c:	2b62      	cmp	r3, #98	; 0x62
 800a70e:	d93d      	bls.n	800a78c <WRK_HandleSequence+0x90>
	TickTimer = 0;
 800a710:	4b20      	ldr	r3, [pc, #128]	; (800a794 <WRK_HandleSequence+0x98>)
 800a712:	2200      	movs	r2, #0
 800a714:	701a      	strb	r2, [r3, #0]

	switch (WRK.MainStatus)
 800a716:	4b20      	ldr	r3, [pc, #128]	; (800a798 <WRK_HandleSequence+0x9c>)
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b13      	cmp	r3, #19
 800a71c:	d838      	bhi.n	800a790 <WRK_HandleSequence+0x94>
 800a71e:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <WRK_HandleSequence+0x28>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a775 	.word	0x0800a775
 800a728:	0800a791 	.word	0x0800a791
 800a72c:	0800a781 	.word	0x0800a781
 800a730:	0800a791 	.word	0x0800a791
 800a734:	0800a791 	.word	0x0800a791
 800a738:	0800a77b 	.word	0x0800a77b
 800a73c:	0800a791 	.word	0x0800a791
 800a740:	0800a791 	.word	0x0800a791
 800a744:	0800a791 	.word	0x0800a791
 800a748:	0800a791 	.word	0x0800a791
 800a74c:	0800a791 	.word	0x0800a791
 800a750:	0800a791 	.word	0x0800a791
 800a754:	0800a791 	.word	0x0800a791
 800a758:	0800a791 	.word	0x0800a791
 800a75c:	0800a791 	.word	0x0800a791
 800a760:	0800a791 	.word	0x0800a791
 800a764:	0800a791 	.word	0x0800a791
 800a768:	0800a791 	.word	0x0800a791
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a787 	.word	0x0800a787
	{
		case sUNDEFINED:
		{
			WRK_HandleUndefined();
 800a774:	f000 f812 	bl	800a79c <WRK_HandleUndefined>
			break;
 800a778:	e00b      	b.n	800a792 <WRK_HandleSequence+0x96>
		}
		case sSTANDBY:
		{
			WRK_HandleStandby();
 800a77a:	f000 f887 	bl	800a88c <WRK_HandleStandby>
			break;
 800a77e:	e008      	b.n	800a792 <WRK_HandleSequence+0x96>
		}
		case sIDLE: //Machine is switched from standby but is not performing any tasks
		{
			WRK_HandleIdle ();
 800a780:	f000 f8f8 	bl	800a974 <WRK_HandleIdle>
			break;
 800a784:	e005      	b.n	800a792 <WRK_HandleSequence+0x96>
		}
		case sPREPARE: //Machine is switched from standby but is not performing any tasks
		{
			WRK_HandlePrepare ();
 800a786:	f000 f983 	bl	800aa90 <WRK_HandlePrepare>
			break;
 800a78a:	e002      	b.n	800a792 <WRK_HandleSequence+0x96>
	if (TickTimer ++ < 99) return; //100 ms interval
 800a78c:	bf00      	nop
 800a78e:	e000      	b.n	800a792 <WRK_HandleSequence+0x96>
		}
		default:
			break;
 800a790:	bf00      	nop
	}
}
 800a792:	bd80      	pop	{r7, pc}
 800a794:	20000004 	.word	0x20000004
 800a798:	2000095c 	.word	0x2000095c

0800a79c <WRK_HandleUndefined>:
//-----------------------------------------------------------------------------
//! \brief      Handles the UNDEFINED status of sequence of the grinder
//! \details    Handles the UNDEFINED status of sequence of the grinder
//! \param      None
void WRK_HandleUndefined (void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08a      	sub	sp, #40	; 0x28
 800a7a0:	af08      	add	r7, sp, #32
	switch (WRK.SubStatus)
 800a7a2:	4b36      	ldr	r3, [pc, #216]	; (800a87c <WRK_HandleUndefined+0xe0>)
 800a7a4:	789b      	ldrb	r3, [r3, #2]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <WRK_HandleUndefined+0x14>
 800a7aa:	2b06      	cmp	r3, #6
 800a7ac:	d023      	beq.n	800a7f6 <WRK_HandleUndefined+0x5a>
				WRK_SetMainStatus(sSTANDBY);
			}
			break;
		}
		default:
			break;
 800a7ae:	e061      	b.n	800a874 <WRK_HandleUndefined+0xd8>
			LED_Set(STANDBYLED, BLINKING, 0, 0, 255, 50, 500, 500, 5, 0, 0); //Blinking Blue
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9306      	str	r3, [sp, #24]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9305      	str	r3, [sp, #20]
 800a7b8:	2305      	movs	r3, #5
 800a7ba:	9304      	str	r3, [sp, #16]
 800a7bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a7c0:	9303      	str	r3, [sp, #12]
 800a7c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a7c6:	9302      	str	r3, [sp, #8]
 800a7c8:	2332      	movs	r3, #50	; 0x32
 800a7ca:	9301      	str	r3, [sp, #4]
 800a7cc:	23ff      	movs	r3, #255	; 0xff
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	2102      	movs	r1, #2
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f001 fb48 	bl	800be6c <LED_Set>
			if (!DUMMYMODESCALE)
 800a7dc:	4b28      	ldr	r3, [pc, #160]	; (800a880 <WRK_HandleUndefined+0xe4>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <WRK_HandleUndefined+0x4c>
				SCL_Tare();
 800a7e4:	f7fe ff1c 	bl	8009620 <SCL_Tare>
			ADJ.Timer = 0;
 800a7e8:	4b26      	ldr	r3, [pc, #152]	; (800a884 <WRK_HandleUndefined+0xe8>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	611a      	str	r2, [r3, #16]
			WRK.SubStatus = sWAIT;
 800a7ee:	4b23      	ldr	r3, [pc, #140]	; (800a87c <WRK_HandleUndefined+0xe0>)
 800a7f0:	2206      	movs	r2, #6
 800a7f2:	709a      	strb	r2, [r3, #2]
			break;
 800a7f4:	e03e      	b.n	800a874 <WRK_HandleUndefined+0xd8>
			if (!DUMMYMODEGRINDER)
 800a7f6:	4b24      	ldr	r3, [pc, #144]	; (800a888 <WRK_HandleUndefined+0xec>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d122      	bne.n	800a844 <WRK_HandleUndefined+0xa8>
				uint8_t ReturnValue = ADJ_HandleTask (sHOME);
 800a7fe:	2016      	movs	r0, #22
 800a800:	f7fc fc4a 	bl	8007098 <ADJ_HandleTask>
 800a804:	4603      	mov	r3, r0
 800a806:	71fb      	strb	r3, [r7, #7]
				if ((ReturnValue == TASK_READY)||(ReturnValue == TASK_ERROR))
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d002      	beq.n	800a814 <WRK_HandleUndefined+0x78>
 800a80e:	79fb      	ldrb	r3, [r7, #7]
 800a810:	2b02      	cmp	r3, #2
 800a812:	d12e      	bne.n	800a872 <WRK_HandleUndefined+0xd6>
					LED_Set(STANDBYLED, BREATHING, 255, 0, 0, 50, 0, 0, 5, 0, 0); //Breathing Red
 800a814:	2300      	movs	r3, #0
 800a816:	9306      	str	r3, [sp, #24]
 800a818:	2300      	movs	r3, #0
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	2305      	movs	r3, #5
 800a81e:	9304      	str	r3, [sp, #16]
 800a820:	2300      	movs	r3, #0
 800a822:	9303      	str	r3, [sp, #12]
 800a824:	2300      	movs	r3, #0
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	2332      	movs	r3, #50	; 0x32
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	2300      	movs	r3, #0
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	2300      	movs	r3, #0
 800a832:	22ff      	movs	r2, #255	; 0xff
 800a834:	2103      	movs	r1, #3
 800a836:	2000      	movs	r0, #0
 800a838:	f001 fb18 	bl	800be6c <LED_Set>
					WRK_SetMainStatus(sSTANDBY);
 800a83c:	2005      	movs	r0, #5
 800a83e:	f000 fd0f 	bl	800b260 <WRK_SetMainStatus>
			break;
 800a842:	e016      	b.n	800a872 <WRK_HandleUndefined+0xd6>
				LED_Set(STANDBYLED, BREATHING, 255, 0, 0, 50, 0, 0, 5, 0, 0); //Breathing Red
 800a844:	2300      	movs	r3, #0
 800a846:	9306      	str	r3, [sp, #24]
 800a848:	2300      	movs	r3, #0
 800a84a:	9305      	str	r3, [sp, #20]
 800a84c:	2305      	movs	r3, #5
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	2300      	movs	r3, #0
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	2300      	movs	r3, #0
 800a856:	9302      	str	r3, [sp, #8]
 800a858:	2332      	movs	r3, #50	; 0x32
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	2300      	movs	r3, #0
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	2300      	movs	r3, #0
 800a862:	22ff      	movs	r2, #255	; 0xff
 800a864:	2103      	movs	r1, #3
 800a866:	2000      	movs	r0, #0
 800a868:	f001 fb00 	bl	800be6c <LED_Set>
				WRK_SetMainStatus(sSTANDBY);
 800a86c:	2005      	movs	r0, #5
 800a86e:	f000 fcf7 	bl	800b260 <WRK_SetMainStatus>
			break;
 800a872:	bf00      	nop
	}

}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	2000095c 	.word	0x2000095c
 800a880:	20000972 	.word	0x20000972
 800a884:	2000012c 	.word	0x2000012c
 800a888:	2000096f 	.word	0x2000096f

0800a88c <WRK_HandleStandby>:
//-----------------------------------------------------------------------------
//! \brief      Handles the STANDBY status of sequence of the coffee machine
//! \details    Handles the STANDBY status of sequence of the coffee machine
//! \param      None
void WRK_HandleStandby (void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af08      	add	r7, sp, #32
	switch (WRK.SubStatus)
 800a892:	4b36      	ldr	r3, [pc, #216]	; (800a96c <WRK_HandleStandby+0xe0>)
 800a894:	789b      	ldrb	r3, [r3, #2]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <WRK_HandleStandby+0x14>
 800a89a:	2b06      	cmp	r3, #6
 800a89c:	d036      	beq.n	800a90c <WRK_HandleStandby+0x80>
				WRK.MainStatus = sSTANDBY; //Not really needed, but put here to respond to UART quickly, since otherwise a time out would occur
			}
			break;
		}
		default:
			break;
 800a89e:	e061      	b.n	800a964 <WRK_HandleStandby+0xd8>
			if (LED[STANDBYLED].Effect == SWITCHEDON)
 800a8a0:	4b33      	ldr	r3, [pc, #204]	; (800a970 <WRK_HandleStandby+0xe4>)
 800a8a2:	7c1b      	ldrb	r3, [r3, #16]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d115      	bne.n	800a8d4 <WRK_HandleStandby+0x48>
				LED_Set(STANDBYLED, FADEOUT, 255, 255, 255, LED[STANDBYLED].Intensity, 0, 0, 5, 0, 0); //Fade out
 800a8a8:	4b31      	ldr	r3, [pc, #196]	; (800a970 <WRK_HandleStandby+0xe4>)
 800a8aa:	7d1b      	ldrb	r3, [r3, #20]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	9206      	str	r2, [sp, #24]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	9205      	str	r2, [sp, #20]
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	9204      	str	r2, [sp, #16]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	9203      	str	r2, [sp, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	9202      	str	r2, [sp, #8]
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	23ff      	movs	r3, #255	; 0xff
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	23ff      	movs	r3, #255	; 0xff
 800a8c8:	22ff      	movs	r2, #255	; 0xff
 800a8ca:	2105      	movs	r1, #5
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	f001 facd 	bl	800be6c <LED_Set>
 800a8d2:	e017      	b.n	800a904 <WRK_HandleStandby+0x78>
			else if (LED[STANDBYLED].Effect != FADEOUT)
 800a8d4:	4b26      	ldr	r3, [pc, #152]	; (800a970 <WRK_HandleStandby+0xe4>)
 800a8d6:	7c1b      	ldrb	r3, [r3, #16]
 800a8d8:	2b05      	cmp	r3, #5
 800a8da:	d013      	beq.n	800a904 <WRK_HandleStandby+0x78>
				LED_Set(STANDBYLED, BREATHING, 255, 0, 0, 50, 0, 0, 5, 0, 0); //Breathing Red
 800a8dc:	2300      	movs	r3, #0
 800a8de:	9306      	str	r3, [sp, #24]
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9305      	str	r3, [sp, #20]
 800a8e4:	2305      	movs	r3, #5
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	9303      	str	r3, [sp, #12]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9302      	str	r3, [sp, #8]
 800a8f0:	2332      	movs	r3, #50	; 0x32
 800a8f2:	9301      	str	r3, [sp, #4]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	22ff      	movs	r2, #255	; 0xff
 800a8fc:	2103      	movs	r1, #3
 800a8fe:	2000      	movs	r0, #0
 800a900:	f001 fab4 	bl	800be6c <LED_Set>
			WRK_SetSubStatus (sWAIT);
 800a904:	2006      	movs	r0, #6
 800a906:	f000 fcc5 	bl	800b294 <WRK_SetSubStatus>
			break;
 800a90a:	e02b      	b.n	800a964 <WRK_HandleStandby+0xd8>
			if (LED[STANDBYLED].Effect == SWITCHEDOFF)
 800a90c:	4b18      	ldr	r3, [pc, #96]	; (800a970 <WRK_HandleStandby+0xe4>)
 800a90e:	7c1b      	ldrb	r3, [r3, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d113      	bne.n	800a93c <WRK_HandleStandby+0xb0>
				LED_Set(STANDBYLED, BREATHING, 255, 0, 0, 50, 0, 0, 5, 0, 0); //Breathing Red
 800a914:	2300      	movs	r3, #0
 800a916:	9306      	str	r3, [sp, #24]
 800a918:	2300      	movs	r3, #0
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	2305      	movs	r3, #5
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	2300      	movs	r3, #0
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	2300      	movs	r3, #0
 800a926:	9302      	str	r3, [sp, #8]
 800a928:	2332      	movs	r3, #50	; 0x32
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	2300      	movs	r3, #0
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	2300      	movs	r3, #0
 800a932:	22ff      	movs	r2, #255	; 0xff
 800a934:	2103      	movs	r1, #3
 800a936:	2000      	movs	r0, #0
 800a938:	f001 fa98 	bl	800be6c <LED_Set>
			if (WRK_GetAction(MTypeSwitchOn)) //Received Switch to IDLE command
 800a93c:	2052      	movs	r0, #82	; 0x52
 800a93e:	f000 fc0b 	bl	800b158 <WRK_GetAction>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <WRK_HandleStandby+0xc4>
				WRK_SetMainStatus(sIDLE);
 800a948:	2002      	movs	r0, #2
 800a94a:	f000 fc89 	bl	800b260 <WRK_SetMainStatus>
			break;
 800a94e:	e008      	b.n	800a962 <WRK_HandleStandby+0xd6>
			else if (WRK_GetAction(MTypeStandby)) //Received Switch to STANDBY command
 800a950:	2053      	movs	r0, #83	; 0x53
 800a952:	f000 fc01 	bl	800b158 <WRK_GetAction>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d002      	beq.n	800a962 <WRK_HandleStandby+0xd6>
				WRK.MainStatus = sSTANDBY; //Not really needed, but put here to respond to UART quickly, since otherwise a time out would occur
 800a95c:	4b03      	ldr	r3, [pc, #12]	; (800a96c <WRK_HandleStandby+0xe0>)
 800a95e:	2205      	movs	r2, #5
 800a960:	701a      	strb	r2, [r3, #0]
			break;
 800a962:	bf00      	nop
	}
}
 800a964:	bf00      	nop
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	2000095c 	.word	0x2000095c
 800a970:	20000a38 	.word	0x20000a38

0800a974 <WRK_HandleIdle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the IDLE status of sequence of the grinder
//! \details    Handles the IDLE status of sequence of the grinder
//! \param      None
void WRK_HandleIdle (void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af08      	add	r7, sp, #32
	switch (WRK.SubStatus)
 800a97a:	4b37      	ldr	r3, [pc, #220]	; (800aa58 <WRK_HandleIdle+0xe4>)
 800a97c:	789b      	ldrb	r3, [r3, #2]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d002      	beq.n	800a988 <WRK_HandleIdle+0x14>
 800a982:	2b06      	cmp	r3, #6
 800a984:	d01f      	beq.n	800a9c6 <WRK_HandleIdle+0x52>
			else
				SCL_Measure(1);
			break;
		}
		default:
			break;
 800a986:	e064      	b.n	800aa52 <WRK_HandleIdle+0xde>
			if (DUMMYMODEGRINDER)
 800a988:	4b34      	ldr	r3, [pc, #208]	; (800aa5c <WRK_HandleIdle+0xe8>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <WRK_HandleIdle+0x22>
				gRecipe.Valid=1;
 800a990:	4b33      	ldr	r3, [pc, #204]	; (800aa60 <WRK_HandleIdle+0xec>)
 800a992:	2201      	movs	r2, #1
 800a994:	701a      	strb	r2, [r3, #0]
			LED_Set(STANDBYLED, FADEIN, 255, 255, 255, 50, 0, 0, 5, 0, 0); //On White
 800a996:	2300      	movs	r3, #0
 800a998:	9306      	str	r3, [sp, #24]
 800a99a:	2300      	movs	r3, #0
 800a99c:	9305      	str	r3, [sp, #20]
 800a99e:	2305      	movs	r3, #5
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9303      	str	r3, [sp, #12]
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	9302      	str	r3, [sp, #8]
 800a9aa:	2332      	movs	r3, #50	; 0x32
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	23ff      	movs	r3, #255	; 0xff
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	23ff      	movs	r3, #255	; 0xff
 800a9b4:	22ff      	movs	r2, #255	; 0xff
 800a9b6:	2104      	movs	r1, #4
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	f001 fa57 	bl	800be6c <LED_Set>
			WRK_SetSubStatus (sWAIT);
 800a9be:	2006      	movs	r0, #6
 800a9c0:	f000 fc68 	bl	800b294 <WRK_SetSubStatus>
			break;
 800a9c4:	e045      	b.n	800aa52 <WRK_HandleIdle+0xde>
			if (WRK_GetAction(MTypeStandby))//Received Switch to STANDBY command
 800a9c6:	2053      	movs	r0, #83	; 0x53
 800a9c8:	f000 fbc6 	bl	800b158 <WRK_GetAction>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <WRK_HandleIdle+0x66>
				WRK_SetMainStatus(sSTANDBY);
 800a9d2:	2005      	movs	r0, #5
 800a9d4:	f000 fc44 	bl	800b260 <WRK_SetMainStatus>
			break;
 800a9d8:	e03a      	b.n	800aa50 <WRK_HandleIdle+0xdc>
			else if (WRK_GetAction(MTypeSwitchOn)) //Received Switch to IDLE command
 800a9da:	2052      	movs	r0, #82	; 0x52
 800a9dc:	f000 fbbc 	bl	800b158 <WRK_GetAction>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <WRK_HandleIdle+0x7a>
				WRK.MainStatus = sIDLE; //Not really needed, but put here to respond to UART quickly, since otherwise a time out would occur
 800a9e6:	4b1c      	ldr	r3, [pc, #112]	; (800aa58 <WRK_HandleIdle+0xe4>)
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	701a      	strb	r2, [r3, #0]
			break;
 800a9ec:	e030      	b.n	800aa50 <WRK_HandleIdle+0xdc>
						(WRK_GetAction(MTypeStartRecipe1)) ||  //Received Command 0x11: Start recipe 1
 800a9ee:	2011      	movs	r0, #17
 800a9f0:	f000 fbb2 	bl	800b158 <WRK_GetAction>
 800a9f4:	4603      	mov	r3, r0
			else if (
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d104      	bne.n	800aa04 <WRK_HandleIdle+0x90>
						(FIL_GetTrigger() == 1) //Received trigger
 800a9fa:	f000 fce9 	bl	800b3d0 <FIL_GetTrigger>
 800a9fe:	4603      	mov	r3, r0
						(WRK_GetAction(MTypeStartRecipe1)) ||  //Received Command 0x11: Start recipe 1
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d121      	bne.n	800aa48 <WRK_HandleIdle+0xd4>
				if (((CON.Status != cNOTPRESENT)||(DUMMYMODERFID))&&(gRecipe.Valid == 1))
 800aa04:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <WRK_HandleIdle+0xf0>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d103      	bne.n	800aa14 <WRK_HandleIdle+0xa0>
 800aa0c:	4b16      	ldr	r3, [pc, #88]	; (800aa68 <WRK_HandleIdle+0xf4>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d015      	beq.n	800aa40 <WRK_HandleIdle+0xcc>
 800aa14:	4b12      	ldr	r3, [pc, #72]	; (800aa60 <WRK_HandleIdle+0xec>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d111      	bne.n	800aa40 <WRK_HandleIdle+0xcc>
					if (DUMMYMODEGRINDER) ADJ.GetGrindSize = 300;
 800aa1c:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <WRK_HandleIdle+0xe8>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d003      	beq.n	800aa2c <WRK_HandleIdle+0xb8>
 800aa24:	4b11      	ldr	r3, [pc, #68]	; (800aa6c <WRK_HandleIdle+0xf8>)
 800aa26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa2a:	809a      	strh	r2, [r3, #4]
					gRecipe.CurrentBlock = 0;
 800aa2c:	4b0c      	ldr	r3, [pc, #48]	; (800aa60 <WRK_HandleIdle+0xec>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	70da      	strb	r2, [r3, #3]
					gRecipe.Active = 1;
 800aa32:	4b0b      	ldr	r3, [pc, #44]	; (800aa60 <WRK_HandleIdle+0xec>)
 800aa34:	2201      	movs	r2, #1
 800aa36:	705a      	strb	r2, [r3, #1]
					WRK_SetMainStatus(sPREPARE);
 800aa38:	2013      	movs	r0, #19
 800aa3a:	f000 fc11 	bl	800b260 <WRK_SetMainStatus>
				if (((CON.Status != cNOTPRESENT)||(DUMMYMODERFID))&&(gRecipe.Valid == 1))
 800aa3e:	e007      	b.n	800aa50 <WRK_HandleIdle+0xdc>
					SCL_Measure(1);
 800aa40:	2001      	movs	r0, #1
 800aa42:	f7fe fd53 	bl	80094ec <SCL_Measure>
				if (((CON.Status != cNOTPRESENT)||(DUMMYMODERFID))&&(gRecipe.Valid == 1))
 800aa46:	e003      	b.n	800aa50 <WRK_HandleIdle+0xdc>
				SCL_Measure(1);
 800aa48:	2001      	movs	r0, #1
 800aa4a:	f7fe fd4f 	bl	80094ec <SCL_Measure>
			break;
 800aa4e:	e7ff      	b.n	800aa50 <WRK_HandleIdle+0xdc>
 800aa50:	bf00      	nop
	}
}
 800aa52:	bf00      	nop
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	2000095c 	.word	0x2000095c
 800aa5c:	2000096f 	.word	0x2000096f
 800aa60:	20000598 	.word	0x20000598
 800aa64:	200001d4 	.word	0x200001d4
 800aa68:	20000971 	.word	0x20000971
 800aa6c:	2000012c 	.word	0x2000012c

0800aa70 <WRK_ResetAllModules>:
//-----------------------------------------------------------------------------
//! \brief      Handles the reset of all modules after recipe is finished
//! \details    Makes sure that no module is still active unexpectedly
//! \param[in]  uint8_t newRecipe
void WRK_ResetAllModules(uint8_t newRecipe)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	4603      	mov	r3, r0
 800aa78:	71fb      	strb	r3, [r7, #7]
	gRecipe.Active = 0;
 800aa7a:	4b04      	ldr	r3, [pc, #16]	; (800aa8c <WRK_ResetAllModules+0x1c>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	705a      	strb	r2, [r3, #1]
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bc80      	pop	{r7}
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20000598 	.word	0x20000598

0800aa90 <WRK_HandlePrepare>:
//-----------------------------------------------------------------------------
//! \brief      Handles the PREPARE status of sequence of the coffee machine
//! \details    Handles the PREPARE status of sequence of the coffee machine
//! \param      None
void WRK_HandlePrepare (void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	af00      	add	r7, sp, #0
	switch (WRK.SubStatus)
 800aa94:	4b1a      	ldr	r3, [pc, #104]	; (800ab00 <WRK_HandlePrepare+0x70>)
 800aa96:	789b      	ldrb	r3, [r3, #2]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <WRK_HandlePrepare+0x12>
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d00f      	beq.n	800aac0 <WRK_HandlePrepare+0x30>
				gRecipe.Active = 1;
			}
			break;
		}
		default:
			break;
 800aaa0:	e02b      	b.n	800aafa <WRK_HandlePrepare+0x6a>
			if (gRecipe.Active == 0)
 800aaa2:	4b18      	ldr	r3, [pc, #96]	; (800ab04 <WRK_HandlePrepare+0x74>)
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <WRK_HandlePrepare+0x28>
				WRK_ResetAllModules(RECIPE1);
 800aaaa:	2000      	movs	r0, #0
 800aaac:	f7ff ffe0 	bl	800aa70 <WRK_ResetAllModules>
				WRK_SetMainStatus(sIDLE);
 800aab0:	2002      	movs	r0, #2
 800aab2:	f000 fbd5 	bl	800b260 <WRK_SetMainStatus>
			break;
 800aab6:	e020      	b.n	800aafa <WRK_HandlePrepare+0x6a>
				WRK_SetSubStatus (sACTIVE);
 800aab8:	2003      	movs	r0, #3
 800aaba:	f000 fbeb 	bl	800b294 <WRK_SetSubStatus>
			break;
 800aabe:	e01c      	b.n	800aafa <WRK_HandlePrepare+0x6a>
			if (gRecipe.Active == 1) //Recipe x started
 800aac0:	4b10      	ldr	r3, [pc, #64]	; (800ab04 <WRK_HandlePrepare+0x74>)
 800aac2:	785b      	ldrb	r3, [r3, #1]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d101      	bne.n	800aacc <WRK_HandlePrepare+0x3c>
				WRK_HandlePrepareRecipe();
 800aac8:	f000 f858 	bl	800ab7c <WRK_HandlePrepareRecipe>
			if (gRecipe.Active == 0)
 800aacc:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <WRK_HandlePrepare+0x74>)
 800aace:	785b      	ldrb	r3, [r3, #1]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d105      	bne.n	800aae0 <WRK_HandlePrepare+0x50>
				WRK_ResetAllModules(RECIPE1);
 800aad4:	2000      	movs	r0, #0
 800aad6:	f7ff ffcb 	bl	800aa70 <WRK_ResetAllModules>
				WRK_SetMainStatus(sIDLE);
 800aada:	2002      	movs	r0, #2
 800aadc:	f000 fbc0 	bl	800b260 <WRK_SetMainStatus>
			if (WRK_GetAction(MTypeStartRecipe1)) //Received Command 0x11: Start recipe 1
 800aae0:	2011      	movs	r0, #17
 800aae2:	f000 fb39 	bl	800b158 <WRK_GetAction>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d005      	beq.n	800aaf8 <WRK_HandlePrepare+0x68>
				gRecipe.CurrentBlock = 0;
 800aaec:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <WRK_HandlePrepare+0x74>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	70da      	strb	r2, [r3, #3]
				gRecipe.Active = 1;
 800aaf2:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <WRK_HandlePrepare+0x74>)
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	705a      	strb	r2, [r3, #1]
			break;
 800aaf8:	bf00      	nop
	}
}
 800aafa:	bf00      	nop
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	2000095c 	.word	0x2000095c
 800ab04:	20000598 	.word	0x20000598

0800ab08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	if (htim == &htim5)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a17      	ldr	r2, [pc, #92]	; (800ab70 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d126      	bne.n	800ab66 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		if (HOP.Status == hDUMPPOSITION)
 800ab18:	4b16      	ldr	r3, [pc, #88]	; (800ab74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	d10f      	bne.n	800ab40 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			HAL_TIM_Base_Stop_IT (&htim5);
 800ab20:	4813      	ldr	r0, [pc, #76]	; (800ab70 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800ab22:	f007 fd35 	bl	8012590 <HAL_TIM_Base_Stop_IT>
			TIM5->CNT = 0;
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24
			HOP_SetAngle(180); //return to fill position
 800ab2c:	20b4      	movs	r0, #180	; 0xb4
 800ab2e:	f7fe f88b 	bl	8008c48 <HOP_SetAngle>
			HOP.Counter = 0;
 800ab32:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	615a      	str	r2, [r3, #20]
			HOP.Status = hCHECKWEIGHT;
 800ab38:	4b0e      	ldr	r3, [pc, #56]	; (800ab74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800ab3a:	2207      	movs	r2, #7
 800ab3c:	701a      	strb	r2, [r3, #0]
			HOP_SetAngle(180); //return to fill position
			HOP.Counter = 0;
			HOP.Status = hCHECKWEIGHT;
		}
	}
}
 800ab3e:	e012      	b.n	800ab66 <HAL_TIM_PeriodElapsedCallback+0x5e>
		else if (HOP.Status == hDOSEPOSITION)
 800ab40:	4b0c      	ldr	r3, [pc, #48]	; (800ab74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b05      	cmp	r3, #5
 800ab46:	d10e      	bne.n	800ab66 <HAL_TIM_PeriodElapsedCallback+0x5e>
			HAL_TIM_Base_Stop_IT (&htim5);
 800ab48:	4809      	ldr	r0, [pc, #36]	; (800ab70 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800ab4a:	f007 fd21 	bl	8012590 <HAL_TIM_Base_Stop_IT>
			TIM5->CNT = 0;
 800ab4e:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	625a      	str	r2, [r3, #36]	; 0x24
			HOP_SetAngle(180); //return to fill position
 800ab54:	20b4      	movs	r0, #180	; 0xb4
 800ab56:	f7fe f877 	bl	8008c48 <HOP_SetAngle>
			HOP.Counter = 0;
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	615a      	str	r2, [r3, #20]
			HOP.Status = hCHECKWEIGHT;
 800ab60:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800ab62:	2207      	movs	r2, #7
 800ab64:	701a      	strb	r2, [r3, #0]
}
 800ab66:	bf00      	nop
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20000788 	.word	0x20000788
 800ab74:	20000568 	.word	0x20000568
 800ab78:	40000c00 	.word	0x40000c00

0800ab7c <WRK_HandlePrepareRecipe>:
//-----------------------------------------------------------------------------
//! \brief      Handles the actual grinding
//! \details    Handles the action needed to grind the coffee
//! \params		None
void WRK_HandlePrepareRecipe (void)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	af00      	add	r7, sp, #0
	static uint32_t PrepareCounter = 0;
	static uint8_t ADJ_RemovePlayFlag;
	static uint8_t NoAdjustNeeded;

	if (PrepareCounter < 65535) PrepareCounter += 1; //1 tick = 100 ms
 800ab80:	4ba1      	ldr	r3, [pc, #644]	; (800ae08 <WRK_HandlePrepareRecipe+0x28c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d804      	bhi.n	800ab96 <WRK_HandlePrepareRecipe+0x1a>
 800ab8c:	4b9e      	ldr	r3, [pc, #632]	; (800ae08 <WRK_HandlePrepareRecipe+0x28c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3301      	adds	r3, #1
 800ab92:	4a9d      	ldr	r2, [pc, #628]	; (800ae08 <WRK_HandlePrepareRecipe+0x28c>)
 800ab94:	6013      	str	r3, [r2, #0]

	if (WRK_GetAction(MTypeStopRecipe1)) //Received Command 0x14: Stop preparation
 800ab96:	2014      	movs	r0, #20
 800ab98:	f000 fade 	bl	800b158 <WRK_GetAction>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d009      	beq.n	800abb6 <WRK_HandlePrepareRecipe+0x3a>
	{
		//Switch off everything in a safe way
		WRK_ResetAllModules(0);
 800aba2:	2000      	movs	r0, #0
 800aba4:	f7ff ff64 	bl	800aa70 <WRK_ResetAllModules>
		gRecipe.Active = 0;
 800aba8:	4b98      	ldr	r3, [pc, #608]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800abaa:	2200      	movs	r2, #0
 800abac:	705a      	strb	r2, [r3, #1]
		WRK.PrepareStatus[0] = pINACTIVE;
 800abae:	4b98      	ldr	r3, [pc, #608]	; (800ae10 <WRK_HandlePrepareRecipe+0x294>)
 800abb0:	2202      	movs	r2, #2
 800abb2:	711a      	strb	r2, [r3, #4]
			}
			default:
				break;
		}
	}
}
 800abb4:	e225      	b.n	800b002 <WRK_HandlePrepareRecipe+0x486>
		switch (WRK.PrepareStatus[0])
 800abb6:	4b96      	ldr	r3, [pc, #600]	; (800ae10 <WRK_HandlePrepareRecipe+0x294>)
 800abb8:	791b      	ldrb	r3, [r3, #4]
 800abba:	2b09      	cmp	r3, #9
 800abbc:	f200 821a 	bhi.w	800aff4 <WRK_HandlePrepareRecipe+0x478>
 800abc0:	a201      	add	r2, pc, #4	; (adr r2, 800abc8 <WRK_HandlePrepareRecipe+0x4c>)
 800abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc6:	bf00      	nop
 800abc8:	0800abf1 	.word	0x0800abf1
 800abcc:	0800aff5 	.word	0x0800aff5
 800abd0:	0800abf1 	.word	0x0800abf1
 800abd4:	0800aff5 	.word	0x0800aff5
 800abd8:	0800aff5 	.word	0x0800aff5
 800abdc:	0800aff5 	.word	0x0800aff5
 800abe0:	0800ae3d 	.word	0x0800ae3d
 800abe4:	0800aff5 	.word	0x0800aff5
 800abe8:	0800afcd 	.word	0x0800afcd
 800abec:	0800ad0b 	.word	0x0800ad0b
				if (abs(gRecipe.RecipeBlocks[0].GrindSize - ADJ.GetGrindSize) <= ADJ.GrindSizeAccuracy) //No need to adjust
 800abf0:	4b86      	ldr	r3, [pc, #536]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800abf2:	88db      	ldrh	r3, [r3, #6]
 800abf4:	461a      	mov	r2, r3
 800abf6:	4b87      	ldr	r3, [pc, #540]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800abf8:	889b      	ldrh	r3, [r3, #4]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bfb8      	it	lt
 800ac00:	425b      	neglt	r3, r3
 800ac02:	4a84      	ldr	r2, [pc, #528]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac04:	88d2      	ldrh	r2, [r2, #6]
 800ac06:	4293      	cmp	r3, r2
 800ac08:	dc03      	bgt.n	800ac12 <WRK_HandlePrepareRecipe+0x96>
					NoAdjustNeeded = 1;
 800ac0a:	4b83      	ldr	r3, [pc, #524]	; (800ae18 <WRK_HandlePrepareRecipe+0x29c>)
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	701a      	strb	r2, [r3, #0]
 800ac10:	e046      	b.n	800aca0 <WRK_HandlePrepareRecipe+0x124>
					NoAdjustNeeded = 0;
 800ac12:	4b81      	ldr	r3, [pc, #516]	; (800ae18 <WRK_HandlePrepareRecipe+0x29c>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
					if (ADJ.GetGrindSize >= gRecipe.RecipeBlocks[0].GrindSize + ADJ.Play) //No play compensation needed
 800ac18:	4b7e      	ldr	r3, [pc, #504]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac1a:	889b      	ldrh	r3, [r3, #4]
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4b7b      	ldr	r3, [pc, #492]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800ac20:	88db      	ldrh	r3, [r3, #6]
 800ac22:	4619      	mov	r1, r3
 800ac24:	4b7b      	ldr	r3, [pc, #492]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac26:	891b      	ldrh	r3, [r3, #8]
 800ac28:	440b      	add	r3, r1
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	db1a      	blt.n	800ac64 <WRK_HandlePrepareRecipe+0xe8>
						ADJ.SetGrindSize = gRecipe.RecipeBlocks[0].GrindSize;
 800ac2e:	4b77      	ldr	r3, [pc, #476]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800ac30:	88da      	ldrh	r2, [r3, #6]
 800ac32:	4b78      	ldr	r3, [pc, #480]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac34:	805a      	strh	r2, [r3, #2]
						ADJ_Motor.SetPosition = (ADJ.SetGrindSize - ADJ.HomeSize)* ADJ_PULSESPER10UM / 10;
 800ac36:	4b77      	ldr	r3, [pc, #476]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	4b75      	ldr	r3, [pc, #468]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac3e:	895b      	ldrh	r3, [r3, #10]
 800ac40:	1ad2      	subs	r2, r2, r3
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	015a      	lsls	r2, r3, #5
 800ac4a:	4413      	add	r3, r2
 800ac4c:	4a73      	ldr	r2, [pc, #460]	; (800ae1c <WRK_HandlePrepareRecipe+0x2a0>)
 800ac4e:	fb82 1203 	smull	r1, r2, r2, r3
 800ac52:	1092      	asrs	r2, r2, #2
 800ac54:	17db      	asrs	r3, r3, #31
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	4a71      	ldr	r2, [pc, #452]	; (800ae20 <WRK_HandlePrepareRecipe+0x2a4>)
 800ac5a:	6153      	str	r3, [r2, #20]
						ADJ_RemovePlayFlag = 1;
 800ac5c:	4b71      	ldr	r3, [pc, #452]	; (800ae24 <WRK_HandlePrepareRecipe+0x2a8>)
 800ac5e:	2201      	movs	r2, #1
 800ac60:	701a      	strb	r2, [r3, #0]
 800ac62:	e01d      	b.n	800aca0 <WRK_HandlePrepareRecipe+0x124>
						ADJ.SetGrindSize = gRecipe.RecipeBlocks[0].GrindSize + ADJ.Play;
 800ac64:	4b69      	ldr	r3, [pc, #420]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800ac66:	88da      	ldrh	r2, [r3, #6]
 800ac68:	4b6a      	ldr	r3, [pc, #424]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac6a:	891b      	ldrh	r3, [r3, #8]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	4b68      	ldr	r3, [pc, #416]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac72:	805a      	strh	r2, [r3, #2]
						ADJ_Motor.SetPosition = (ADJ.SetGrindSize - ADJ.HomeSize)* ADJ_PULSESPER10UM / 10;
 800ac74:	4b67      	ldr	r3, [pc, #412]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac76:	885b      	ldrh	r3, [r3, #2]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	4b66      	ldr	r3, [pc, #408]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ac7c:	895b      	ldrh	r3, [r3, #10]
 800ac7e:	1ad2      	subs	r2, r2, r3
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	015a      	lsls	r2, r3, #5
 800ac88:	4413      	add	r3, r2
 800ac8a:	4a64      	ldr	r2, [pc, #400]	; (800ae1c <WRK_HandlePrepareRecipe+0x2a0>)
 800ac8c:	fb82 1203 	smull	r1, r2, r2, r3
 800ac90:	1092      	asrs	r2, r2, #2
 800ac92:	17db      	asrs	r3, r3, #31
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	4a62      	ldr	r2, [pc, #392]	; (800ae20 <WRK_HandlePrepareRecipe+0x2a4>)
 800ac98:	6153      	str	r3, [r2, #20]
						ADJ_RemovePlayFlag = 0;
 800ac9a:	4b62      	ldr	r3, [pc, #392]	; (800ae24 <WRK_HandlePrepareRecipe+0x2a8>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	701a      	strb	r2, [r3, #0]
				HOP.Status = hFILLPOSITION;
 800aca0:	4b61      	ldr	r3, [pc, #388]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800aca2:	2206      	movs	r2, #6
 800aca4:	701a      	strb	r2, [r3, #0]
				HOP_SetAngle(90); //Fill the hopper free-wheel compartment
 800aca6:	205a      	movs	r0, #90	; 0x5a
 800aca8:	f7fd ffce 	bl	8008c48 <HOP_SetAngle>
				HOP.TimerValue = (uint32_t) (gRecipe.RecipeBlocks[0].ShutterTime);//GrindWeight * 5 / 2); //Initial shutter time
 800acac:	4b57      	ldr	r3, [pc, #348]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800acae:	895b      	ldrh	r3, [r3, #10]
 800acb0:	461a      	mov	r2, r3
 800acb2:	4b5d      	ldr	r3, [pc, #372]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800acb4:	611a      	str	r2, [r3, #16]
				if (HOP.TimerValue < HOP.TimeMin) HOP.TimerValue = HOP.TimeMin;
 800acb6:	4b5c      	ldr	r3, [pc, #368]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	4a5b      	ldr	r2, [pc, #364]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800acbc:	8852      	ldrh	r2, [r2, #2]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d204      	bcs.n	800accc <WRK_HandlePrepareRecipe+0x150>
 800acc2:	4b59      	ldr	r3, [pc, #356]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800acc4:	885b      	ldrh	r3, [r3, #2]
 800acc6:	461a      	mov	r2, r3
 800acc8:	4b57      	ldr	r3, [pc, #348]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800acca:	611a      	str	r2, [r3, #16]
				if (HOP.TimerValue > HOP.TimeMax) HOP.TimerValue = HOP.TimeMax;
 800accc:	4b56      	ldr	r3, [pc, #344]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	4a55      	ldr	r2, [pc, #340]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800acd2:	8892      	ldrh	r2, [r2, #4]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d904      	bls.n	800ace2 <WRK_HandlePrepareRecipe+0x166>
 800acd8:	4b53      	ldr	r3, [pc, #332]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800acda:	889b      	ldrh	r3, [r3, #4]
 800acdc:	461a      	mov	r2, r3
 800acde:	4b52      	ldr	r3, [pc, #328]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800ace0:	611a      	str	r2, [r3, #16]
				HOP.Counter = 0;
 800ace2:	4b51      	ldr	r3, [pc, #324]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	615a      	str	r2, [r3, #20]
				WRK.PrepareStatus[0] = pADJUST;
 800ace8:	4b49      	ldr	r3, [pc, #292]	; (800ae10 <WRK_HandlePrepareRecipe+0x294>)
 800acea:	2209      	movs	r2, #9
 800acec:	711a      	strb	r2, [r3, #4]
				SCL.offset = SCL.rawvalue;
 800acee:	4b4f      	ldr	r3, [pc, #316]	; (800ae2c <WRK_HandlePrepareRecipe+0x2b0>)
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	4a4e      	ldr	r2, [pc, #312]	; (800ae2c <WRK_HandlePrepareRecipe+0x2b0>)
 800acf4:	6193      	str	r3, [r2, #24]
				SCL.GetWeight = 0;
 800acf6:	4b4d      	ldr	r3, [pc, #308]	; (800ae2c <WRK_HandlePrepareRecipe+0x2b0>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	605a      	str	r2, [r3, #4]
				SCL.GetWeightOld = 0;
 800acfc:	4b4b      	ldr	r3, [pc, #300]	; (800ae2c <WRK_HandlePrepareRecipe+0x2b0>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	609a      	str	r2, [r3, #8]
				HOP.DoseCounter = 0;
 800ad02:	4b49      	ldr	r3, [pc, #292]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	619a      	str	r2, [r3, #24]
				break;
 800ad08:	e17b      	b.n	800b002 <WRK_HandlePrepareRecipe+0x486>
				if (NoAdjustNeeded) //No need to adjust
 800ad0a:	4b43      	ldr	r3, [pc, #268]	; (800ae18 <WRK_HandlePrepareRecipe+0x29c>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d019      	beq.n	800ad46 <WRK_HandlePrepareRecipe+0x1ca>
					PrepareCounter = 0;
 800ad12:	4b3d      	ldr	r3, [pc, #244]	; (800ae08 <WRK_HandlePrepareRecipe+0x28c>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
					TIM5->ARR = HOP.TimerValue*1000; // Opening time shutter in us
 800ad18:	4b43      	ldr	r3, [pc, #268]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	4a44      	ldr	r2, [pc, #272]	; (800ae30 <WRK_HandlePrepareRecipe+0x2b4>)
 800ad1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ad22:	fb01 f303 	mul.w	r3, r1, r3
 800ad26:	62d3      	str	r3, [r2, #44]	; 0x2c
					HAL_TIM_Base_Start_IT (&htim5);
 800ad28:	4842      	ldr	r0, [pc, #264]	; (800ae34 <WRK_HandlePrepareRecipe+0x2b8>)
 800ad2a:	f007 fbdf 	bl	80124ec <HAL_TIM_Base_Start_IT>
					HOP_SetAngle(HOP.DumpAngle);
 800ad2e:	4b3e      	ldr	r3, [pc, #248]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800ad30:	799b      	ldrb	r3, [r3, #6]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fd ff88 	bl	8008c48 <HOP_SetAngle>
					HOP.Status = hDUMPPOSITION;
 800ad38:	4b3b      	ldr	r3, [pc, #236]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800ad3a:	2204      	movs	r2, #4
 800ad3c:	701a      	strb	r2, [r3, #0]
					WRK.PrepareStatus[0] = pDOSE;
 800ad3e:	4b34      	ldr	r3, [pc, #208]	; (800ae10 <WRK_HandlePrepareRecipe+0x294>)
 800ad40:	2206      	movs	r2, #6
 800ad42:	711a      	strb	r2, [r3, #4]
				break;
 800ad44:	e158      	b.n	800aff8 <WRK_HandlePrepareRecipe+0x47c>
					if (DUMMYMODEGRINDER)
 800ad46:	4b3c      	ldr	r3, [pc, #240]	; (800ae38 <WRK_HandlePrepareRecipe+0x2bc>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d005      	beq.n	800ad5a <WRK_HandlePrepareRecipe+0x1de>
						ADJ.Status = sACTIVE;
 800ad4e:	4b31      	ldr	r3, [pc, #196]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ad50:	2203      	movs	r2, #3
 800ad52:	701a      	strb	r2, [r3, #0]
						ADJ_RemovePlayFlag = 1;
 800ad54:	4b33      	ldr	r3, [pc, #204]	; (800ae24 <WRK_HandlePrepareRecipe+0x2a8>)
 800ad56:	2201      	movs	r2, #1
 800ad58:	701a      	strb	r2, [r3, #0]
					if (ADJ_RemovePlayFlag == 0) //First go to coarser, to eliminate play
 800ad5a:	4b32      	ldr	r3, [pc, #200]	; (800ae24 <WRK_HandlePrepareRecipe+0x2a8>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d127      	bne.n	800adb2 <WRK_HandlePrepareRecipe+0x236>
						if (ADJ_Set(gRecipe.RecipeBlocks[0].GrindSize + ADJ.Play) == TASK_READY)
 800ad62:	4b2a      	ldr	r3, [pc, #168]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800ad64:	88da      	ldrh	r2, [r3, #6]
 800ad66:	4b2b      	ldr	r3, [pc, #172]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ad68:	891b      	ldrh	r3, [r3, #8]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fc fbce 	bl	8007510 <ADJ_Set>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	f040 813e 	bne.w	800aff8 <WRK_HandlePrepareRecipe+0x47c>
							ADJ_RemovePlayFlag = 1;
 800ad7c:	4b29      	ldr	r3, [pc, #164]	; (800ae24 <WRK_HandlePrepareRecipe+0x2a8>)
 800ad7e:	2201      	movs	r2, #1
 800ad80:	701a      	strb	r2, [r3, #0]
							ADJ.SetGrindSize = gRecipe.RecipeBlocks[0].GrindSize;
 800ad82:	4b22      	ldr	r3, [pc, #136]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800ad84:	88da      	ldrh	r2, [r3, #6]
 800ad86:	4b23      	ldr	r3, [pc, #140]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ad88:	805a      	strh	r2, [r3, #2]
							ADJ_Motor.SetPosition = (ADJ.SetGrindSize - ADJ.HomeSize)* ADJ_PULSESPER10UM / 10;
 800ad8a:	4b22      	ldr	r3, [pc, #136]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ad8c:	885b      	ldrh	r3, [r3, #2]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4b20      	ldr	r3, [pc, #128]	; (800ae14 <WRK_HandlePrepareRecipe+0x298>)
 800ad92:	895b      	ldrh	r3, [r3, #10]
 800ad94:	1ad2      	subs	r2, r2, r3
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	4413      	add	r3, r2
 800ada0:	4a1e      	ldr	r2, [pc, #120]	; (800ae1c <WRK_HandlePrepareRecipe+0x2a0>)
 800ada2:	fb82 1203 	smull	r1, r2, r2, r3
 800ada6:	1092      	asrs	r2, r2, #2
 800ada8:	17db      	asrs	r3, r3, #31
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	4a1c      	ldr	r2, [pc, #112]	; (800ae20 <WRK_HandlePrepareRecipe+0x2a4>)
 800adae:	6153      	str	r3, [r2, #20]
				break;
 800adb0:	e122      	b.n	800aff8 <WRK_HandlePrepareRecipe+0x47c>
					else if (ADJ_RemovePlayFlag == 1)//Flag = 1. Now go back to finer and eliminate the play
 800adb2:	4b1c      	ldr	r3, [pc, #112]	; (800ae24 <WRK_HandlePrepareRecipe+0x2a8>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	f040 811e 	bne.w	800aff8 <WRK_HandlePrepareRecipe+0x47c>
						if (ADJ_Set(gRecipe.RecipeBlocks[0].GrindSize) == TASK_READY)
 800adbc:	4b13      	ldr	r3, [pc, #76]	; (800ae0c <WRK_HandlePrepareRecipe+0x290>)
 800adbe:	88db      	ldrh	r3, [r3, #6]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fc fba5 	bl	8007510 <ADJ_Set>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b01      	cmp	r3, #1
 800adca:	f040 8115 	bne.w	800aff8 <WRK_HandlePrepareRecipe+0x47c>
							ADJ_RemovePlayFlag = 0;
 800adce:	4b15      	ldr	r3, [pc, #84]	; (800ae24 <WRK_HandlePrepareRecipe+0x2a8>)
 800add0:	2200      	movs	r2, #0
 800add2:	701a      	strb	r2, [r3, #0]
							PrepareCounter = 0;
 800add4:	4b0c      	ldr	r3, [pc, #48]	; (800ae08 <WRK_HandlePrepareRecipe+0x28c>)
 800add6:	2200      	movs	r2, #0
 800add8:	601a      	str	r2, [r3, #0]
							TIM5->ARR = HOP.TimerValue*1000; // Opening time shutter in us
 800adda:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	4a14      	ldr	r2, [pc, #80]	; (800ae30 <WRK_HandlePrepareRecipe+0x2b4>)
 800ade0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ade4:	fb01 f303 	mul.w	r3, r1, r3
 800ade8:	62d3      	str	r3, [r2, #44]	; 0x2c
							HAL_TIM_Base_Start_IT (&htim5);
 800adea:	4812      	ldr	r0, [pc, #72]	; (800ae34 <WRK_HandlePrepareRecipe+0x2b8>)
 800adec:	f007 fb7e 	bl	80124ec <HAL_TIM_Base_Start_IT>
							HOP_SetAngle(HOP.DumpAngle);
 800adf0:	4b0d      	ldr	r3, [pc, #52]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800adf2:	799b      	ldrb	r3, [r3, #6]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fd ff27 	bl	8008c48 <HOP_SetAngle>
							HOP.Status = hDUMPPOSITION;
 800adfa:	4b0b      	ldr	r3, [pc, #44]	; (800ae28 <WRK_HandlePrepareRecipe+0x2ac>)
 800adfc:	2204      	movs	r2, #4
 800adfe:	701a      	strb	r2, [r3, #0]
							WRK.PrepareStatus[0] = pDOSE;
 800ae00:	4b03      	ldr	r3, [pc, #12]	; (800ae10 <WRK_HandlePrepareRecipe+0x294>)
 800ae02:	2206      	movs	r2, #6
 800ae04:	711a      	strb	r2, [r3, #4]
				break;
 800ae06:	e0f7      	b.n	800aff8 <WRK_HandlePrepareRecipe+0x47c>
 800ae08:	20000974 	.word	0x20000974
 800ae0c:	20000598 	.word	0x20000598
 800ae10:	2000095c 	.word	0x2000095c
 800ae14:	2000012c 	.word	0x2000012c
 800ae18:	20000978 	.word	0x20000978
 800ae1c:	66666667 	.word	0x66666667
 800ae20:	20000140 	.word	0x20000140
 800ae24:	20000979 	.word	0x20000979
 800ae28:	20000568 	.word	0x20000568
 800ae2c:	200005dc 	.word	0x200005dc
 800ae30:	40000c00 	.word	0x40000c00
 800ae34:	20000788 	.word	0x20000788
 800ae38:	2000096f 	.word	0x2000096f
				if (HOP.Status == hCHECKWEIGHT)
 800ae3c:	4b72      	ldr	r3, [pc, #456]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b07      	cmp	r3, #7
 800ae42:	f040 80db 	bne.w	800affc <WRK_HandlePrepareRecipe+0x480>
					if (HOP.Counter == 3)
 800ae46:	4b70      	ldr	r3, [pc, #448]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d102      	bne.n	800ae54 <WRK_HandlePrepareRecipe+0x2d8>
						HOP_SetAngle(90);
 800ae4e:	205a      	movs	r0, #90	; 0x5a
 800ae50:	f7fd fefa 	bl	8008c48 <HOP_SetAngle>
					if (HOP.Counter < SCL.StableTime/100 + 3)  //Wait x ms for beans stop moving
 800ae54:	4b6c      	ldr	r3, [pc, #432]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800ae56:	695a      	ldr	r2, [r3, #20]
 800ae58:	4b6c      	ldr	r3, [pc, #432]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	496c      	ldr	r1, [pc, #432]	; (800b010 <WRK_HandlePrepareRecipe+0x494>)
 800ae5e:	fb81 0103 	smull	r0, r1, r1, r3
 800ae62:	1149      	asrs	r1, r1, #5
 800ae64:	17db      	asrs	r3, r3, #31
 800ae66:	1acb      	subs	r3, r1, r3
 800ae68:	3303      	adds	r3, #3
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d205      	bcs.n	800ae7a <WRK_HandlePrepareRecipe+0x2fe>
						HOP.Counter ++;
 800ae6e:	4b66      	ldr	r3, [pc, #408]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	3301      	adds	r3, #1
 800ae74:	4a64      	ldr	r2, [pc, #400]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800ae76:	6153      	str	r3, [r2, #20]
				break;
 800ae78:	e0c0      	b.n	800affc <WRK_HandlePrepareRecipe+0x480>
						if (DUMMYMODESCALE)
 800ae7a:	4b66      	ldr	r3, [pc, #408]	; (800b014 <WRK_HandlePrepareRecipe+0x498>)
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d02f      	beq.n	800aee2 <WRK_HandlePrepareRecipe+0x366>
							if (SCL.GetWeight == 0)
 800ae82:	4b62      	ldr	r3, [pc, #392]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10a      	bne.n	800aea0 <WRK_HandlePrepareRecipe+0x324>
								SCL.GetWeight = -(gRecipe.RecipeBlocks[0].GrindWeight * 2 / 3);
 800ae8a:	4b63      	ldr	r3, [pc, #396]	; (800b018 <WRK_HandlePrepareRecipe+0x49c>)
 800ae8c:	889b      	ldrh	r3, [r3, #4]
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	4a62      	ldr	r2, [pc, #392]	; (800b01c <WRK_HandlePrepareRecipe+0x4a0>)
 800ae92:	fb82 1203 	smull	r1, r2, r2, r3
 800ae96:	17db      	asrs	r3, r3, #31
 800ae98:	1a9b      	subs	r3, r3, r2
 800ae9a:	4a5c      	ldr	r2, [pc, #368]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800ae9c:	6053      	str	r3, [r2, #4]
 800ae9e:	e00b      	b.n	800aeb8 <WRK_HandlePrepareRecipe+0x33c>
								SCL.GetWeight += (-gRecipe.RecipeBlocks[0].GrindWeight / 6);
 800aea0:	4b5a      	ldr	r3, [pc, #360]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	4b5c      	ldr	r3, [pc, #368]	; (800b018 <WRK_HandlePrepareRecipe+0x49c>)
 800aea6:	889b      	ldrh	r3, [r3, #4]
 800aea8:	495d      	ldr	r1, [pc, #372]	; (800b020 <WRK_HandlePrepareRecipe+0x4a4>)
 800aeaa:	fb81 0103 	smull	r0, r1, r1, r3
 800aeae:	17db      	asrs	r3, r3, #31
 800aeb0:	1a5b      	subs	r3, r3, r1
 800aeb2:	4413      	add	r3, r2
 800aeb4:	4a55      	ldr	r2, [pc, #340]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800aeb6:	6053      	str	r3, [r2, #4]
							if (SCL.GetWeight <= -gRecipe.RecipeBlocks[0].GrindWeight)
 800aeb8:	4b54      	ldr	r3, [pc, #336]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	4b56      	ldr	r3, [pc, #344]	; (800b018 <WRK_HandlePrepareRecipe+0x49c>)
 800aebe:	889b      	ldrh	r3, [r3, #4]
 800aec0:	425b      	negs	r3, r3
 800aec2:	429a      	cmp	r2, r3
 800aec4:	dc09      	bgt.n	800aeda <WRK_HandlePrepareRecipe+0x35e>
								HOP_SetAngle(180);
 800aec6:	20b4      	movs	r0, #180	; 0xb4
 800aec8:	f7fd febe 	bl	8008c48 <HOP_SetAngle>
								HOP.Status = hCLOSED;
 800aecc:	4b4e      	ldr	r3, [pc, #312]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800aece:	2203      	movs	r2, #3
 800aed0:	701a      	strb	r2, [r3, #0]
								WRK.PrepareStatus[0] = pGRIND;
 800aed2:	4b54      	ldr	r3, [pc, #336]	; (800b024 <WRK_HandlePrepareRecipe+0x4a8>)
 800aed4:	2208      	movs	r2, #8
 800aed6:	711a      	strb	r2, [r3, #4]
				break;
 800aed8:	e090      	b.n	800affc <WRK_HandlePrepareRecipe+0x480>
								HOP.Counter = 0;
 800aeda:	4b4b      	ldr	r3, [pc, #300]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800aedc:	2200      	movs	r2, #0
 800aede:	615a      	str	r2, [r3, #20]
				break;
 800aee0:	e08c      	b.n	800affc <WRK_HandlePrepareRecipe+0x480>
							SCL_Measure(1);
 800aee2:	2001      	movs	r0, #1
 800aee4:	f7fe fb02 	bl	80094ec <SCL_Measure>
									((SCL.GetWeight) <= -(int32_t) gRecipe.RecipeBlocks[0].GrindWeight + SCL.Accuracy)||
 800aee8:	4b48      	ldr	r3, [pc, #288]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	4b47      	ldr	r3, [pc, #284]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800aeee:	7d1b      	ldrb	r3, [r3, #20]
 800aef0:	4619      	mov	r1, r3
 800aef2:	4b49      	ldr	r3, [pc, #292]	; (800b018 <WRK_HandlePrepareRecipe+0x49c>)
 800aef4:	889b      	ldrh	r3, [r3, #4]
 800aef6:	1acb      	subs	r3, r1, r3
							if (
 800aef8:	429a      	cmp	r2, r3
 800aefa:	dd05      	ble.n	800af08 <WRK_HandlePrepareRecipe+0x38c>
									(HOP.DoseCounter > HOP.DoseStepsMax)
 800aefc:	4b42      	ldr	r3, [pc, #264]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	4a41      	ldr	r2, [pc, #260]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af02:	7a12      	ldrb	r2, [r2, #8]
									((SCL.GetWeight) <= -(int32_t) gRecipe.RecipeBlocks[0].GrindWeight + SCL.Accuracy)||
 800af04:	4293      	cmp	r3, r2
 800af06:	d906      	bls.n	800af16 <WRK_HandlePrepareRecipe+0x39a>
								HOP_SetAngle(180); //Close hopper
 800af08:	20b4      	movs	r0, #180	; 0xb4
 800af0a:	f7fd fe9d 	bl	8008c48 <HOP_SetAngle>
								WRK.PrepareStatus[0] = pGRIND; //Start grinding
 800af0e:	4b45      	ldr	r3, [pc, #276]	; (800b024 <WRK_HandlePrepareRecipe+0x4a8>)
 800af10:	2208      	movs	r2, #8
 800af12:	711a      	strb	r2, [r3, #4]
				break;
 800af14:	e072      	b.n	800affc <WRK_HandlePrepareRecipe+0x480>
								HOP.DoseCounter++;
 800af16:	4b3c      	ldr	r3, [pc, #240]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	3301      	adds	r3, #1
 800af1c:	4a3a      	ldr	r2, [pc, #232]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af1e:	6193      	str	r3, [r2, #24]
								if (SCL.ShotWeight > 0)
 800af20:	4b3a      	ldr	r3, [pc, #232]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	dd24      	ble.n	800af72 <WRK_HandlePrepareRecipe+0x3f6>
									SCL.RestWeight =  (int32_t) gRecipe.RecipeBlocks[0].GrindWeight + (SCL.GetWeight);
 800af28:	4b3b      	ldr	r3, [pc, #236]	; (800b018 <WRK_HandlePrepareRecipe+0x49c>)
 800af2a:	889b      	ldrh	r3, [r3, #4]
 800af2c:	461a      	mov	r2, r3
 800af2e:	4b37      	ldr	r3, [pc, #220]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	4413      	add	r3, r2
 800af34:	4a35      	ldr	r2, [pc, #212]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800af36:	6113      	str	r3, [r2, #16]
									HOP.TimerValue = (uint32_t) (((SCL.RestWeight * ((int32_t)HOP.TimerValue - HOP.TimeMin) / (SCL.ShotWeight)) + HOP.TimeMin)*9/10);
 800af38:	4b34      	ldr	r3, [pc, #208]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	4a32      	ldr	r2, [pc, #200]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af3e:	6912      	ldr	r2, [r2, #16]
 800af40:	4611      	mov	r1, r2
 800af42:	4a31      	ldr	r2, [pc, #196]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af44:	8852      	ldrh	r2, [r2, #2]
 800af46:	1a8a      	subs	r2, r1, r2
 800af48:	fb03 f202 	mul.w	r2, r3, r2
 800af4c:	4b2f      	ldr	r3, [pc, #188]	; (800b00c <WRK_HandlePrepareRecipe+0x490>)
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	fb92 f3f3 	sdiv	r3, r2, r3
 800af54:	4a2c      	ldr	r2, [pc, #176]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af56:	8852      	ldrh	r2, [r2, #2]
 800af58:	441a      	add	r2, r3
 800af5a:	4613      	mov	r3, r2
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	4413      	add	r3, r2
 800af60:	4a31      	ldr	r2, [pc, #196]	; (800b028 <WRK_HandlePrepareRecipe+0x4ac>)
 800af62:	fb82 1203 	smull	r1, r2, r2, r3
 800af66:	1092      	asrs	r2, r2, #2
 800af68:	17db      	asrs	r3, r3, #31
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	461a      	mov	r2, r3
 800af6e:	4b26      	ldr	r3, [pc, #152]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af70:	611a      	str	r2, [r3, #16]
								if (HOP.TimerValue < HOP.TimeMin) HOP.TimerValue = HOP.TimeMin;
 800af72:	4b25      	ldr	r3, [pc, #148]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	4a24      	ldr	r2, [pc, #144]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af78:	8852      	ldrh	r2, [r2, #2]
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d204      	bcs.n	800af88 <WRK_HandlePrepareRecipe+0x40c>
 800af7e:	4b22      	ldr	r3, [pc, #136]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af80:	885b      	ldrh	r3, [r3, #2]
 800af82:	461a      	mov	r2, r3
 800af84:	4b20      	ldr	r3, [pc, #128]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af86:	611a      	str	r2, [r3, #16]
								if (HOP.TimerValue > HOP.TimeMax) HOP.TimerValue = HOP.TimeMax;
 800af88:	4b1f      	ldr	r3, [pc, #124]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	4a1e      	ldr	r2, [pc, #120]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af8e:	8892      	ldrh	r2, [r2, #4]
 800af90:	4293      	cmp	r3, r2
 800af92:	d904      	bls.n	800af9e <WRK_HandlePrepareRecipe+0x422>
 800af94:	4b1c      	ldr	r3, [pc, #112]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af96:	889b      	ldrh	r3, [r3, #4]
 800af98:	461a      	mov	r2, r3
 800af9a:	4b1b      	ldr	r3, [pc, #108]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800af9c:	611a      	str	r2, [r3, #16]
								TIM5->CNT=0;
 800af9e:	4b23      	ldr	r3, [pc, #140]	; (800b02c <WRK_HandlePrepareRecipe+0x4b0>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	625a      	str	r2, [r3, #36]	; 0x24
								TIM5->ARR = HOP.TimerValue*1000; // us
 800afa4:	4b18      	ldr	r3, [pc, #96]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	4a20      	ldr	r2, [pc, #128]	; (800b02c <WRK_HandlePrepareRecipe+0x4b0>)
 800afaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800afae:	fb01 f303 	mul.w	r3, r1, r3
 800afb2:	62d3      	str	r3, [r2, #44]	; 0x2c
								HAL_TIM_Base_Start_IT (&htim5);
 800afb4:	481e      	ldr	r0, [pc, #120]	; (800b030 <WRK_HandlePrepareRecipe+0x4b4>)
 800afb6:	f007 fa99 	bl	80124ec <HAL_TIM_Base_Start_IT>
								HOP_SetAngle(HOP.DoseAngle);
 800afba:	4b13      	ldr	r3, [pc, #76]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800afbc:	79db      	ldrb	r3, [r3, #7]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fd fe42 	bl	8008c48 <HOP_SetAngle>
								HOP.Status = hDOSEPOSITION;
 800afc4:	4b10      	ldr	r3, [pc, #64]	; (800b008 <WRK_HandlePrepareRecipe+0x48c>)
 800afc6:	2205      	movs	r2, #5
 800afc8:	701a      	strb	r2, [r3, #0]
				break;
 800afca:	e017      	b.n	800affc <WRK_HandlePrepareRecipe+0x480>
					if (GND_Set(gRecipe.RecipeBlocks[0].GrindWeight * 40) == TASK_READY)
 800afcc:	4b12      	ldr	r3, [pc, #72]	; (800b018 <WRK_HandlePrepareRecipe+0x49c>)
 800afce:	889b      	ldrh	r3, [r3, #4]
 800afd0:	461a      	mov	r2, r3
 800afd2:	0092      	lsls	r2, r2, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	00db      	lsls	r3, r3, #3
 800afd8:	b29b      	uxth	r3, r3
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fd fd9e 	bl	8008b1c <GND_Set>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d10c      	bne.n	800b000 <WRK_HandlePrepareRecipe+0x484>
						gRecipe.Active = 0;
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <WRK_HandlePrepareRecipe+0x49c>)
 800afe8:	2200      	movs	r2, #0
 800afea:	705a      	strb	r2, [r3, #1]
						WRK.PrepareStatus[0] = pINACTIVE;
 800afec:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <WRK_HandlePrepareRecipe+0x4a8>)
 800afee:	2202      	movs	r2, #2
 800aff0:	711a      	strb	r2, [r3, #4]
				break;
 800aff2:	e005      	b.n	800b000 <WRK_HandlePrepareRecipe+0x484>
				break;
 800aff4:	bf00      	nop
 800aff6:	e004      	b.n	800b002 <WRK_HandlePrepareRecipe+0x486>
				break;
 800aff8:	bf00      	nop
 800affa:	e002      	b.n	800b002 <WRK_HandlePrepareRecipe+0x486>
				break;
 800affc:	bf00      	nop
 800affe:	e000      	b.n	800b002 <WRK_HandlePrepareRecipe+0x486>
				break;
 800b000:	bf00      	nop
}
 800b002:	bf00      	nop
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20000568 	.word	0x20000568
 800b00c:	200005dc 	.word	0x200005dc
 800b010:	51eb851f 	.word	0x51eb851f
 800b014:	20000972 	.word	0x20000972
 800b018:	20000598 	.word	0x20000598
 800b01c:	55555556 	.word	0x55555556
 800b020:	2aaaaaab 	.word	0x2aaaaaab
 800b024:	2000095c 	.word	0x2000095c
 800b028:	66666667 	.word	0x66666667
 800b02c:	40000c00 	.word	0x40000c00
 800b030:	20000788 	.word	0x20000788

0800b034 <WRK_SetAction>:
//-----------------------------------------------------------------------------
//! \brief      Routine to set an action to be executed by the work module
//! \details    Sets the action and resets the counter. Checks if a command can be executed
//! \params 	None
void WRK_SetAction (uint8_t newAction)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	71fb      	strb	r3, [r7, #7]
	//check commands validity before try executing
	if ((newAction == MTypeStartRecipe1)&& (gRecipe.Valid == 0)) //Start recipe, but no recipe loaded
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	2b11      	cmp	r3, #17
 800b042:	d107      	bne.n	800b054 <WRK_SetAction+0x20>
 800b044:	4b10      	ldr	r3, [pc, #64]	; (800b088 <WRK_SetAction+0x54>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d103      	bne.n	800b054 <WRK_SetAction+0x20>
	{
		SER_SetStatus (MStatNoValidRecipe); //No valid recipe loaded
 800b04c:	2016      	movs	r0, #22
 800b04e:	f002 fab1 	bl	800d5b4 <SER_SetStatus>
 800b052:	e014      	b.n	800b07e <WRK_SetAction+0x4a>
	}
	else if ((newAction == MTypeStopRecipe1) && (gRecipe.Active == 0)) //Stop recipe, but recipe is not active
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	2b14      	cmp	r3, #20
 800b058:	d107      	bne.n	800b06a <WRK_SetAction+0x36>
 800b05a:	4b0b      	ldr	r3, [pc, #44]	; (800b088 <WRK_SetAction+0x54>)
 800b05c:	785b      	ldrb	r3, [r3, #1]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d103      	bne.n	800b06a <WRK_SetAction+0x36>
	{
		SER_SetStatus (MStatRecipeNotActive); //No valid recipe loaded
 800b062:	2017      	movs	r0, #23
 800b064:	f002 faa6 	bl	800d5b4 <SER_SetStatus>
 800b068:	e009      	b.n	800b07e <WRK_SetAction+0x4a>
	}
	else //Commands can be executed. Try executing
	{
		gAction = newAction;
 800b06a:	4a08      	ldr	r2, [pc, #32]	; (800b08c <WRK_SetAction+0x58>)
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	7013      	strb	r3, [r2, #0]
		gActionAccepted = 0;
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <WRK_SetAction+0x5c>)
 800b072:	2200      	movs	r2, #0
 800b074:	701a      	strb	r2, [r3, #0]
		WRK.CounterAction = 0;
 800b076:	4b07      	ldr	r3, [pc, #28]	; (800b094 <WRK_SetAction+0x60>)
 800b078:	2200      	movs	r2, #0
 800b07a:	60da      	str	r2, [r3, #12]
	}

}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20000598 	.word	0x20000598
 800b08c:	2000096d 	.word	0x2000096d
 800b090:	2000096e 	.word	0x2000096e
 800b094:	2000095c 	.word	0x2000095c

0800b098 <WRK_ResetAction>:
//-----------------------------------------------------------------------------
//! \brief      Routine to reset a pending action
//! \details    Resets the action and counter
//! \params 	None
void WRK_ResetAction (void)
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
	gAction = 0;
 800b09c:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <WRK_ResetAction+0x20>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	701a      	strb	r2, [r3, #0]
	gActionAccepted = 0;
 800b0a2:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <WRK_ResetAction+0x24>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	701a      	strb	r2, [r3, #0]
	WRK.CounterAction = 0;
 800b0a8:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <WRK_ResetAction+0x28>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	60da      	str	r2, [r3, #12]
}
 800b0ae:	bf00      	nop
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bc80      	pop	{r7}
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	2000096d 	.word	0x2000096d
 800b0bc:	2000096e 	.word	0x2000096e
 800b0c0:	2000095c 	.word	0x2000095c

0800b0c4 <WRK_HandleAction>:
//! \brief      Routine to initiate return message or timeout
//! \details    Checks if the command timed out or is accepted
//! \details    Initiates the sending of the respective return message
//! \params 	None
void WRK_HandleAction (void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	af00      	add	r7, sp, #0
	static uint8_t TickTime = 10;
	if (TickTime ++ < 99) return;
 800b0c8:	4b1f      	ldr	r3, [pc, #124]	; (800b148 <WRK_HandleAction+0x84>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	b2d1      	uxtb	r1, r2
 800b0d0:	4a1d      	ldr	r2, [pc, #116]	; (800b148 <WRK_HandleAction+0x84>)
 800b0d2:	7011      	strb	r1, [r2, #0]
 800b0d4:	2b62      	cmp	r3, #98	; 0x62
 800b0d6:	d934      	bls.n	800b142 <WRK_HandleAction+0x7e>
	TickTime = 0;
 800b0d8:	4b1b      	ldr	r3, [pc, #108]	; (800b148 <WRK_HandleAction+0x84>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	701a      	strb	r2, [r3, #0]

	if ((gAction > 0) || (gActionAccepted))
 800b0de:	4b1b      	ldr	r3, [pc, #108]	; (800b14c <WRK_HandleAction+0x88>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d103      	bne.n	800b0ee <WRK_HandleAction+0x2a>
 800b0e6:	4b1a      	ldr	r3, [pc, #104]	; (800b150 <WRK_HandleAction+0x8c>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d02a      	beq.n	800b144 <WRK_HandleAction+0x80>
	{
		WRK.CounterAction += 100;
 800b0ee:	4b19      	ldr	r3, [pc, #100]	; (800b154 <WRK_HandleAction+0x90>)
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	3364      	adds	r3, #100	; 0x64
 800b0f4:	4a17      	ldr	r2, [pc, #92]	; (800b154 <WRK_HandleAction+0x90>)
 800b0f6:	60d3      	str	r3, [r2, #12]
		if (WRK.CounterAction > ACTIONTIMEOUT)
 800b0f8:	4b16      	ldr	r3, [pc, #88]	; (800b154 <WRK_HandleAction+0x90>)
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b100:	d911      	bls.n	800b126 <WRK_HandleAction+0x62>
		{
			if (gActionAccepted)
 800b102:	4b13      	ldr	r3, [pc, #76]	; (800b150 <WRK_HandleAction+0x8c>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <WRK_HandleAction+0x4e>
			{
				SER_SetStatus (0x01); //Action executed
 800b10a:	2001      	movs	r0, #1
 800b10c:	f002 fa52 	bl	800d5b4 <SER_SetStatus>
 800b110:	e002      	b.n	800b118 <WRK_HandleAction+0x54>
			}
			else
			{
				SER_SetStatus (0x13); //Action timed out
 800b112:	2013      	movs	r0, #19
 800b114:	f002 fa4e 	bl	800d5b4 <SER_SetStatus>
			}
			gActionAccepted = 0;
 800b118:	4b0d      	ldr	r3, [pc, #52]	; (800b150 <WRK_HandleAction+0x8c>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	701a      	strb	r2, [r3, #0]
			gAction = 0;
 800b11e:	4b0b      	ldr	r3, [pc, #44]	; (800b14c <WRK_HandleAction+0x88>)
 800b120:	2200      	movs	r2, #0
 800b122:	701a      	strb	r2, [r3, #0]
 800b124:	e00e      	b.n	800b144 <WRK_HandleAction+0x80>
		}
		else if (gActionAccepted)
 800b126:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <WRK_HandleAction+0x8c>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00a      	beq.n	800b144 <WRK_HandleAction+0x80>
		{
			SER_SetStatus (0x01); //Action executed
 800b12e:	2001      	movs	r0, #1
 800b130:	f002 fa40 	bl	800d5b4 <SER_SetStatus>
			gActionAccepted = 0;
 800b134:	4b06      	ldr	r3, [pc, #24]	; (800b150 <WRK_HandleAction+0x8c>)
 800b136:	2200      	movs	r2, #0
 800b138:	701a      	strb	r2, [r3, #0]
			gAction = 0;
 800b13a:	4b04      	ldr	r3, [pc, #16]	; (800b14c <WRK_HandleAction+0x88>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	e000      	b.n	800b144 <WRK_HandleAction+0x80>
	if (TickTime ++ < 99) return;
 800b142:	bf00      	nop
		}
	}
}
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20000005 	.word	0x20000005
 800b14c:	2000096d 	.word	0x2000096d
 800b150:	2000096e 	.word	0x2000096e
 800b154:	2000095c 	.word	0x2000095c

0800b158 <WRK_GetAction>:
//! \brief      Routine to get an action to be executed
//! \details    Compares the required action with the active action
//! \details    Returns 1 and sets gActionAccepted if identical, Returns 0 if not
//! \param[in]  uint8_t ReqAction
uint8_t WRK_GetAction (uint8_t ReqAction)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	4603      	mov	r3, r0
 800b160:	71fb      	strb	r3, [r7, #7]
	uint8_t returnValue = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	73fb      	strb	r3, [r7, #15]
	if (gAction > 0)
 800b166:	4b0b      	ldr	r3, [pc, #44]	; (800b194 <WRK_GetAction+0x3c>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00c      	beq.n	800b188 <WRK_GetAction+0x30>
	{
		if (ReqAction == gAction)
 800b16e:	4b09      	ldr	r3, [pc, #36]	; (800b194 <WRK_GetAction+0x3c>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	79fa      	ldrb	r2, [r7, #7]
 800b174:	429a      	cmp	r2, r3
 800b176:	d107      	bne.n	800b188 <WRK_GetAction+0x30>
		{
			gAction = 0;
 800b178:	4b06      	ldr	r3, [pc, #24]	; (800b194 <WRK_GetAction+0x3c>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	701a      	strb	r2, [r3, #0]
			gActionAccepted = 1;
 800b17e:	4b06      	ldr	r3, [pc, #24]	; (800b198 <WRK_GetAction+0x40>)
 800b180:	2201      	movs	r2, #1
 800b182:	701a      	strb	r2, [r3, #0]
			returnValue = 1;
 800b184:	2301      	movs	r3, #1
 800b186:	73fb      	strb	r3, [r7, #15]
		}
	}
	return returnValue;
 800b188:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	bc80      	pop	{r7}
 800b192:	4770      	bx	lr
 800b194:	2000096d 	.word	0x2000096d
 800b198:	2000096e 	.word	0x2000096e

0800b19c <WRK_HandleTickTime>:
//-----------------------------------------------------------------------------
//! \brief      Handles the tick time counter
//! \details    Handles 1 ms time interrupt
//! \param      None
void WRK_HandleTickTime (void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
	if (!Initialized) return;
 800b1a0:	4b0e      	ldr	r3, [pc, #56]	; (800b1dc <WRK_HandleTickTime+0x40>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d016      	beq.n	800b1d6 <WRK_HandleTickTime+0x3a>

	SER_Handle();
 800b1a8:	f003 f870 	bl	800e28c <SER_Handle>
	WRK_HandleSequence();
 800b1ac:	f7ff faa6 	bl	800a6fc <WRK_HandleSequence>
	WRK_HandleAction();
 800b1b0:	f7ff ff88 	bl	800b0c4 <WRK_HandleAction>
	ADJ_HandleMotor();
 800b1b4:	f7fc f9f2 	bl	800759c <ADJ_HandleMotor>
	HOP_Handle();
 800b1b8:	f7fd fd2e 	bl	8008c18 <HOP_Handle>
	LED_Handle();
 800b1bc:	f001 fa5c 	bl	800c678 <LED_Handle>
	if ((!DUMMYMODERFID) && (WRK.MainStatus != sPREPARE)) CON_Handle(); //Only RFID handling if the machine is not preparing grinds
 800b1c0:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <WRK_HandleTickTime+0x44>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d107      	bne.n	800b1d8 <WRK_HandleTickTime+0x3c>
 800b1c8:	4b06      	ldr	r3, [pc, #24]	; (800b1e4 <WRK_HandleTickTime+0x48>)
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	2b13      	cmp	r3, #19
 800b1ce:	d003      	beq.n	800b1d8 <WRK_HandleTickTime+0x3c>
 800b1d0:	f7fd fafa 	bl	80087c8 <CON_Handle>
 800b1d4:	e000      	b.n	800b1d8 <WRK_HandleTickTime+0x3c>
	if (!Initialized) return;
 800b1d6:	bf00      	nop
}
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	2000096c 	.word	0x2000096c
 800b1e0:	20000971 	.word	0x20000971
 800b1e4:	2000095c 	.word	0x2000095c

0800b1e8 <WRK_GetSoftwareVersion>:
//-----------------------------------------------------------------------------
//! \brief      Returns the software version
//! \details    Makes 1 integer of the software version that can be sent by UART
//! \params		None
uint32_t WRK_GetSoftwareVersion (void)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
	return (SW_VER_MAJOR << 12) + (SW_VER_MINOR << 8) + SW_VER_BUGFIX;
 800b1ec:	f242 2314 	movw	r3, #8724	; 0x2214
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bc80      	pop	{r7}
 800b1f6:	4770      	bx	lr

0800b1f8 <WRK_GetHardwareVersion>:
//-----------------------------------------------------------------------------
//! \brief      Returns the hardware version
//! \details    Makes 1 integer of the hardware version that can be sent by UART
//! \params		None
uint32_t WRK_GetHardwareVersion (void)
{
 800b1f8:	b598      	push	{r3, r4, r7, lr}
 800b1fa:	af00      	add	r7, sp, #0
	return (HW0 + HW1*2 + HW2*4 + HW3*8);
 800b1fc:	2104      	movs	r1, #4
 800b1fe:	4816      	ldr	r0, [pc, #88]	; (800b258 <WRK_GetHardwareVersion+0x60>)
 800b200:	f005 fd02 	bl	8010c08 <HAL_GPIO_ReadPin>
 800b204:	4603      	mov	r3, r0
 800b206:	2b01      	cmp	r3, #1
 800b208:	bf0c      	ite	eq
 800b20a:	2301      	moveq	r3, #1
 800b20c:	2300      	movne	r3, #0
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	461c      	mov	r4, r3
 800b212:	2110      	movs	r1, #16
 800b214:	4811      	ldr	r0, [pc, #68]	; (800b25c <WRK_GetHardwareVersion+0x64>)
 800b216:	f005 fcf7 	bl	8010c08 <HAL_GPIO_ReadPin>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <WRK_GetHardwareVersion+0x2c>
 800b220:	2302      	movs	r3, #2
 800b222:	e000      	b.n	800b226 <WRK_GetHardwareVersion+0x2e>
 800b224:	2300      	movs	r3, #0
 800b226:	441c      	add	r4, r3
 800b228:	2180      	movs	r1, #128	; 0x80
 800b22a:	480c      	ldr	r0, [pc, #48]	; (800b25c <WRK_GetHardwareVersion+0x64>)
 800b22c:	f005 fcec 	bl	8010c08 <HAL_GPIO_ReadPin>
 800b230:	4603      	mov	r3, r0
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <WRK_GetHardwareVersion+0x42>
 800b236:	2304      	movs	r3, #4
 800b238:	e000      	b.n	800b23c <WRK_GetHardwareVersion+0x44>
 800b23a:	2300      	movs	r3, #0
 800b23c:	441c      	add	r4, r3
 800b23e:	2140      	movs	r1, #64	; 0x40
 800b240:	4806      	ldr	r0, [pc, #24]	; (800b25c <WRK_GetHardwareVersion+0x64>)
 800b242:	f005 fce1 	bl	8010c08 <HAL_GPIO_ReadPin>
 800b246:	4603      	mov	r3, r0
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d101      	bne.n	800b250 <WRK_GetHardwareVersion+0x58>
 800b24c:	2308      	movs	r3, #8
 800b24e:	e000      	b.n	800b252 <WRK_GetHardwareVersion+0x5a>
 800b250:	2300      	movs	r3, #0
 800b252:	4423      	add	r3, r4
}
 800b254:	4618      	mov	r0, r3
 800b256:	bd98      	pop	{r3, r4, r7, pc}
 800b258:	40020400 	.word	0x40020400
 800b25c:	40020800 	.word	0x40020800

0800b260 <WRK_SetMainStatus>:
//-----------------------------------------------------------------------------
//! \brief      Handles the main status setting
//! \details    Set the status and saves to old status. Sets the sub status to UNDEFINED
//! \param[in]  enuStatus newStatus
void WRK_SetMainStatus (enuStatus newStatus)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	71fb      	strb	r3, [r7, #7]
	WRK.MainStatusOld = WRK.MainStatus;
 800b26a:	4b09      	ldr	r3, [pc, #36]	; (800b290 <WRK_SetMainStatus+0x30>)
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	4b08      	ldr	r3, [pc, #32]	; (800b290 <WRK_SetMainStatus+0x30>)
 800b270:	705a      	strb	r2, [r3, #1]
	WRK.MainStatus = newStatus;
 800b272:	4a07      	ldr	r2, [pc, #28]	; (800b290 <WRK_SetMainStatus+0x30>)
 800b274:	79fb      	ldrb	r3, [r7, #7]
 800b276:	7013      	strb	r3, [r2, #0]
	WRK.SubStatusOld = WRK.SubStatus;
 800b278:	4b05      	ldr	r3, [pc, #20]	; (800b290 <WRK_SetMainStatus+0x30>)
 800b27a:	789a      	ldrb	r2, [r3, #2]
 800b27c:	4b04      	ldr	r3, [pc, #16]	; (800b290 <WRK_SetMainStatus+0x30>)
 800b27e:	70da      	strb	r2, [r3, #3]
	WRK.SubStatus = sUNDEFINED;
 800b280:	4b03      	ldr	r3, [pc, #12]	; (800b290 <WRK_SetMainStatus+0x30>)
 800b282:	2200      	movs	r2, #0
 800b284:	709a      	strb	r2, [r3, #2]
}
 800b286:	bf00      	nop
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bc80      	pop	{r7}
 800b28e:	4770      	bx	lr
 800b290:	2000095c 	.word	0x2000095c

0800b294 <WRK_SetSubStatus>:
//-----------------------------------------------------------------------------
//! \brief      Handles the sub status setting
//! \details    Set the status and saves to old status.
//! \param      Non
void WRK_SetSubStatus (enuStatus newStatus)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	71fb      	strb	r3, [r7, #7]
 	WRK.SubStatusOld = WRK.SubStatus;
 800b29e:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <WRK_SetSubStatus+0x24>)
 800b2a0:	789a      	ldrb	r2, [r3, #2]
 800b2a2:	4b05      	ldr	r3, [pc, #20]	; (800b2b8 <WRK_SetSubStatus+0x24>)
 800b2a4:	70da      	strb	r2, [r3, #3]
	WRK.SubStatus = newStatus;
 800b2a6:	4a04      	ldr	r2, [pc, #16]	; (800b2b8 <WRK_SetSubStatus+0x24>)
 800b2a8:	79fb      	ldrb	r3, [r7, #7]
 800b2aa:	7093      	strb	r3, [r2, #2]
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bc80      	pop	{r7}
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	2000095c 	.word	0x2000095c

0800b2bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b2bc:	480c      	ldr	r0, [pc, #48]	; (800b2f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b2be:	490d      	ldr	r1, [pc, #52]	; (800b2f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b2c0:	4a0d      	ldr	r2, [pc, #52]	; (800b2f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b2c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b2c4:	e002      	b.n	800b2cc <LoopCopyDataInit>

0800b2c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b2c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b2c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b2ca:	3304      	adds	r3, #4

0800b2cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b2cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b2ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b2d0:	d3f9      	bcc.n	800b2c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b2d2:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b2d4:	4c0a      	ldr	r4, [pc, #40]	; (800b300 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b2d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b2d8:	e001      	b.n	800b2de <LoopFillZerobss>

0800b2da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b2da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b2dc:	3204      	adds	r2, #4

0800b2de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b2de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b2e0:	d3fb      	bcc.n	800b2da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b2e2:	f7fe fc33 	bl	8009b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b2e6:	f008 ff83 	bl	80141f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b2ea:	f7fd fdfb 	bl	8008ee4 <main>
  bx lr
 800b2ee:	4770      	bx	lr
  ldr r0, =_sdata
 800b2f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b2f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800b2f8:	080147b0 	.word	0x080147b0
  ldr r2, =_sbss
 800b2fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800b300:	20000fa4 	.word	0x20000fa4

0800b304 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b304:	e7fe      	b.n	800b304 <ADC1_IRQHandler>
	...

0800b308 <CalculateCRC8>:
//! \details    Skips the CRC byte, as this is not know during the calculation
//! \param[in]  uint8_t *pData	Pointer to the array
//! \param[in]  uint8_t size	Length of the array
//! \param[out]	uint8_t	crc		CRC value that is calculated
uint8_t CalculateCRC8(uint8_t *pData, uint8_t size)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	460b      	mov	r3, r1
 800b312:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]
	uint8_t AsciiCode;
	for (uint8_t i = 0; i < size; i++)
 800b318:	2300      	movs	r3, #0
 800b31a:	737b      	strb	r3, [r7, #13]
 800b31c:	e01b      	b.n	800b356 <CalculateCRC8+0x4e>
	{
		AsciiCode = *pData++;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	607a      	str	r2, [r7, #4]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	73bb      	strb	r3, [r7, #14]
		if (AsciiCode >= 97) AsciiCode -= 32; //make sure all letters are capitals for the crc calculation
 800b328:	7bbb      	ldrb	r3, [r7, #14]
 800b32a:	2b60      	cmp	r3, #96	; 0x60
 800b32c:	d902      	bls.n	800b334 <CalculateCRC8+0x2c>
 800b32e:	7bbb      	ldrb	r3, [r7, #14]
 800b330:	3b20      	subs	r3, #32
 800b332:	73bb      	strb	r3, [r7, #14]
		if ((i!=6) && (i!=7)) //Don't calculate the CRC value itself
 800b334:	7b7b      	ldrb	r3, [r7, #13]
 800b336:	2b06      	cmp	r3, #6
 800b338:	d00a      	beq.n	800b350 <CalculateCRC8+0x48>
 800b33a:	7b7b      	ldrb	r3, [r7, #13]
 800b33c:	2b07      	cmp	r3, #7
 800b33e:	d007      	beq.n	800b350 <CalculateCRC8+0x48>
		{
			crc = table_crc8[crc ^ AsciiCode];
 800b340:	7bfa      	ldrb	r2, [r7, #15]
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	4053      	eors	r3, r2
 800b346:	b2db      	uxtb	r3, r3
 800b348:	461a      	mov	r2, r3
 800b34a:	4b08      	ldr	r3, [pc, #32]	; (800b36c <CalculateCRC8+0x64>)
 800b34c:	5c9b      	ldrb	r3, [r3, r2]
 800b34e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < size; i++)
 800b350:	7b7b      	ldrb	r3, [r7, #13]
 800b352:	3301      	adds	r3, #1
 800b354:	737b      	strb	r3, [r7, #13]
 800b356:	7b7a      	ldrb	r2, [r7, #13]
 800b358:	78fb      	ldrb	r3, [r7, #3]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d3df      	bcc.n	800b31e <CalculateCRC8+0x16>
		}
	}
	return crc;
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	bc80      	pop	{r7}
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	0801469c 	.word	0x0801469c

0800b370 <EEP_WriteEEPROM>:
  Description:  	Used to store variables in EEprom
  Parameters:   	enuVariable newVariable, uint32_t newValue
  Return value: 	None
***************************************************************/
void EEP_WriteEEPROM (uint32_t newAddress, uint32_t newValue)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
    uint32_t Address = 0x8080000 + (4 * newAddress);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800b380:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	60fb      	str	r3, [r7, #12]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b388:	f005 f81e 	bl	80103c8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD,Address);
 800b38c:	68f9      	ldr	r1, [r7, #12]
 800b38e:	2002      	movs	r0, #2
 800b390:	f005 f846 	bl	8010420 <HAL_FLASHEx_DATAEEPROM_Erase>
    HAL_FLASHEx_DATAEEPROM_Program (FLASH_TYPEPROGRAMDATA_WORD, Address, newValue);
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	2002      	movs	r0, #2
 800b39a:	f005 f873 	bl	8010484 <HAL_FLASHEx_DATAEEPROM_Program>
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b39e:	f005 f82f 	bl	8010400 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800b3a2:	bf00      	nop
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <EEP_ReadEEPROM>:
  Description:  	Used to read variables from EEprom
  Parameters:   	enuVariable newVariable
  Return value: 	None
***************************************************************/
uint32_t EEP_ReadEEPROM (int8_t newAddress)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	71fb      	strb	r3, [r7, #7]
    return (*(__IO uint32_t*) (0x08080000 + (4 * (uint32_t) newAddress)));
 800b3b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3b8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800b3bc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	681b      	ldr	r3, [r3, #0]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bc80      	pop	{r7}
 800b3cc:	4770      	bx	lr
	...

0800b3d0 <FIL_GetTrigger>:
//-----------------------------------------------------------------------------
//! \brief      Checks if a grinder should start
//! \details    Returns 1 if any filter type is detected
//! \param[out] uint8_t FilterType 0 = none, 1 - 14 = Type
uint8_t FIL_GetTrigger (void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
	static uint8_t FilterCounter = 0;
	uint8_t ReturnValue = 0; //0 means no filter
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	71fb      	strb	r3, [r7, #7]
	if (!DUMMYMODEFILTER)
 800b3da:	4b1e      	ldr	r3, [pc, #120]	; (800b454 <FIL_GetTrigger+0x84>)
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d132      	bne.n	800b448 <FIL_GetTrigger+0x78>
	{
		//if ((HAL0 <= HAL_NEG_THRESHOLD)||(HAL0 >= HAL_POS_THRESHOLD)) //HAL0 is triggered
		//	ReturnValue = 1;
		if ((HAL1 <= HAL_NEG_THRESHOLD)||(HAL1 >= HAL_POS_THRESHOLD))//HAL0 is triggered
 800b3e2:	2003      	movs	r0, #3
 800b3e4:	f7fc fa94 	bl	8007910 <ANA_GetSensorValue>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	491b      	ldr	r1, [pc, #108]	; (800b458 <FIL_GetTrigger+0x88>)
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fb fa41 	bl	8006874 <__aeabi_fcmple>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10a      	bne.n	800b40e <FIL_GetTrigger+0x3e>
 800b3f8:	2003      	movs	r0, #3
 800b3fa:	f7fc fa89 	bl	8007910 <ANA_GetSensorValue>
 800b3fe:	4603      	mov	r3, r0
 800b400:	4916      	ldr	r1, [pc, #88]	; (800b45c <FIL_GetTrigger+0x8c>)
 800b402:	4618      	mov	r0, r3
 800b404:	f7fb fa40 	bl	8006888 <__aeabi_fcmpge>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d014      	beq.n	800b438 <FIL_GetTrigger+0x68>
		{
			//Only when we measure 5 times a value outside of the threshold, we trigger
			if (FilterCounter > 5)
 800b40e:	4b14      	ldr	r3, [pc, #80]	; (800b460 <FIL_GetTrigger+0x90>)
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	2b05      	cmp	r3, #5
 800b414:	d909      	bls.n	800b42a <FIL_GetTrigger+0x5a>
			{
				if (FIL.Trigger == 0)
 800b416:	4b13      	ldr	r3, [pc, #76]	; (800b464 <FIL_GetTrigger+0x94>)
 800b418:	789b      	ldrb	r3, [r3, #2]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d113      	bne.n	800b446 <FIL_GetTrigger+0x76>
				{
					FIL.Trigger = 1;
 800b41e:	4b11      	ldr	r3, [pc, #68]	; (800b464 <FIL_GetTrigger+0x94>)
 800b420:	2201      	movs	r2, #1
 800b422:	709a      	strb	r2, [r3, #2]
					ReturnValue = 1;
 800b424:	2301      	movs	r3, #1
 800b426:	71fb      	strb	r3, [r7, #7]
			if (FilterCounter > 5)
 800b428:	e00d      	b.n	800b446 <FIL_GetTrigger+0x76>
				}
			}
			else
			{
				FilterCounter ++;
 800b42a:	4b0d      	ldr	r3, [pc, #52]	; (800b460 <FIL_GetTrigger+0x90>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	3301      	adds	r3, #1
 800b430:	b2da      	uxtb	r2, r3
 800b432:	4b0b      	ldr	r3, [pc, #44]	; (800b460 <FIL_GetTrigger+0x90>)
 800b434:	701a      	strb	r2, [r3, #0]
			if (FilterCounter > 5)
 800b436:	e006      	b.n	800b446 <FIL_GetTrigger+0x76>
			}
		}
		else
		{
			FilterCounter = 0;
 800b438:	4b09      	ldr	r3, [pc, #36]	; (800b460 <FIL_GetTrigger+0x90>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	701a      	strb	r2, [r3, #0]
			FIL.Trigger = 0; //After releasing the HAL sensor, the trigger can be used again.
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <FIL_GetTrigger+0x94>)
 800b440:	2200      	movs	r2, #0
 800b442:	709a      	strb	r2, [r3, #2]
 800b444:	e000      	b.n	800b448 <FIL_GetTrigger+0x78>
			if (FilterCounter > 5)
 800b446:	bf00      	nop
		}
		//if ((HAL2 <= HAL_NEG_THRESHOLD)||(HAL2 >= HAL_POS_THRESHOLD)) //HAL0 is triggered
		//	ReturnValue = 1;
	}
	return ReturnValue;
 800b448:	79fb      	ldrb	r3, [r7, #7]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	20000970 	.word	0x20000970
 800b458:	44b54000 	.word	0x44b54000
 800b45c:	44ce4000 	.word	0x44ce4000
 800b460:	20000983 	.word	0x20000983
 800b464:	2000097c 	.word	0x2000097c

0800b468 <FIL_GetStatus>:
//-----------------------------------------------------------------------------
//! \brief      Returns the current filter type
//! \details    Returns the current filter type
//! \param[out] uint8_t FilterType 0 = none, 1 - 14 = Type
uint8_t FIL_GetStatus (void)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	af00      	add	r7, sp, #0
	//uint8_t ReturnValue = 0; //0 means no filter

	//uint8_t Match = 0;
	if (DUMMYMODEFILTER)
 800b46c:	4b3b      	ldr	r3, [pc, #236]	; (800b55c <FIL_GetStatus+0xf4>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <FIL_GetStatus+0x14>
	{
		FIL.Type = 1;
 800b474:	4b3a      	ldr	r3, [pc, #232]	; (800b560 <FIL_GetStatus+0xf8>)
 800b476:	2201      	movs	r2, #1
 800b478:	705a      	strb	r2, [r3, #1]
 800b47a:	e06b      	b.n	800b554 <FIL_GetStatus+0xec>
	}
	else
	{
		//Temporary middle sensor is use only as trigger for the grinder
		//Evaluate HAL0
		if (HAL0 <= HAL_NEG_THRESHOLD) //HAL0 is negative
 800b47c:	2002      	movs	r0, #2
 800b47e:	f7fc fa47 	bl	8007910 <ANA_GetSensorValue>
 800b482:	4603      	mov	r3, r0
 800b484:	4937      	ldr	r1, [pc, #220]	; (800b564 <FIL_GetStatus+0xfc>)
 800b486:	4618      	mov	r0, r3
 800b488:	f7fb f9f4 	bl	8006874 <__aeabi_fcmple>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <FIL_GetStatus+0x32>
			HAL_Status[0] = -1;
 800b492:	4b35      	ldr	r3, [pc, #212]	; (800b568 <FIL_GetStatus+0x100>)
 800b494:	22ff      	movs	r2, #255	; 0xff
 800b496:	701a      	strb	r2, [r3, #0]
 800b498:	e011      	b.n	800b4be <FIL_GetStatus+0x56>
		else if (HAL0 >= HAL_POS_THRESHOLD) //HAL0 is positive
 800b49a:	2002      	movs	r0, #2
 800b49c:	f7fc fa38 	bl	8007910 <ANA_GetSensorValue>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	4932      	ldr	r1, [pc, #200]	; (800b56c <FIL_GetStatus+0x104>)
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fb f9ef 	bl	8006888 <__aeabi_fcmpge>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <FIL_GetStatus+0x50>
			HAL_Status[0] = 1;
 800b4b0:	4b2d      	ldr	r3, [pc, #180]	; (800b568 <FIL_GetStatus+0x100>)
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	701a      	strb	r2, [r3, #0]
 800b4b6:	e002      	b.n	800b4be <FIL_GetStatus+0x56>
		else
			HAL_Status[0] = 0;
 800b4b8:	4b2b      	ldr	r3, [pc, #172]	; (800b568 <FIL_GetStatus+0x100>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	701a      	strb	r2, [r3, #0]
		//Evaluate HAL1 is canceled.
		if (HAL1 <= HAL_NEG_THRESHOLD) //HAL1 is negative
 800b4be:	2003      	movs	r0, #3
 800b4c0:	f7fc fa26 	bl	8007910 <ANA_GetSensorValue>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	4927      	ldr	r1, [pc, #156]	; (800b564 <FIL_GetStatus+0xfc>)
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fb f9d3 	bl	8006874 <__aeabi_fcmple>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d006      	beq.n	800b4e2 <FIL_GetStatus+0x7a>
		{
			HAL_Status[1] = -1;
 800b4d4:	4b24      	ldr	r3, [pc, #144]	; (800b568 <FIL_GetStatus+0x100>)
 800b4d6:	22ff      	movs	r2, #255	; 0xff
 800b4d8:	705a      	strb	r2, [r3, #1]
			FIL.Type = 1;
 800b4da:	4b21      	ldr	r3, [pc, #132]	; (800b560 <FIL_GetStatus+0xf8>)
 800b4dc:	2201      	movs	r2, #1
 800b4de:	705a      	strb	r2, [r3, #1]
 800b4e0:	e017      	b.n	800b512 <FIL_GetStatus+0xaa>
		}
		else if (HAL1 >= HAL_POS_THRESHOLD) //HAL1 is positive
 800b4e2:	2003      	movs	r0, #3
 800b4e4:	f7fc fa14 	bl	8007910 <ANA_GetSensorValue>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	4920      	ldr	r1, [pc, #128]	; (800b56c <FIL_GetStatus+0x104>)
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fb f9cb 	bl	8006888 <__aeabi_fcmpge>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d006      	beq.n	800b506 <FIL_GetStatus+0x9e>
		{
			HAL_Status[1] = 1;
 800b4f8:	4b1b      	ldr	r3, [pc, #108]	; (800b568 <FIL_GetStatus+0x100>)
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	705a      	strb	r2, [r3, #1]
			FIL.Type = 2;
 800b4fe:	4b18      	ldr	r3, [pc, #96]	; (800b560 <FIL_GetStatus+0xf8>)
 800b500:	2202      	movs	r2, #2
 800b502:	705a      	strb	r2, [r3, #1]
 800b504:	e005      	b.n	800b512 <FIL_GetStatus+0xaa>
		}
		else
		{
			HAL_Status[1] = 0;
 800b506:	4b18      	ldr	r3, [pc, #96]	; (800b568 <FIL_GetStatus+0x100>)
 800b508:	2200      	movs	r2, #0
 800b50a:	705a      	strb	r2, [r3, #1]
			FIL.Type = 0;
 800b50c:	4b14      	ldr	r3, [pc, #80]	; (800b560 <FIL_GetStatus+0xf8>)
 800b50e:	2200      	movs	r2, #0
 800b510:	705a      	strb	r2, [r3, #1]
		}
		//Evaluate HAL2 (middle sensor?)
		if (HAL2 <= HAL_NEG_THRESHOLD) //HAL2 is negative
 800b512:	2004      	movs	r0, #4
 800b514:	f7fc f9fc 	bl	8007910 <ANA_GetSensorValue>
 800b518:	4603      	mov	r3, r0
 800b51a:	4912      	ldr	r1, [pc, #72]	; (800b564 <FIL_GetStatus+0xfc>)
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fb f9a9 	bl	8006874 <__aeabi_fcmple>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d003      	beq.n	800b530 <FIL_GetStatus+0xc8>
		{
			HAL_Status[2] = -1;
 800b528:	4b0f      	ldr	r3, [pc, #60]	; (800b568 <FIL_GetStatus+0x100>)
 800b52a:	22ff      	movs	r2, #255	; 0xff
 800b52c:	709a      	strb	r2, [r3, #2]
 800b52e:	e011      	b.n	800b554 <FIL_GetStatus+0xec>
		}
		else if (HAL2 >= HAL_POS_THRESHOLD) //HAL2 is positive
 800b530:	2004      	movs	r0, #4
 800b532:	f7fc f9ed 	bl	8007910 <ANA_GetSensorValue>
 800b536:	4603      	mov	r3, r0
 800b538:	490c      	ldr	r1, [pc, #48]	; (800b56c <FIL_GetStatus+0x104>)
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fb f9a4 	bl	8006888 <__aeabi_fcmpge>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d003      	beq.n	800b54e <FIL_GetStatus+0xe6>
		{
			HAL_Status[2] = 1;
 800b546:	4b08      	ldr	r3, [pc, #32]	; (800b568 <FIL_GetStatus+0x100>)
 800b548:	2201      	movs	r2, #1
 800b54a:	709a      	strb	r2, [r3, #2]
 800b54c:	e002      	b.n	800b554 <FIL_GetStatus+0xec>
		}
		else
		{
			HAL_Status[2] = 0;
 800b54e:	4b06      	ldr	r3, [pc, #24]	; (800b568 <FIL_GetStatus+0x100>)
 800b550:	2200      	movs	r2, #0
 800b552:	709a      	strb	r2, [r3, #2]
			}
		}
		*/
	}
	//FIL.Type = ReturnValue;
	return FIL.Type;
 800b554:	4b02      	ldr	r3, [pc, #8]	; (800b560 <FIL_GetStatus+0xf8>)
 800b556:	785b      	ldrb	r3, [r3, #1]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	20000970 	.word	0x20000970
 800b560:	2000097c 	.word	0x2000097c
 800b564:	44b54000 	.word	0x44b54000
 800b568:	20000980 	.word	0x20000980
 800b56c:	44ce4000 	.word	0x44ce4000

0800b570 <FLA_RestorePartition>:
//-----------------------------------------------------------------------------
//! \brief      Restores a partition
//! \details    Copies the RollBack partition over the Application partition
//! \params		None
void FLA_RestorePartition(void)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
	uint8_t DataLength;
	//Check if roll back partition is valid, set the upgrade flag, reboot the system
	if (FLA[pRollBack].Status == fVALID)
 800b576:	4b12      	ldr	r3, [pc, #72]	; (800b5c0 <FLA_RestorePartition+0x50>)
 800b578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d116      	bne.n	800b5ae <FLA_RestorePartition+0x3e>
	{
		FLA_SetStatus(pApplication,fROLLBACK);
 800b580:	2104      	movs	r1, #4
 800b582:	2001      	movs	r0, #1
 800b584:	f000 f954 	bl	800b830 <FLA_SetStatus>
		DataLength = SER_FillBuffer(10, Message.MType);
 800b588:	4b0e      	ldr	r3, [pc, #56]	; (800b5c4 <FLA_RestorePartition+0x54>)
 800b58a:	78db      	ldrb	r3, [r3, #3]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	4619      	mov	r1, r3
 800b590:	200a      	movs	r0, #10
 800b592:	f002 f993 	bl	800d8bc <SER_FillBuffer>
 800b596:	4603      	mov	r3, r0
 800b598:	71fb      	strb	r3, [r7, #7]
		SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800b59a:	79fb      	ldrb	r3, [r7, #7]
 800b59c:	330a      	adds	r3, #10
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f002 f814 	bl	800d5d0 <SER_SendReturnMessage>
		HAL_NVIC_SystemReset();
 800b5a8:	f004 fab7 	bl	800fb1a <HAL_NVIC_SystemReset>
	}
	else
	{
		SER_SendReturnMessage (10,MStatImageNotValid);
	}
}
 800b5ac:	e003      	b.n	800b5b6 <FLA_RestorePartition+0x46>
		SER_SendReturnMessage (10,MStatImageNotValid);
 800b5ae:	211a      	movs	r1, #26
 800b5b0:	200a      	movs	r0, #10
 800b5b2:	f002 f80d 	bl	800d5d0 <SER_SendReturnMessage>
}
 800b5b6:	bf00      	nop
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000a04 	.word	0x20000a04
 800b5c4:	20000d0c 	.word	0x20000d0c

0800b5c8 <FLA_HandleUpgradeApplication>:
//-----------------------------------------------------------------------------
//! \brief      Updates the application
//! \details    Copies the update partition over the Application partition
//! \params		None
void FLA_HandleUpgradeApplication(void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
	uint8_t DataLength;
	//Check if partition is valid, set the upgrade flag, reboot the system
	if (FLA[pUpdate].Status == fVALID)
 800b5ce:	4b11      	ldr	r3, [pc, #68]	; (800b614 <FLA_HandleUpgradeApplication+0x4c>)
 800b5d0:	7f1b      	ldrb	r3, [r3, #28]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d116      	bne.n	800b604 <FLA_HandleUpgradeApplication+0x3c>
	{
		FLA_SetStatus(pApplication,fUPDATING);
 800b5d6:	2102      	movs	r1, #2
 800b5d8:	2001      	movs	r0, #1
 800b5da:	f000 f929 	bl	800b830 <FLA_SetStatus>
		DataLength = SER_FillBuffer(10, Message.MType);
 800b5de:	4b0e      	ldr	r3, [pc, #56]	; (800b618 <FLA_HandleUpgradeApplication+0x50>)
 800b5e0:	78db      	ldrb	r3, [r3, #3]
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	200a      	movs	r0, #10
 800b5e8:	f002 f968 	bl	800d8bc <SER_FillBuffer>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	71fb      	strb	r3, [r7, #7]
		SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	330a      	adds	r3, #10
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f001 ffe9 	bl	800d5d0 <SER_SendReturnMessage>
		HAL_NVIC_SystemReset();
 800b5fe:	f004 fa8c 	bl	800fb1a <HAL_NVIC_SystemReset>
	}
	else
	{
		SER_SendReturnMessage (10,MStatImageNotValid);
	}
}
 800b602:	e003      	b.n	800b60c <FLA_HandleUpgradeApplication+0x44>
		SER_SendReturnMessage (10,MStatImageNotValid);
 800b604:	211a      	movs	r1, #26
 800b606:	200a      	movs	r0, #10
 800b608:	f001 ffe2 	bl	800d5d0 <SER_SendReturnMessage>
}
 800b60c:	bf00      	nop
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	20000a04 	.word	0x20000a04
 800b618:	20000d0c 	.word	0x20000d0c

0800b61c <FLA_HandleSendPartitionBlock>:
//-----------------------------------------------------------------------------
//! \brief      Stores the received update application
//! \details    Saves the received update blocks in the update partition
//! \params		None
void FLA_HandleSendPartitionBlock(void)
{
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
	uint32_t CurrentAddress;
	static uint16_t CurrentBlockOld;
	uint8_t DataLength;
	uint16_t NrOfBlocks;
	uint16_t CurrentBlock;
	HAL_IWDG_Refresh(&hiwdg);
 800b622:	487e      	ldr	r0, [pc, #504]	; (800b81c <FLA_HandleSendPartitionBlock+0x200>)
 800b624:	f005 fb84 	bl	8010d30 <HAL_IWDG_Refresh>
	//Check whether the bin file size is not too big.
	if (SER_GetValue (12,4)> FLA_LENGTH / FLA_BLOCKSIZE)
 800b628:	2104      	movs	r1, #4
 800b62a:	200c      	movs	r0, #12
 800b62c:	f002 f860 	bl	800d6f0 <SER_GetValue>
 800b630:	4603      	mov	r3, r0
 800b632:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 800b636:	d904      	bls.n	800b642 <FLA_HandleSendPartitionBlock+0x26>
	{
		SER_SendReturnMessage (10,MStatImageTooBig);
 800b638:	211e      	movs	r1, #30
 800b63a:	200a      	movs	r0, #10
 800b63c:	f001 ffc8 	bl	800d5d0 <SER_SendReturnMessage>
		return;
 800b640:	e0e8      	b.n	800b814 <FLA_HandleSendPartitionBlock+0x1f8>
	}
	//Check whether the bin file is valid. If not, send error message
	if (SER_GetValue (16,4) == 0)
 800b642:	2104      	movs	r1, #4
 800b644:	2010      	movs	r0, #16
 800b646:	f002 f853 	bl	800d6f0 <SER_GetValue>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d120      	bne.n	800b692 <FLA_HandleSendPartitionBlock+0x76>
	{
		if ((SER_GetValue (20 ,2) != 0x00) || (SER_GetValue (22 ,2) != 0x80) || (SER_GetValue (24 ,2) != 0x00) || (SER_GetValue (26 ,2) != 0x20))
 800b650:	2102      	movs	r1, #2
 800b652:	2014      	movs	r0, #20
 800b654:	f002 f84c 	bl	800d6f0 <SER_GetValue>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d114      	bne.n	800b688 <FLA_HandleSendPartitionBlock+0x6c>
 800b65e:	2102      	movs	r1, #2
 800b660:	2016      	movs	r0, #22
 800b662:	f002 f845 	bl	800d6f0 <SER_GetValue>
 800b666:	4603      	mov	r3, r0
 800b668:	2b80      	cmp	r3, #128	; 0x80
 800b66a:	d10d      	bne.n	800b688 <FLA_HandleSendPartitionBlock+0x6c>
 800b66c:	2102      	movs	r1, #2
 800b66e:	2018      	movs	r0, #24
 800b670:	f002 f83e 	bl	800d6f0 <SER_GetValue>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <FLA_HandleSendPartitionBlock+0x6c>
 800b67a:	2102      	movs	r1, #2
 800b67c:	201a      	movs	r0, #26
 800b67e:	f002 f837 	bl	800d6f0 <SER_GetValue>
 800b682:	4603      	mov	r3, r0
 800b684:	2b20      	cmp	r3, #32
 800b686:	d004      	beq.n	800b692 <FLA_HandleSendPartitionBlock+0x76>
		{
			SER_SendReturnMessage (10,MStatImageCorrupt);
 800b688:	211f      	movs	r1, #31
 800b68a:	200a      	movs	r0, #10
 800b68c:	f001 ffa0 	bl	800d5d0 <SER_SendReturnMessage>
			return;
 800b690:	e0c0      	b.n	800b814 <FLA_HandleSendPartitionBlock+0x1f8>
		}
	}
	//Get the number of blocks sent and store in EEPROM
	FLA[pUpdate].NrOfBlocks = SER_GetValue (12,4);
 800b692:	2104      	movs	r1, #4
 800b694:	200c      	movs	r0, #12
 800b696:	f002 f82b 	bl	800d6f0 <SER_GetValue>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	4b60      	ldr	r3, [pc, #384]	; (800b820 <FLA_HandleSendPartitionBlock+0x204>)
 800b6a0:	841a      	strh	r2, [r3, #32]
	EEP_WriteEEPROM(FLA_UPGRADENROFBLOCKS, FLA[pUpdate].NrOfBlocks);
 800b6a2:	4b5f      	ldr	r3, [pc, #380]	; (800b820 <FLA_HandleSendPartitionBlock+0x204>)
 800b6a4:	8c1b      	ldrh	r3, [r3, #32]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	2024      	movs	r0, #36	; 0x24
 800b6aa:	f7ff fe61 	bl	800b370 <EEP_WriteEEPROM>
	NrOfBlocks = FLA[pUpdate].NrOfBlocks;
 800b6ae:	4b5c      	ldr	r3, [pc, #368]	; (800b820 <FLA_HandleSendPartitionBlock+0x204>)
 800b6b0:	8c1b      	ldrh	r3, [r3, #32]
 800b6b2:	81bb      	strh	r3, [r7, #12]
	//Get the last block nr sent and store in EEPROM
	CurrentBlockOld = FLA[pUpdate].LastBlock;
 800b6b4:	4b5a      	ldr	r3, [pc, #360]	; (800b820 <FLA_HandleSendPartitionBlock+0x204>)
 800b6b6:	8bda      	ldrh	r2, [r3, #30]
 800b6b8:	4b5a      	ldr	r3, [pc, #360]	; (800b824 <FLA_HandleSendPartitionBlock+0x208>)
 800b6ba:	801a      	strh	r2, [r3, #0]
	FLA[pUpdate].LastBlock = SER_GetValue (16,4);
 800b6bc:	2104      	movs	r1, #4
 800b6be:	2010      	movs	r0, #16
 800b6c0:	f002 f816 	bl	800d6f0 <SER_GetValue>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	4b55      	ldr	r3, [pc, #340]	; (800b820 <FLA_HandleSendPartitionBlock+0x204>)
 800b6ca:	83da      	strh	r2, [r3, #30]
	EEP_WriteEEPROM(FLA_UPGRADELASTBLOCK, FLA[pUpdate].LastBlock);
 800b6cc:	4b54      	ldr	r3, [pc, #336]	; (800b820 <FLA_HandleSendPartitionBlock+0x204>)
 800b6ce:	8bdb      	ldrh	r3, [r3, #30]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	2023      	movs	r0, #35	; 0x23
 800b6d4:	f7ff fe4c 	bl	800b370 <EEP_WriteEEPROM>
	CurrentBlock = FLA[pUpdate].LastBlock;
 800b6d8:	4b51      	ldr	r3, [pc, #324]	; (800b820 <FLA_HandleSendPartitionBlock+0x204>)
 800b6da:	8bdb      	ldrh	r3, [r3, #30]
 800b6dc:	817b      	strh	r3, [r7, #10]
	if (CurrentBlock == 0) //First data received
 800b6de:	897b      	ldrh	r3, [r7, #10]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d114      	bne.n	800b70e <FLA_HandleSendPartitionBlock+0xf2>
	{
		//Get the version sent
		FLA_SetVersion(pUpdate, SER_GetValue(8,4));
 800b6e4:	2104      	movs	r1, #4
 800b6e6:	2008      	movs	r0, #8
 800b6e8:	f002 f802 	bl	800d6f0 <SER_GetValue>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	2002      	movs	r0, #2
 800b6f2:	f000 f8df 	bl	800b8b4 <FLA_SetVersion>
		FLA_SetStatus(pUpdate, fUPDATING);
 800b6f6:	2102      	movs	r1, #2
 800b6f8:	2002      	movs	r0, #2
 800b6fa:	f000 f899 	bl	800b830 <FLA_SetStatus>
		//Clear the ImageData of this block
		memset(ImageData, 0, FLA_BLOCKSIZE); //Clear the array to zero before filling the block
 800b6fe:	2240      	movs	r2, #64	; 0x40
 800b700:	2100      	movs	r1, #0
 800b702:	4849      	ldr	r0, [pc, #292]	; (800b828 <FLA_HandleSendPartitionBlock+0x20c>)
 800b704:	f008 fd98 	bl	8014238 <memset>
		CurrentBlockOld = 0;
 800b708:	4b46      	ldr	r3, [pc, #280]	; (800b824 <FLA_HandleSendPartitionBlock+0x208>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	801a      	strh	r2, [r3, #0]
#ifdef BOOTLOADER
		LED_Set(STANDBYLED, BLINKING, 0, 0, 255, 50, 1000, 1000, 5, 0, 0); //Blinking BLUE
#endif
	}
	if ((CurrentBlock < NrOfBlocks) && (CurrentBlock - CurrentBlockOld <= 1) && (CurrentBlockOld <= CurrentBlock)) //Valid block numbers
 800b70e:	897a      	ldrh	r2, [r7, #10]
 800b710:	89bb      	ldrh	r3, [r7, #12]
 800b712:	429a      	cmp	r2, r3
 800b714:	d278      	bcs.n	800b808 <FLA_HandleSendPartitionBlock+0x1ec>
 800b716:	897b      	ldrh	r3, [r7, #10]
 800b718:	4a42      	ldr	r2, [pc, #264]	; (800b824 <FLA_HandleSendPartitionBlock+0x208>)
 800b71a:	8812      	ldrh	r2, [r2, #0]
 800b71c:	1a9b      	subs	r3, r3, r2
 800b71e:	2b01      	cmp	r3, #1
 800b720:	dc72      	bgt.n	800b808 <FLA_HandleSendPartitionBlock+0x1ec>
 800b722:	4b40      	ldr	r3, [pc, #256]	; (800b824 <FLA_HandleSendPartitionBlock+0x208>)
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	897a      	ldrh	r2, [r7, #10]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d36d      	bcc.n	800b808 <FLA_HandleSendPartitionBlock+0x1ec>
	{
		CurrentAddress = FLA_UPGRADEADDRESS + (CurrentBlock * FLA_BLOCKSIZE);
 800b72c:	897b      	ldrh	r3, [r7, #10]
 800b72e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b732:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800b736:	019b      	lsls	r3, r3, #6
 800b738:	607b      	str	r3, [r7, #4]
		CurrentBlockOld = CurrentBlock;
 800b73a:	4a3a      	ldr	r2, [pc, #232]	; (800b824 <FLA_HandleSendPartitionBlock+0x208>)
 800b73c:	897b      	ldrh	r3, [r7, #10]
 800b73e:	8013      	strh	r3, [r2, #0]
		//Check if the Version number sent is the same as the number stored
		if (FLA[pUpdate].Version == SER_GetValue(8,4))
 800b740:	4b37      	ldr	r3, [pc, #220]	; (800b820 <FLA_HandleSendPartitionBlock+0x204>)
 800b742:	699c      	ldr	r4, [r3, #24]
 800b744:	2104      	movs	r1, #4
 800b746:	2008      	movs	r0, #8
 800b748:	f001 ffd2 	bl	800d6f0 <SER_GetValue>
 800b74c:	4603      	mov	r3, r0
 800b74e:	429c      	cmp	r4, r3
 800b750:	d155      	bne.n	800b7fe <FLA_HandleSendPartitionBlock+0x1e2>
		{
			if (CurrentBlock % FLA_BLOCKSPERPAGE == 0)//new page
 800b752:	897b      	ldrh	r3, [r7, #10]
 800b754:	f003 0303 	and.w	r3, r3, #3
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10f      	bne.n	800b77e <FLA_HandleSendPartitionBlock+0x162>
			{
				//Erase the new page in order to be able to write to it
				if (FLA_ErasePage (CurrentAddress) != HAL_OK)
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f8f0 	bl	800b944 <FLA_ErasePage>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d004      	beq.n	800b774 <FLA_HandleSendPartitionBlock+0x158>
				{
					SER_SendReturnMessage (10,MStatErasePageError);
 800b76a:	211c      	movs	r1, #28
 800b76c:	200a      	movs	r0, #10
 800b76e:	f001 ff2f 	bl	800d5d0 <SER_SendReturnMessage>
					return;
 800b772:	e04f      	b.n	800b814 <FLA_HandleSendPartitionBlock+0x1f8>
				}

				//Clear the array to zero before filling the next block
				memset(ImageData, 0, FLA_BLOCKSIZE);
 800b774:	2240      	movs	r2, #64	; 0x40
 800b776:	2100      	movs	r1, #0
 800b778:	482b      	ldr	r0, [pc, #172]	; (800b828 <FLA_HandleSendPartitionBlock+0x20c>)
 800b77a:	f008 fd5d 	bl	8014238 <memset>
			}
			//Fill the buffer with the 64 bytes received
			for (uint8_t i = 0; i<FLA_BLOCKSIZE; i++)
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
 800b782:	e011      	b.n	800b7a8 <FLA_HandleSendPartitionBlock+0x18c>
			{
				ImageData[i] = SER_GetValue (20 + (i * 2),2);
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	330a      	adds	r3, #10
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2102      	movs	r1, #2
 800b790:	4618      	mov	r0, r3
 800b792:	f001 ffad 	bl	800d6f0 <SER_GetValue>
 800b796:	4603      	mov	r3, r0
 800b798:	461a      	mov	r2, r3
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	b2d1      	uxtb	r1, r2
 800b79e:	4a22      	ldr	r2, [pc, #136]	; (800b828 <FLA_HandleSendPartitionBlock+0x20c>)
 800b7a0:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i<FLA_BLOCKSIZE; i++)
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	2b3f      	cmp	r3, #63	; 0x3f
 800b7ac:	d9ea      	bls.n	800b784 <FLA_HandleSendPartitionBlock+0x168>
			}
			//Write the received data to flash. This will cause the system to freeze until done. No UART possible
			FLA_WriteBlock (CurrentAddress);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f8e8 	bl	800b984 <FLA_WriteBlock>
			//Verify the written page
			if (FLA_VerifyBlock (CurrentAddress) == 0)
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f93b 	bl	800ba30 <FLA_VerifyBlock>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d104      	bne.n	800b7ca <FLA_HandleSendPartitionBlock+0x1ae>
			{
				SER_SendReturnMessage (10,MStatVerifyError);
 800b7c0:	211b      	movs	r1, #27
 800b7c2:	200a      	movs	r0, #10
 800b7c4:	f001 ff04 	bl	800d5d0 <SER_SendReturnMessage>
				return;
 800b7c8:	e024      	b.n	800b814 <FLA_HandleSendPartitionBlock+0x1f8>
			}
			else
			{
				DataLength = SER_FillBuffer(10, Message.MType);
 800b7ca:	4b18      	ldr	r3, [pc, #96]	; (800b82c <FLA_HandleSendPartitionBlock+0x210>)
 800b7cc:	78db      	ldrb	r3, [r3, #3]
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	200a      	movs	r0, #10
 800b7d4:	f002 f872 	bl	800d8bc <SER_FillBuffer>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	70fb      	strb	r3, [r7, #3]
				SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800b7dc:	78fb      	ldrb	r3, [r7, #3]
 800b7de:	330a      	adds	r3, #10
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 fef3 	bl	800d5d0 <SER_SendReturnMessage>
				if (CurrentBlock == NrOfBlocks - 1) //Last block
 800b7ea:	897a      	ldrh	r2, [r7, #10]
 800b7ec:	89bb      	ldrh	r3, [r7, #12]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d10e      	bne.n	800b812 <FLA_HandleSendPartitionBlock+0x1f6>
				{
					FLA_SetStatus(pUpdate, fVALID);
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	2002      	movs	r0, #2
 800b7f8:	f000 f81a 	bl	800b830 <FLA_SetStatus>
				}
				return;
 800b7fc:	e009      	b.n	800b812 <FLA_HandleSendPartitionBlock+0x1f6>
			}
		}
		else //Version mismatch. Abort
		{
			SER_SendReturnMessage (10,MStatWrongVersion);
 800b7fe:	2119      	movs	r1, #25
 800b800:	200a      	movs	r0, #10
 800b802:	f001 fee5 	bl	800d5d0 <SER_SendReturnMessage>
		if (FLA[pUpdate].Version == SER_GetValue(8,4))
 800b806:	e005      	b.n	800b814 <FLA_HandleSendPartitionBlock+0x1f8>
		}
	}
	else
	{
		SER_SendReturnMessage (10,MStatBlockNrError);
 800b808:	2114      	movs	r1, #20
 800b80a:	200a      	movs	r0, #10
 800b80c:	f001 fee0 	bl	800d5d0 <SER_SendReturnMessage>
 800b810:	e000      	b.n	800b814 <FLA_HandleSendPartitionBlock+0x1f8>
				return;
 800b812:	bf00      	nop
	}
}
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	bd90      	pop	{r4, r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20000588 	.word	0x20000588
 800b820:	20000a04 	.word	0x20000a04
 800b824:	20000a34 	.word	0x20000a34
 800b828:	20000984 	.word	0x20000984
 800b82c:	20000d0c 	.word	0x20000d0c

0800b830 <FLA_SetStatus>:
//! \brief      Sets the status of the selected partition
//! \details    Sets the status and stores in EEprom
//! \param[in]	enuPartition newPartition
//! \param[in]	enuFLA newStatus
void FLA_SetStatus (enuPartition newPartition, enuFLA newStatus)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	4603      	mov	r3, r0
 800b838:	460a      	mov	r2, r1
 800b83a:	71fb      	strb	r3, [r7, #7]
 800b83c:	4613      	mov	r3, r2
 800b83e:	71bb      	strb	r3, [r7, #6]
	FLA[(uint8_t) newPartition].Status = newStatus;
 800b840:	79fa      	ldrb	r2, [r7, #7]
 800b842:	491b      	ldr	r1, [pc, #108]	; (800b8b0 <FLA_SetStatus+0x80>)
 800b844:	4613      	mov	r3, r2
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	4413      	add	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	440b      	add	r3, r1
 800b84e:	3304      	adds	r3, #4
 800b850:	79ba      	ldrb	r2, [r7, #6]
 800b852:	701a      	strb	r2, [r3, #0]
	if (newPartition == pApplication)
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d106      	bne.n	800b868 <FLA_SetStatus+0x38>
		EEP_WriteEEPROM(FLA_APPLICATIONSTATUS, FLA[pApplication].Status);
 800b85a:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <FLA_SetStatus+0x80>)
 800b85c:	7c1b      	ldrb	r3, [r3, #16]
 800b85e:	4619      	mov	r1, r3
 800b860:	201f      	movs	r0, #31
 800b862:	f7ff fd85 	bl	800b370 <EEP_WriteEEPROM>
 800b866:	e013      	b.n	800b890 <FLA_SetStatus+0x60>
	else if (newPartition == pUpdate)
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d106      	bne.n	800b87c <FLA_SetStatus+0x4c>
		EEP_WriteEEPROM(FLA_UPGRADESTATUS, FLA[pUpdate].Status);
 800b86e:	4b10      	ldr	r3, [pc, #64]	; (800b8b0 <FLA_SetStatus+0x80>)
 800b870:	7f1b      	ldrb	r3, [r3, #28]
 800b872:	4619      	mov	r1, r3
 800b874:	2025      	movs	r0, #37	; 0x25
 800b876:	f7ff fd7b 	bl	800b370 <EEP_WriteEEPROM>
 800b87a:	e009      	b.n	800b890 <FLA_SetStatus+0x60>
	else if (newPartition == pRollBack)
 800b87c:	79fb      	ldrb	r3, [r7, #7]
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d106      	bne.n	800b890 <FLA_SetStatus+0x60>
		EEP_WriteEEPROM(FLA_ROLLBACKSTATUS, FLA[pRollBack].Status);
 800b882:	4b0b      	ldr	r3, [pc, #44]	; (800b8b0 <FLA_SetStatus+0x80>)
 800b884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b888:	4619      	mov	r1, r3
 800b88a:	2021      	movs	r0, #33	; 0x21
 800b88c:	f7ff fd70 	bl	800b370 <EEP_WriteEEPROM>
	for(uint32_t Counter = 0; Counter<10000; Counter++)
 800b890:	2300      	movs	r3, #0
 800b892:	60fb      	str	r3, [r7, #12]
 800b894:	e002      	b.n	800b89c <FLA_SetStatus+0x6c>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3301      	adds	r3, #1
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f242 720f 	movw	r2, #9999	; 0x270f
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d9f7      	bls.n	800b896 <FLA_SetStatus+0x66>
	{

	}
}
 800b8a6:	bf00      	nop
 800b8a8:	bf00      	nop
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000a04 	.word	0x20000a04

0800b8b4 <FLA_SetVersion>:
//! \brief      Sets the version of the selected partition
//! \details    Sets the version and stores in EEprom
//! \param[in]	enuPartition newPartition
//! \param[in]	uint32_t newVersion
void FLA_SetVersion (enuPartition newPartition, uint32_t newVersion)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	6039      	str	r1, [r7, #0]
 800b8be:	71fb      	strb	r3, [r7, #7]
	FLA[(uint8_t) newPartition].Version = newVersion;
 800b8c0:	79fa      	ldrb	r2, [r7, #7]
 800b8c2:	491f      	ldr	r1, [pc, #124]	; (800b940 <FLA_SetVersion+0x8c>)
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	4413      	add	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	440b      	add	r3, r1
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	601a      	str	r2, [r3, #0]
	if (newPartition == pApplication)
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d106      	bne.n	800b8e6 <FLA_SetVersion+0x32>
		EEP_WriteEEPROM(FLA_APPLICATIONVERSION, FLA[pApplication].Version);
 800b8d8:	4b19      	ldr	r3, [pc, #100]	; (800b940 <FLA_SetVersion+0x8c>)
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	4619      	mov	r1, r3
 800b8de:	201e      	movs	r0, #30
 800b8e0:	f7ff fd46 	bl	800b370 <EEP_WriteEEPROM>
 800b8e4:	e01c      	b.n	800b920 <FLA_SetVersion+0x6c>
	else if (newPartition == pUpdate)
 800b8e6:	79fb      	ldrb	r3, [r7, #7]
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d106      	bne.n	800b8fa <FLA_SetVersion+0x46>
		EEP_WriteEEPROM(FLA_UPGRADEVERSION, FLA[pUpdate].Version);
 800b8ec:	4b14      	ldr	r3, [pc, #80]	; (800b940 <FLA_SetVersion+0x8c>)
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	2022      	movs	r0, #34	; 0x22
 800b8f4:	f7ff fd3c 	bl	800b370 <EEP_WriteEEPROM>
 800b8f8:	e012      	b.n	800b920 <FLA_SetVersion+0x6c>
	else if (newPartition == pRollBack)
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d106      	bne.n	800b90e <FLA_SetVersion+0x5a>
		EEP_WriteEEPROM(FLA_ROLLBACKVERSION, FLA[pRollBack].Version);
 800b900:	4b0f      	ldr	r3, [pc, #60]	; (800b940 <FLA_SetVersion+0x8c>)
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	4619      	mov	r1, r3
 800b906:	2020      	movs	r0, #32
 800b908:	f7ff fd32 	bl	800b370 <EEP_WriteEEPROM>
 800b90c:	e008      	b.n	800b920 <FLA_SetVersion+0x6c>
	else if (newPartition == pBootloader)
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d105      	bne.n	800b920 <FLA_SetVersion+0x6c>
		EEP_WriteEEPROM(FLA_BOOTLOADERVERSION, FLA[pBootloader].Version);
 800b914:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <FLA_SetVersion+0x8c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4619      	mov	r1, r3
 800b91a:	2026      	movs	r0, #38	; 0x26
 800b91c:	f7ff fd28 	bl	800b370 <EEP_WriteEEPROM>
	for(uint32_t Counter = 0; Counter<10000; Counter++)
 800b920:	2300      	movs	r3, #0
 800b922:	60fb      	str	r3, [r7, #12]
 800b924:	e002      	b.n	800b92c <FLA_SetVersion+0x78>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	3301      	adds	r3, #1
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f242 720f 	movw	r2, #9999	; 0x270f
 800b932:	4293      	cmp	r3, r2
 800b934:	d9f7      	bls.n	800b926 <FLA_SetVersion+0x72>
	{

	}
}
 800b936:	bf00      	nop
 800b938:	bf00      	nop
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20000a04 	.word	0x20000a04

0800b944 <FLA_ErasePage>:
//-----------------------------------------------------------------------------
//! \brief      Erases a flash page
//! \details    Erases a flash page
//! \param[in] 	uint8_t NewAdress (FLA_FACTORYADDRESS or FLA_UPGRADEADDRESS)
HAL_StatusTypeDef FLA_ErasePage (uint32_t NewAddress)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef  flashstatus;
	FLASH_EraseInitTypeDef s_eraseinit;
	uint32_t page_error = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	60fb      	str	r3, [r7, #12]

	s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800b950:	2300      	movs	r3, #0
 800b952:	613b      	str	r3, [r7, #16]
	s_eraseinit.PageAddress = NewAddress;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	617b      	str	r3, [r7, #20]
	s_eraseinit.NbPages     = 1;
 800b958:	2301      	movs	r3, #1
 800b95a:	61bb      	str	r3, [r7, #24]
	//Unlock flash
	HAL_FLASH_Unlock();
 800b95c:	f004 fbbc 	bl	80100d8 <HAL_FLASH_Unlock>
	flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800b960:	f107 020c 	add.w	r2, r7, #12
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	4611      	mov	r1, r2
 800b96a:	4618      	mov	r0, r3
 800b96c:	f004 fcd4 	bl	8010318 <HAL_FLASHEx_Erase>
 800b970:	4603      	mov	r3, r0
 800b972:	77fb      	strb	r3, [r7, #31]
	//Unlock flash
	HAL_FLASH_Lock();
 800b974:	f004 fbea 	bl	801014c <HAL_FLASH_Lock>
	return flashstatus;
 800b978:	7ffb      	ldrb	r3, [r7, #31]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <FLA_WriteBlock>:
//-----------------------------------------------------------------------------
//! \brief      Writes a certain amount of data to a flash page
//! \details    Writes a certain amount of data to a flash page with the contents of Imagedata
//! \param[in] 	uint32_t NewAdress StartAddress for the first byte
HAL_StatusTypeDef FLA_WriteBlock (uint32_t NewAddress)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef  flashstatus;
	uint8_t Counter;
	for (uint16_t i=0; i<FLA_BLOCKSIZE; i+=4)
 800b98c:	2300      	movs	r3, #0
 800b98e:	81bb      	strh	r3, [r7, #12]
 800b990:	e042      	b.n	800ba18 <FLA_WriteBlock+0x94>
	{
		uint32_t Value = ImageData[i] + (ImageData[i+1]<<8) + (ImageData[i+2]<<16) + (ImageData[i+3]<<24);
 800b992:	89bb      	ldrh	r3, [r7, #12]
 800b994:	4a25      	ldr	r2, [pc, #148]	; (800ba2c <FLA_WriteBlock+0xa8>)
 800b996:	5cd3      	ldrb	r3, [r2, r3]
 800b998:	4619      	mov	r1, r3
 800b99a:	89bb      	ldrh	r3, [r7, #12]
 800b99c:	3301      	adds	r3, #1
 800b99e:	4a23      	ldr	r2, [pc, #140]	; (800ba2c <FLA_WriteBlock+0xa8>)
 800b9a0:	5cd3      	ldrb	r3, [r2, r3]
 800b9a2:	021b      	lsls	r3, r3, #8
 800b9a4:	18ca      	adds	r2, r1, r3
 800b9a6:	89bb      	ldrh	r3, [r7, #12]
 800b9a8:	3302      	adds	r3, #2
 800b9aa:	4920      	ldr	r1, [pc, #128]	; (800ba2c <FLA_WriteBlock+0xa8>)
 800b9ac:	5ccb      	ldrb	r3, [r1, r3]
 800b9ae:	041b      	lsls	r3, r3, #16
 800b9b0:	441a      	add	r2, r3
 800b9b2:	89bb      	ldrh	r3, [r7, #12]
 800b9b4:	3303      	adds	r3, #3
 800b9b6:	491d      	ldr	r1, [pc, #116]	; (800ba2c <FLA_WriteBlock+0xa8>)
 800b9b8:	5ccb      	ldrb	r3, [r1, r3]
 800b9ba:	061b      	lsls	r3, r3, #24
 800b9bc:	4413      	add	r3, r2
 800b9be:	60bb      	str	r3, [r7, #8]
		HAL_FLASH_Unlock();
 800b9c0:	f004 fb8a 	bl	80100d8 <HAL_FLASH_Unlock>
		flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
 800b9c4:	89ba      	ldrh	r2, [r7, #12]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	2002      	movs	r0, #2
 800b9d0:	f004 fb52 	bl	8010078 <HAL_FLASH_Program>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73fb      	strb	r3, [r7, #15]
		Counter = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73bb      	strb	r3, [r7, #14]
		while ((flashstatus != HAL_OK) && (Counter < 100))
 800b9dc:	e00c      	b.n	800b9f8 <FLA_WriteBlock+0x74>
		{
			Counter ++;
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	73bb      	strb	r3, [r7, #14]
			flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, NewAddress + i, Value);
 800b9e4:	89ba      	ldrh	r2, [r7, #12]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	2002      	movs	r0, #2
 800b9f0:	f004 fb42 	bl	8010078 <HAL_FLASH_Program>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
		while ((flashstatus != HAL_OK) && (Counter < 100))
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d002      	beq.n	800ba04 <FLA_WriteBlock+0x80>
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ba00:	2b63      	cmp	r3, #99	; 0x63
 800ba02:	d9ec      	bls.n	800b9de <FLA_WriteBlock+0x5a>
		}
		if (Counter == 100)
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	2b64      	cmp	r3, #100	; 0x64
 800ba08:	d103      	bne.n	800ba12 <FLA_WriteBlock+0x8e>
		{
			HAL_FLASH_Lock();
 800ba0a:	f004 fb9f 	bl	801014c <HAL_FLASH_Lock>
			return flashstatus; //Tried 100 times to write. Return error and break off
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	e008      	b.n	800ba24 <FLA_WriteBlock+0xa0>
	for (uint16_t i=0; i<FLA_BLOCKSIZE; i+=4)
 800ba12:	89bb      	ldrh	r3, [r7, #12]
 800ba14:	3304      	adds	r3, #4
 800ba16:	81bb      	strh	r3, [r7, #12]
 800ba18:	89bb      	ldrh	r3, [r7, #12]
 800ba1a:	2b3f      	cmp	r3, #63	; 0x3f
 800ba1c:	d9b9      	bls.n	800b992 <FLA_WriteBlock+0xe>
		}
	}
	HAL_FLASH_Lock();
 800ba1e:	f004 fb95 	bl	801014c <HAL_FLASH_Lock>
	return flashstatus;
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	20000984 	.word	0x20000984

0800ba30 <FLA_VerifyBlock>:
//! \brief      Verifies a flash page and compares to the data buffer
//! \details    Verifies a flash page and compares to the data buffer
//! \param[in] 	uint8_t NewAdress (FLA_FACTORYADDRESS or FLA_UPGRADEADDRESS)
//! \param[out]	uint8_t ReturnValue (0 = Failed, 1 = success)
uint8_t FLA_VerifyBlock (uint32_t NewAddress)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
	uint32_t FlashContent;
	uint8_t ReturnValue = 1;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	733b      	strb	r3, [r7, #12]

	for (uint16_t i = 0; i<FLA_BLOCKSIZE; i+=4)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	81fb      	strh	r3, [r7, #14]
 800ba40:	e03a      	b.n	800bab8 <FLA_VerifyBlock+0x88>
	{
		FlashContent = (*(__IO uint32_t*) (NewAddress + i));
 800ba42:	89fa      	ldrh	r2, [r7, #14]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4413      	add	r3, r2
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60bb      	str	r3, [r7, #8]
		ImageDataVerify[i] = (uint8_t) FlashContent;
 800ba4c:	89fb      	ldrh	r3, [r7, #14]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	b2d1      	uxtb	r1, r2
 800ba52:	4a1e      	ldr	r2, [pc, #120]	; (800bacc <FLA_VerifyBlock+0x9c>)
 800ba54:	54d1      	strb	r1, [r2, r3]
		ImageDataVerify[i+1] = (uint8_t) (FlashContent >> 8);
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	0a1a      	lsrs	r2, r3, #8
 800ba5a:	89fb      	ldrh	r3, [r7, #14]
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	b2d1      	uxtb	r1, r2
 800ba60:	4a1a      	ldr	r2, [pc, #104]	; (800bacc <FLA_VerifyBlock+0x9c>)
 800ba62:	54d1      	strb	r1, [r2, r3]
		ImageDataVerify[i+2] = (uint8_t) (FlashContent >> 16);
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	0c1a      	lsrs	r2, r3, #16
 800ba68:	89fb      	ldrh	r3, [r7, #14]
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	b2d1      	uxtb	r1, r2
 800ba6e:	4a17      	ldr	r2, [pc, #92]	; (800bacc <FLA_VerifyBlock+0x9c>)
 800ba70:	54d1      	strb	r1, [r2, r3]
		ImageDataVerify[i+3] = (uint8_t) (FlashContent >> 24);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	0e1a      	lsrs	r2, r3, #24
 800ba76:	89fb      	ldrh	r3, [r7, #14]
 800ba78:	3303      	adds	r3, #3
 800ba7a:	b2d1      	uxtb	r1, r2
 800ba7c:	4a13      	ldr	r2, [pc, #76]	; (800bacc <FLA_VerifyBlock+0x9c>)
 800ba7e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t j=0; j<4; j++)
 800ba80:	2300      	movs	r3, #0
 800ba82:	737b      	strb	r3, [r7, #13]
 800ba84:	e012      	b.n	800baac <FLA_VerifyBlock+0x7c>
		{
			if (ImageData[i+j] != ImageDataVerify[i+j])
 800ba86:	89fa      	ldrh	r2, [r7, #14]
 800ba88:	7b7b      	ldrb	r3, [r7, #13]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	4a10      	ldr	r2, [pc, #64]	; (800bad0 <FLA_VerifyBlock+0xa0>)
 800ba8e:	5cd2      	ldrb	r2, [r2, r3]
 800ba90:	89f9      	ldrh	r1, [r7, #14]
 800ba92:	7b7b      	ldrb	r3, [r7, #13]
 800ba94:	440b      	add	r3, r1
 800ba96:	490d      	ldr	r1, [pc, #52]	; (800bacc <FLA_VerifyBlock+0x9c>)
 800ba98:	5ccb      	ldrb	r3, [r1, r3]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d003      	beq.n	800baa6 <FLA_VerifyBlock+0x76>
			{
				ReturnValue = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	733b      	strb	r3, [r7, #12]
				return ReturnValue;
 800baa2:	7b3b      	ldrb	r3, [r7, #12]
 800baa4:	e00c      	b.n	800bac0 <FLA_VerifyBlock+0x90>
		for (uint8_t j=0; j<4; j++)
 800baa6:	7b7b      	ldrb	r3, [r7, #13]
 800baa8:	3301      	adds	r3, #1
 800baaa:	737b      	strb	r3, [r7, #13]
 800baac:	7b7b      	ldrb	r3, [r7, #13]
 800baae:	2b03      	cmp	r3, #3
 800bab0:	d9e9      	bls.n	800ba86 <FLA_VerifyBlock+0x56>
	for (uint16_t i = 0; i<FLA_BLOCKSIZE; i+=4)
 800bab2:	89fb      	ldrh	r3, [r7, #14]
 800bab4:	3304      	adds	r3, #4
 800bab6:	81fb      	strh	r3, [r7, #14]
 800bab8:	89fb      	ldrh	r3, [r7, #14]
 800baba:	2b3f      	cmp	r3, #63	; 0x3f
 800babc:	d9c1      	bls.n	800ba42 <FLA_VerifyBlock+0x12>
			}
		}
	}
	return ReturnValue;
 800babe:	7b3b      	ldrb	r3, [r7, #12]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3714      	adds	r7, #20
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bc80      	pop	{r7}
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	200009c4 	.word	0x200009c4
 800bad0:	20000984 	.word	0x20000984

0800bad4 <FLA_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initalizes the flash module
//! \details    Initalizes the flash module
//! \params		None
void FLA_Init (void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
#ifdef BOOTLOADER
	FLA_SetVersion(pBootloader,WRK_GetSoftwareVersion());
	FLA[pApplication].Version = EEP_ReadEEPROM(FLA_APPLICATIONVERSION);
	FLA[pApplication].Status = EEP_ReadEEPROM(FLA_APPLICATIONSTATUS);
#else
	FLA[pBootloader].Version = EEP_ReadEEPROM(FLA_BOOTLOADERVERSION);
 800bad8:	2026      	movs	r0, #38	; 0x26
 800bada:	f7ff fc66 	bl	800b3aa <EEP_ReadEEPROM>
 800bade:	4603      	mov	r3, r0
 800bae0:	4a22      	ldr	r2, [pc, #136]	; (800bb6c <FLA_Init+0x98>)
 800bae2:	6013      	str	r3, [r2, #0]
	FLA[pApplication].Version = WRK_GetSoftwareVersion();
 800bae4:	f7ff fb80 	bl	800b1e8 <WRK_GetSoftwareVersion>
 800bae8:	4603      	mov	r3, r0
 800baea:	4a20      	ldr	r2, [pc, #128]	; (800bb6c <FLA_Init+0x98>)
 800baec:	60d3      	str	r3, [r2, #12]
	FLA[pApplication].Status = fVALID;
 800baee:	4b1f      	ldr	r3, [pc, #124]	; (800bb6c <FLA_Init+0x98>)
 800baf0:	2201      	movs	r2, #1
 800baf2:	741a      	strb	r2, [r3, #16]
	//Write current application version
	EEP_WriteEEPROM(FLA_APPLICATIONVERSION, FLA[pApplication].Version);
 800baf4:	4b1d      	ldr	r3, [pc, #116]	; (800bb6c <FLA_Init+0x98>)
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	4619      	mov	r1, r3
 800bafa:	201e      	movs	r0, #30
 800bafc:	f7ff fc38 	bl	800b370 <EEP_WriteEEPROM>
	EEP_WriteEEPROM(FLA_APPLICATIONSTATUS, FLA[pApplication].Status);
 800bb00:	4b1a      	ldr	r3, [pc, #104]	; (800bb6c <FLA_Init+0x98>)
 800bb02:	7c1b      	ldrb	r3, [r3, #16]
 800bb04:	4619      	mov	r1, r3
 800bb06:	201f      	movs	r0, #31
 800bb08:	f7ff fc32 	bl	800b370 <EEP_WriteEEPROM>
#endif
	FLA[pRollBack].Version = EEP_ReadEEPROM(FLA_ROLLBACKVERSION);
 800bb0c:	2020      	movs	r0, #32
 800bb0e:	f7ff fc4c 	bl	800b3aa <EEP_ReadEEPROM>
 800bb12:	4603      	mov	r3, r0
 800bb14:	4a15      	ldr	r2, [pc, #84]	; (800bb6c <FLA_Init+0x98>)
 800bb16:	6253      	str	r3, [r2, #36]	; 0x24
	FLA[pRollBack].Status = EEP_ReadEEPROM(FLA_ROLLBACKSTATUS);
 800bb18:	2021      	movs	r0, #33	; 0x21
 800bb1a:	f7ff fc46 	bl	800b3aa <EEP_ReadEEPROM>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <FLA_Init+0x98>)
 800bb24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	FLA[pUpdate].Version = EEP_ReadEEPROM(FLA_UPGRADEVERSION);
 800bb28:	2022      	movs	r0, #34	; 0x22
 800bb2a:	f7ff fc3e 	bl	800b3aa <EEP_ReadEEPROM>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4a0e      	ldr	r2, [pc, #56]	; (800bb6c <FLA_Init+0x98>)
 800bb32:	6193      	str	r3, [r2, #24]
	FLA[pUpdate].LastBlock = EEP_ReadEEPROM(FLA_UPGRADELASTBLOCK);
 800bb34:	2023      	movs	r0, #35	; 0x23
 800bb36:	f7ff fc38 	bl	800b3aa <EEP_ReadEEPROM>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	4b0b      	ldr	r3, [pc, #44]	; (800bb6c <FLA_Init+0x98>)
 800bb40:	83da      	strh	r2, [r3, #30]
	FLA[pUpdate].NrOfBlocks = EEP_ReadEEPROM(FLA_UPGRADENROFBLOCKS);
 800bb42:	2024      	movs	r0, #36	; 0x24
 800bb44:	f7ff fc31 	bl	800b3aa <EEP_ReadEEPROM>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <FLA_Init+0x98>)
 800bb4e:	841a      	strh	r2, [r3, #32]
	FLA[pUpdate].Status = EEP_ReadEEPROM(FLA_UPGRADESTATUS);
 800bb50:	2025      	movs	r0, #37	; 0x25
 800bb52:	f7ff fc2a 	bl	800b3aa <EEP_ReadEEPROM>
 800bb56:	4603      	mov	r3, r0
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <FLA_Init+0x98>)
 800bb5c:	771a      	strb	r2, [r3, #28]
	FLA[pRollBack].NrOfBlocks = FLA_LENGTH / FLA_BLOCKSIZE;
 800bb5e:	4b03      	ldr	r3, [pc, #12]	; (800bb6c <FLA_Init+0x98>)
 800bb60:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 800bb64:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 800bb66:	bf00      	nop
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000a04 	.word	0x20000a04

0800bb70 <LED_StorePrevious>:
//! \LED container
stcLed LED[WS2812_NUM];
stcLed LEDPREVIOUS[WS2812_NUM];

void LED_StorePrevious (uint8_t newLED)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	737b      	strb	r3, [r7, #13]
	LastLED = newLED;
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	73fb      	strb	r3, [r7, #15]
	if (newLED == WATERTANKLEDS) LastLED ++;
 800bb82:	79fb      	ldrb	r3, [r7, #7]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <LED_StorePrevious+0x1e>
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800bb8e:	7b7b      	ldrb	r3, [r7, #13]
 800bb90:	73bb      	strb	r3, [r7, #14]
 800bb92:	e097      	b.n	800bcc4 <LED_StorePrevious+0x154>
	{
		LEDPREVIOUS[i].BreathInterval = LED[i].BreathInterval;
 800bb94:	7bb9      	ldrb	r1, [r7, #14]
 800bb96:	7bba      	ldrb	r2, [r7, #14]
 800bb98:	4850      	ldr	r0, [pc, #320]	; (800bcdc <LED_StorePrevious+0x16c>)
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	440b      	add	r3, r1
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	4403      	add	r3, r0
 800bba4:	3328      	adds	r3, #40	; 0x28
 800bba6:	7818      	ldrb	r0, [r3, #0]
 800bba8:	494d      	ldr	r1, [pc, #308]	; (800bce0 <LED_StorePrevious+0x170>)
 800bbaa:	4613      	mov	r3, r2
 800bbac:	00db      	lsls	r3, r3, #3
 800bbae:	4413      	add	r3, r2
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	440b      	add	r3, r1
 800bbb4:	3328      	adds	r3, #40	; 0x28
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	701a      	strb	r2, [r3, #0]
		LEDPREVIOUS[i].FadeInInterval = LED[i].FadeInInterval;
 800bbba:	7bb9      	ldrb	r1, [r7, #14]
 800bbbc:	7bba      	ldrb	r2, [r7, #14]
 800bbbe:	4847      	ldr	r0, [pc, #284]	; (800bcdc <LED_StorePrevious+0x16c>)
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	440b      	add	r3, r1
 800bbc6:	00db      	lsls	r3, r3, #3
 800bbc8:	4403      	add	r3, r0
 800bbca:	332c      	adds	r3, #44	; 0x2c
 800bbcc:	7818      	ldrb	r0, [r3, #0]
 800bbce:	4944      	ldr	r1, [pc, #272]	; (800bce0 <LED_StorePrevious+0x170>)
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	4413      	add	r3, r2
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	440b      	add	r3, r1
 800bbda:	332c      	adds	r3, #44	; 0x2c
 800bbdc:	4602      	mov	r2, r0
 800bbde:	701a      	strb	r2, [r3, #0]
		LEDPREVIOUS[i].FadeOutInterval = LED[i].FadeOutInterval;
 800bbe0:	7bb9      	ldrb	r1, [r7, #14]
 800bbe2:	7bba      	ldrb	r2, [r7, #14]
 800bbe4:	483d      	ldr	r0, [pc, #244]	; (800bcdc <LED_StorePrevious+0x16c>)
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	00db      	lsls	r3, r3, #3
 800bbea:	440b      	add	r3, r1
 800bbec:	00db      	lsls	r3, r3, #3
 800bbee:	4403      	add	r3, r0
 800bbf0:	3330      	adds	r3, #48	; 0x30
 800bbf2:	7818      	ldrb	r0, [r3, #0]
 800bbf4:	493a      	ldr	r1, [pc, #232]	; (800bce0 <LED_StorePrevious+0x170>)
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	4413      	add	r3, r2
 800bbfc:	00db      	lsls	r3, r3, #3
 800bbfe:	440b      	add	r3, r1
 800bc00:	3330      	adds	r3, #48	; 0x30
 800bc02:	4602      	mov	r2, r0
 800bc04:	701a      	strb	r2, [r3, #0]
		LEDPREVIOUS[i].BlinkTimeOn = LED[i].BlinkTimeOn;
 800bc06:	7bb9      	ldrb	r1, [r7, #14]
 800bc08:	7bba      	ldrb	r2, [r7, #14]
 800bc0a:	4834      	ldr	r0, [pc, #208]	; (800bcdc <LED_StorePrevious+0x16c>)
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	440b      	add	r3, r1
 800bc12:	00db      	lsls	r3, r3, #3
 800bc14:	4403      	add	r3, r0
 800bc16:	3318      	adds	r3, #24
 800bc18:	8818      	ldrh	r0, [r3, #0]
 800bc1a:	4931      	ldr	r1, [pc, #196]	; (800bce0 <LED_StorePrevious+0x170>)
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	4413      	add	r3, r2
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	440b      	add	r3, r1
 800bc26:	3318      	adds	r3, #24
 800bc28:	4602      	mov	r2, r0
 800bc2a:	801a      	strh	r2, [r3, #0]
		LEDPREVIOUS[i].BlinkTimeOff = LED[i].BlinkTimeOff;
 800bc2c:	7bb9      	ldrb	r1, [r7, #14]
 800bc2e:	7bba      	ldrb	r2, [r7, #14]
 800bc30:	482a      	ldr	r0, [pc, #168]	; (800bcdc <LED_StorePrevious+0x16c>)
 800bc32:	460b      	mov	r3, r1
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	440b      	add	r3, r1
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	4403      	add	r3, r0
 800bc3c:	3320      	adds	r3, #32
 800bc3e:	8818      	ldrh	r0, [r3, #0]
 800bc40:	4927      	ldr	r1, [pc, #156]	; (800bce0 <LED_StorePrevious+0x170>)
 800bc42:	4613      	mov	r3, r2
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	4413      	add	r3, r2
 800bc48:	00db      	lsls	r3, r3, #3
 800bc4a:	440b      	add	r3, r1
 800bc4c:	3320      	adds	r3, #32
 800bc4e:	4602      	mov	r2, r0
 800bc50:	801a      	strh	r2, [r3, #0]
		LEDPREVIOUS[i].Effect = LED[i].Effect;
 800bc52:	7bb9      	ldrb	r1, [r7, #14]
 800bc54:	7bba      	ldrb	r2, [r7, #14]
 800bc56:	4821      	ldr	r0, [pc, #132]	; (800bcdc <LED_StorePrevious+0x16c>)
 800bc58:	460b      	mov	r3, r1
 800bc5a:	00db      	lsls	r3, r3, #3
 800bc5c:	440b      	add	r3, r1
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	4403      	add	r3, r0
 800bc62:	3310      	adds	r3, #16
 800bc64:	7818      	ldrb	r0, [r3, #0]
 800bc66:	491e      	ldr	r1, [pc, #120]	; (800bce0 <LED_StorePrevious+0x170>)
 800bc68:	4613      	mov	r3, r2
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	440b      	add	r3, r1
 800bc72:	3310      	adds	r3, #16
 800bc74:	4602      	mov	r2, r0
 800bc76:	701a      	strb	r2, [r3, #0]
		LEDPREVIOUS[i].Color = LED[i].Color;
 800bc78:	7bb9      	ldrb	r1, [r7, #14]
 800bc7a:	7bba      	ldrb	r2, [r7, #14]
 800bc7c:	4817      	ldr	r0, [pc, #92]	; (800bcdc <LED_StorePrevious+0x16c>)
 800bc7e:	460b      	mov	r3, r1
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	440b      	add	r3, r1
 800bc84:	00db      	lsls	r3, r3, #3
 800bc86:	4403      	add	r3, r0
 800bc88:	6819      	ldr	r1, [r3, #0]
 800bc8a:	4815      	ldr	r0, [pc, #84]	; (800bce0 <LED_StorePrevious+0x170>)
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	00db      	lsls	r3, r3, #3
 800bc90:	4413      	add	r3, r2
 800bc92:	00db      	lsls	r3, r3, #3
 800bc94:	4403      	add	r3, r0
 800bc96:	6019      	str	r1, [r3, #0]
		LEDPREVIOUS[i].Intensity = LED[i].Intensity;
 800bc98:	7bb9      	ldrb	r1, [r7, #14]
 800bc9a:	7bba      	ldrb	r2, [r7, #14]
 800bc9c:	480f      	ldr	r0, [pc, #60]	; (800bcdc <LED_StorePrevious+0x16c>)
 800bc9e:	460b      	mov	r3, r1
 800bca0:	00db      	lsls	r3, r3, #3
 800bca2:	440b      	add	r3, r1
 800bca4:	00db      	lsls	r3, r3, #3
 800bca6:	4403      	add	r3, r0
 800bca8:	3314      	adds	r3, #20
 800bcaa:	7818      	ldrb	r0, [r3, #0]
 800bcac:	490c      	ldr	r1, [pc, #48]	; (800bce0 <LED_StorePrevious+0x170>)
 800bcae:	4613      	mov	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	4413      	add	r3, r2
 800bcb4:	00db      	lsls	r3, r3, #3
 800bcb6:	440b      	add	r3, r1
 800bcb8:	3314      	adds	r3, #20
 800bcba:	4602      	mov	r2, r0
 800bcbc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	73bb      	strb	r3, [r7, #14]
 800bcc4:	7bba      	ldrb	r2, [r7, #14]
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	f67f af63 	bls.w	800bb94 <LED_StorePrevious+0x24>
	}
}
 800bcce:	bf00      	nop
 800bcd0:	bf00      	nop
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bc80      	pop	{r7}
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20000a38 	.word	0x20000a38
 800bce0:	20000ba0 	.word	0x20000ba0

0800bce4 <LED_RestorePrevious>:
void LED_RestorePrevious (uint8_t newLED)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	71fb      	strb	r3, [r7, #7]
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	737b      	strb	r3, [r7, #13]
	LastLED = newLED;
 800bcf2:	79fb      	ldrb	r3, [r7, #7]
 800bcf4:	73fb      	strb	r3, [r7, #15]
	if (newLED == WATERTANKLEDS) LastLED ++;
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d102      	bne.n	800bd02 <LED_RestorePrevious+0x1e>
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800bd02:	7b7b      	ldrb	r3, [r7, #13]
 800bd04:	73bb      	strb	r3, [r7, #14]
 800bd06:	e0a1      	b.n	800be4c <LED_RestorePrevious+0x168>
	{
		LED[i].BreathInterval = LEDPREVIOUS[i].BreathInterval;
 800bd08:	7bb9      	ldrb	r1, [r7, #14]
 800bd0a:	7bba      	ldrb	r2, [r7, #14]
 800bd0c:	4855      	ldr	r0, [pc, #340]	; (800be64 <LED_RestorePrevious+0x180>)
 800bd0e:	460b      	mov	r3, r1
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	440b      	add	r3, r1
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	4403      	add	r3, r0
 800bd18:	3328      	adds	r3, #40	; 0x28
 800bd1a:	7818      	ldrb	r0, [r3, #0]
 800bd1c:	4952      	ldr	r1, [pc, #328]	; (800be68 <LED_RestorePrevious+0x184>)
 800bd1e:	4613      	mov	r3, r2
 800bd20:	00db      	lsls	r3, r3, #3
 800bd22:	4413      	add	r3, r2
 800bd24:	00db      	lsls	r3, r3, #3
 800bd26:	440b      	add	r3, r1
 800bd28:	3328      	adds	r3, #40	; 0x28
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	701a      	strb	r2, [r3, #0]
		LED[i].FadeInInterval = LEDPREVIOUS[i].FadeInInterval;
 800bd2e:	7bb9      	ldrb	r1, [r7, #14]
 800bd30:	7bba      	ldrb	r2, [r7, #14]
 800bd32:	484c      	ldr	r0, [pc, #304]	; (800be64 <LED_RestorePrevious+0x180>)
 800bd34:	460b      	mov	r3, r1
 800bd36:	00db      	lsls	r3, r3, #3
 800bd38:	440b      	add	r3, r1
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	4403      	add	r3, r0
 800bd3e:	332c      	adds	r3, #44	; 0x2c
 800bd40:	7818      	ldrb	r0, [r3, #0]
 800bd42:	4949      	ldr	r1, [pc, #292]	; (800be68 <LED_RestorePrevious+0x184>)
 800bd44:	4613      	mov	r3, r2
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	4413      	add	r3, r2
 800bd4a:	00db      	lsls	r3, r3, #3
 800bd4c:	440b      	add	r3, r1
 800bd4e:	332c      	adds	r3, #44	; 0x2c
 800bd50:	4602      	mov	r2, r0
 800bd52:	701a      	strb	r2, [r3, #0]
		LED[i].FadeOutInterval = LEDPREVIOUS[i].FadeOutInterval;
 800bd54:	7bb9      	ldrb	r1, [r7, #14]
 800bd56:	7bba      	ldrb	r2, [r7, #14]
 800bd58:	4842      	ldr	r0, [pc, #264]	; (800be64 <LED_RestorePrevious+0x180>)
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	440b      	add	r3, r1
 800bd60:	00db      	lsls	r3, r3, #3
 800bd62:	4403      	add	r3, r0
 800bd64:	3330      	adds	r3, #48	; 0x30
 800bd66:	7818      	ldrb	r0, [r3, #0]
 800bd68:	493f      	ldr	r1, [pc, #252]	; (800be68 <LED_RestorePrevious+0x184>)
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	00db      	lsls	r3, r3, #3
 800bd6e:	4413      	add	r3, r2
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	440b      	add	r3, r1
 800bd74:	3330      	adds	r3, #48	; 0x30
 800bd76:	4602      	mov	r2, r0
 800bd78:	701a      	strb	r2, [r3, #0]
		LED[i].BlinkTimeOn = LEDPREVIOUS[i].BlinkTimeOn;
 800bd7a:	7bb9      	ldrb	r1, [r7, #14]
 800bd7c:	7bba      	ldrb	r2, [r7, #14]
 800bd7e:	4839      	ldr	r0, [pc, #228]	; (800be64 <LED_RestorePrevious+0x180>)
 800bd80:	460b      	mov	r3, r1
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	440b      	add	r3, r1
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	4403      	add	r3, r0
 800bd8a:	3318      	adds	r3, #24
 800bd8c:	8818      	ldrh	r0, [r3, #0]
 800bd8e:	4936      	ldr	r1, [pc, #216]	; (800be68 <LED_RestorePrevious+0x184>)
 800bd90:	4613      	mov	r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	4413      	add	r3, r2
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	440b      	add	r3, r1
 800bd9a:	3318      	adds	r3, #24
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	801a      	strh	r2, [r3, #0]
		LED[i].BlinkTimeOff = LEDPREVIOUS[i].BlinkTimeOff;
 800bda0:	7bb9      	ldrb	r1, [r7, #14]
 800bda2:	7bba      	ldrb	r2, [r7, #14]
 800bda4:	482f      	ldr	r0, [pc, #188]	; (800be64 <LED_RestorePrevious+0x180>)
 800bda6:	460b      	mov	r3, r1
 800bda8:	00db      	lsls	r3, r3, #3
 800bdaa:	440b      	add	r3, r1
 800bdac:	00db      	lsls	r3, r3, #3
 800bdae:	4403      	add	r3, r0
 800bdb0:	3320      	adds	r3, #32
 800bdb2:	8818      	ldrh	r0, [r3, #0]
 800bdb4:	492c      	ldr	r1, [pc, #176]	; (800be68 <LED_RestorePrevious+0x184>)
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	4413      	add	r3, r2
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	440b      	add	r3, r1
 800bdc0:	3320      	adds	r3, #32
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	801a      	strh	r2, [r3, #0]
		LED[i].Effect = LEDPREVIOUS[i].Effect;
 800bdc6:	7bb9      	ldrb	r1, [r7, #14]
 800bdc8:	7bba      	ldrb	r2, [r7, #14]
 800bdca:	4826      	ldr	r0, [pc, #152]	; (800be64 <LED_RestorePrevious+0x180>)
 800bdcc:	460b      	mov	r3, r1
 800bdce:	00db      	lsls	r3, r3, #3
 800bdd0:	440b      	add	r3, r1
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	4403      	add	r3, r0
 800bdd6:	3310      	adds	r3, #16
 800bdd8:	7818      	ldrb	r0, [r3, #0]
 800bdda:	4923      	ldr	r1, [pc, #140]	; (800be68 <LED_RestorePrevious+0x184>)
 800bddc:	4613      	mov	r3, r2
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	4413      	add	r3, r2
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	440b      	add	r3, r1
 800bde6:	3310      	adds	r3, #16
 800bde8:	4602      	mov	r2, r0
 800bdea:	701a      	strb	r2, [r3, #0]
		LED[i].Color = LEDPREVIOUS[i].Color;
 800bdec:	7bb9      	ldrb	r1, [r7, #14]
 800bdee:	7bba      	ldrb	r2, [r7, #14]
 800bdf0:	481c      	ldr	r0, [pc, #112]	; (800be64 <LED_RestorePrevious+0x180>)
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	440b      	add	r3, r1
 800bdf8:	00db      	lsls	r3, r3, #3
 800bdfa:	4403      	add	r3, r0
 800bdfc:	6819      	ldr	r1, [r3, #0]
 800bdfe:	481a      	ldr	r0, [pc, #104]	; (800be68 <LED_RestorePrevious+0x184>)
 800be00:	4613      	mov	r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	4413      	add	r3, r2
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	4403      	add	r3, r0
 800be0a:	6019      	str	r1, [r3, #0]
		LED[i].Intensity = LEDPREVIOUS[i].Intensity;
 800be0c:	7bb9      	ldrb	r1, [r7, #14]
 800be0e:	7bba      	ldrb	r2, [r7, #14]
 800be10:	4814      	ldr	r0, [pc, #80]	; (800be64 <LED_RestorePrevious+0x180>)
 800be12:	460b      	mov	r3, r1
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	440b      	add	r3, r1
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	4403      	add	r3, r0
 800be1c:	3314      	adds	r3, #20
 800be1e:	7818      	ldrb	r0, [r3, #0]
 800be20:	4911      	ldr	r1, [pc, #68]	; (800be68 <LED_RestorePrevious+0x184>)
 800be22:	4613      	mov	r3, r2
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	4413      	add	r3, r2
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	440b      	add	r3, r1
 800be2c:	3314      	adds	r3, #20
 800be2e:	4602      	mov	r2, r0
 800be30:	701a      	strb	r2, [r3, #0]
		LED[i].TimeCycleCounter = 0;
 800be32:	7bba      	ldrb	r2, [r7, #14]
 800be34:	490c      	ldr	r1, [pc, #48]	; (800be68 <LED_RestorePrevious+0x184>)
 800be36:	4613      	mov	r3, r2
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	4413      	add	r3, r2
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	440b      	add	r3, r1
 800be40:	3336      	adds	r3, #54	; 0x36
 800be42:	2200      	movs	r2, #0
 800be44:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800be46:	7bbb      	ldrb	r3, [r7, #14]
 800be48:	3301      	adds	r3, #1
 800be4a:	73bb      	strb	r3, [r7, #14]
 800be4c:	7bba      	ldrb	r2, [r7, #14]
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	429a      	cmp	r2, r3
 800be52:	f67f af59 	bls.w	800bd08 <LED_RestorePrevious+0x24>
	}
}
 800be56:	bf00      	nop
 800be58:	bf00      	nop
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bc80      	pop	{r7}
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	20000ba0 	.word	0x20000ba0
 800be68:	20000a38 	.word	0x20000a38

0800be6c <LED_Set>:
//! \param[in]  uint8_t newLED, enuLedEffect newEffect, uint8_t newR
//! \param[in]  uint8_t newG, uint8_t newB, uint8_t newIntensity
//! \param[in]  uint16_t newBlinkTimeOn, uint16_t newBlinkTimeOff, uint8_t newStepTime
//! \param[in]  uint16_t newTimeCycles, uint8_t newRestorePrevious
void LED_Set (uint8_t newLED, uint8_t newEffect, uint8_t newR, uint8_t newG, uint8_t newB, uint8_t newIntensity, uint16_t newBlinkTimeOn, uint16_t newBlinkTimeOff, uint8_t newStepTime, uint16_t newTimeCycles, uint8_t newRestorePrevious)
{
 800be6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be70:	b085      	sub	sp, #20
 800be72:	af00      	add	r7, sp, #0
 800be74:	4606      	mov	r6, r0
 800be76:	4608      	mov	r0, r1
 800be78:	4611      	mov	r1, r2
 800be7a:	461a      	mov	r2, r3
 800be7c:	4633      	mov	r3, r6
 800be7e:	71fb      	strb	r3, [r7, #7]
 800be80:	4603      	mov	r3, r0
 800be82:	71bb      	strb	r3, [r7, #6]
 800be84:	460b      	mov	r3, r1
 800be86:	717b      	strb	r3, [r7, #5]
 800be88:	4613      	mov	r3, r2
 800be8a:	713b      	strb	r3, [r7, #4]
	uint8_t	FirstLED;
	uint8_t	LastLED;

	FirstLED = newLED;
 800be8c:	79fb      	ldrb	r3, [r7, #7]
 800be8e:	737b      	strb	r3, [r7, #13]
	LastLED = newLED;
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	73fb      	strb	r3, [r7, #15]
	if (newLED == WATERTANKLEDS) LastLED ++;
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <LED_Set+0x34>
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	3301      	adds	r3, #1
 800be9e:	73fb      	strb	r3, [r7, #15]
	//Store previous setting if previous setting needs to be restored and TimeCycles > 0 and Effect != FADEIN or FADEOUT or SWITCHEDOFF
	//Restore previous is only done for SWITCHEDON, BLINKING and BREATHING. Others will be ignored.
	if ((newTimeCycles > 0) &&(newRestorePrevious) && (newEffect != FADEIN) && (newEffect != FADEOUT) && (newEffect != SWITCHEDOFF))
 800bea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d010      	beq.n	800beca <LED_Set+0x5e>
 800bea8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00c      	beq.n	800beca <LED_Set+0x5e>
 800beb0:	79bb      	ldrb	r3, [r7, #6]
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	d009      	beq.n	800beca <LED_Set+0x5e>
 800beb6:	79bb      	ldrb	r3, [r7, #6]
 800beb8:	2b05      	cmp	r3, #5
 800beba:	d006      	beq.n	800beca <LED_Set+0x5e>
 800bebc:	79bb      	ldrb	r3, [r7, #6]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d003      	beq.n	800beca <LED_Set+0x5e>
	{
		LED_StorePrevious (newLED);
 800bec2:	79fb      	ldrb	r3, [r7, #7]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fe53 	bl	800bb70 <LED_StorePrevious>
	}

	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800beca:	7b7b      	ldrb	r3, [r7, #13]
 800becc:	73bb      	strb	r3, [r7, #14]
 800bece:	e0d9      	b.n	800c084 <LED_Set+0x218>
	{
		if (newEffect == BREATHING) LED[i].BreathIntervalNext = newStepTime;
 800bed0:	79bb      	ldrb	r3, [r7, #6]
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	d10c      	bne.n	800bef0 <LED_Set+0x84>
 800bed6:	7bba      	ldrb	r2, [r7, #14]
 800bed8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bedc:	b218      	sxth	r0, r3
 800bede:	496f      	ldr	r1, [pc, #444]	; (800c09c <LED_Set+0x230>)
 800bee0:	4613      	mov	r3, r2
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	4413      	add	r3, r2
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	440b      	add	r3, r1
 800beea:	332a      	adds	r3, #42	; 0x2a
 800beec:	4602      	mov	r2, r0
 800beee:	801a      	strh	r2, [r3, #0]
		if (newEffect == FADEIN) LED[i].FadeInIntervalNext= newStepTime;
 800bef0:	79bb      	ldrb	r3, [r7, #6]
 800bef2:	2b04      	cmp	r3, #4
 800bef4:	d10c      	bne.n	800bf10 <LED_Set+0xa4>
 800bef6:	7bba      	ldrb	r2, [r7, #14]
 800bef8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800befc:	b218      	sxth	r0, r3
 800befe:	4967      	ldr	r1, [pc, #412]	; (800c09c <LED_Set+0x230>)
 800bf00:	4613      	mov	r3, r2
 800bf02:	00db      	lsls	r3, r3, #3
 800bf04:	4413      	add	r3, r2
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	440b      	add	r3, r1
 800bf0a:	332e      	adds	r3, #46	; 0x2e
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	801a      	strh	r2, [r3, #0]
		if (newEffect == FADEOUT) LED[i].FadeOutIntervalNext= newStepTime;
 800bf10:	79bb      	ldrb	r3, [r7, #6]
 800bf12:	2b05      	cmp	r3, #5
 800bf14:	d10c      	bne.n	800bf30 <LED_Set+0xc4>
 800bf16:	7bba      	ldrb	r2, [r7, #14]
 800bf18:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bf1c:	b218      	sxth	r0, r3
 800bf1e:	495f      	ldr	r1, [pc, #380]	; (800c09c <LED_Set+0x230>)
 800bf20:	4613      	mov	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	4413      	add	r3, r2
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	440b      	add	r3, r1
 800bf2a:	3332      	adds	r3, #50	; 0x32
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	801a      	strh	r2, [r3, #0]
		if (newEffect == BLINKING)
 800bf30:	79bb      	ldrb	r3, [r7, #6]
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d113      	bne.n	800bf5e <LED_Set+0xf2>
		{
			LED[i].BlinkTimeOnNext = newBlinkTimeOn;
 800bf36:	7bba      	ldrb	r2, [r7, #14]
 800bf38:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800bf3a:	4858      	ldr	r0, [pc, #352]	; (800c09c <LED_Set+0x230>)
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	4413      	add	r3, r2
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	4403      	add	r3, r0
 800bf46:	331c      	adds	r3, #28
 800bf48:	6019      	str	r1, [r3, #0]
			LED[i].BlinkTimeOffNext = newBlinkTimeOff;
 800bf4a:	7bba      	ldrb	r2, [r7, #14]
 800bf4c:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800bf4e:	4853      	ldr	r0, [pc, #332]	; (800c09c <LED_Set+0x230>)
 800bf50:	4613      	mov	r3, r2
 800bf52:	00db      	lsls	r3, r3, #3
 800bf54:	4413      	add	r3, r2
 800bf56:	00db      	lsls	r3, r3, #3
 800bf58:	4403      	add	r3, r0
 800bf5a:	3324      	adds	r3, #36	; 0x24
 800bf5c:	6019      	str	r1, [r3, #0]
		}
		LED[i].EffectNext = newEffect;
 800bf5e:	7bba      	ldrb	r2, [r7, #14]
 800bf60:	79bb      	ldrb	r3, [r7, #6]
 800bf62:	b218      	sxth	r0, r3
 800bf64:	494d      	ldr	r1, [pc, #308]	; (800c09c <LED_Set+0x230>)
 800bf66:	4613      	mov	r3, r2
 800bf68:	00db      	lsls	r3, r3, #3
 800bf6a:	4413      	add	r3, r2
 800bf6c:	00db      	lsls	r3, r3, #3
 800bf6e:	440b      	add	r3, r1
 800bf70:	3312      	adds	r3, #18
 800bf72:	4602      	mov	r2, r0
 800bf74:	801a      	strh	r2, [r3, #0]
		if (newR + newB + newG > 0) //If all are 0 color is unchanged
 800bf76:	797a      	ldrb	r2, [r7, #5]
 800bf78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bf7c:	441a      	add	r2, r3
 800bf7e:	793b      	ldrb	r3, [r7, #4]
 800bf80:	4413      	add	r3, r2
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	dd15      	ble.n	800bfb2 <LED_Set+0x146>
		{
			LED[i].ColorNext = newR << 16 | newG << 8 | newB;
 800bf86:	797b      	ldrb	r3, [r7, #5]
 800bf88:	041a      	lsls	r2, r3, #16
 800bf8a:	793b      	ldrb	r3, [r7, #4]
 800bf8c:	021b      	lsls	r3, r3, #8
 800bf8e:	431a      	orrs	r2, r3
 800bf90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bf94:	4313      	orrs	r3, r2
 800bf96:	7bba      	ldrb	r2, [r7, #14]
 800bf98:	17d9      	asrs	r1, r3, #31
 800bf9a:	461c      	mov	r4, r3
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	493f      	ldr	r1, [pc, #252]	; (800c09c <LED_Set+0x230>)
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	00db      	lsls	r3, r3, #3
 800bfa4:	4413      	add	r3, r2
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	440b      	add	r3, r1
 800bfaa:	3308      	adds	r3, #8
 800bfac:	e9c3 4500 	strd	r4, r5, [r3]
 800bfb0:	e014      	b.n	800bfdc <LED_Set+0x170>
		}
		else
		{
			LED[i].ColorNext = LED[i].Color;
 800bfb2:	7bba      	ldrb	r2, [r7, #14]
 800bfb4:	4939      	ldr	r1, [pc, #228]	; (800c09c <LED_Set+0x230>)
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	00db      	lsls	r3, r3, #3
 800bfba:	4413      	add	r3, r2
 800bfbc:	00db      	lsls	r3, r3, #3
 800bfbe:	440b      	add	r3, r1
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	7bba      	ldrb	r2, [r7, #14]
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	4698      	mov	r8, r3
 800bfc8:	4689      	mov	r9, r1
 800bfca:	4934      	ldr	r1, [pc, #208]	; (800c09c <LED_Set+0x230>)
 800bfcc:	4613      	mov	r3, r2
 800bfce:	00db      	lsls	r3, r3, #3
 800bfd0:	4413      	add	r3, r2
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	440b      	add	r3, r1
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	e9c3 8900 	strd	r8, r9, [r3]
		}
		LED[i].IntensityNext = newIntensity;
 800bfdc:	7bba      	ldrb	r2, [r7, #14]
 800bfde:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bfe2:	b218      	sxth	r0, r3
 800bfe4:	492d      	ldr	r1, [pc, #180]	; (800c09c <LED_Set+0x230>)
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	00db      	lsls	r3, r3, #3
 800bfea:	4413      	add	r3, r2
 800bfec:	00db      	lsls	r3, r3, #3
 800bfee:	440b      	add	r3, r1
 800bff0:	3316      	adds	r3, #22
 800bff2:	4602      	mov	r2, r0
 800bff4:	801a      	strh	r2, [r3, #0]
		//Set TimeCycles and RestorePrevious if TimeCycles > 0 and Effect is SWITCHEDON, BLINKING or BREATHING
		if (((newEffect == SWITCHEDON) || (newEffect == BLINKING) || (newEffect == BREATHING)) && (newTimeCycles > 0))
 800bff6:	79bb      	ldrb	r3, [r7, #6]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d005      	beq.n	800c008 <LED_Set+0x19c>
 800bffc:	79bb      	ldrb	r3, [r7, #6]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d002      	beq.n	800c008 <LED_Set+0x19c>
 800c002:	79bb      	ldrb	r3, [r7, #6]
 800c004:	2b03      	cmp	r3, #3
 800c006:	d126      	bne.n	800c056 <LED_Set+0x1ea>
 800c008:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d022      	beq.n	800c056 <LED_Set+0x1ea>
		{
			LED[i].TimeCyclesNext = newTimeCycles;
 800c010:	7bba      	ldrb	r2, [r7, #14]
 800c012:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800c016:	4821      	ldr	r0, [pc, #132]	; (800c09c <LED_Set+0x230>)
 800c018:	4613      	mov	r3, r2
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	4413      	add	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	4403      	add	r3, r0
 800c022:	3340      	adds	r3, #64	; 0x40
 800c024:	6019      	str	r1, [r3, #0]
			LED[i].RestorePreviousNext = newRestorePrevious;
 800c026:	7bba      	ldrb	r2, [r7, #14]
 800c028:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c02c:	b218      	sxth	r0, r3
 800c02e:	491b      	ldr	r1, [pc, #108]	; (800c09c <LED_Set+0x230>)
 800c030:	4613      	mov	r3, r2
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	4413      	add	r3, r2
 800c036:	00db      	lsls	r3, r3, #3
 800c038:	440b      	add	r3, r1
 800c03a:	3346      	adds	r3, #70	; 0x46
 800c03c:	4602      	mov	r2, r0
 800c03e:	801a      	strh	r2, [r3, #0]
			LED[i].Counter = 0;
 800c040:	7bba      	ldrb	r2, [r7, #14]
 800c042:	4916      	ldr	r1, [pc, #88]	; (800c09c <LED_Set+0x230>)
 800c044:	4613      	mov	r3, r2
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	4413      	add	r3, r2
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	440b      	add	r3, r1
 800c04e:	3334      	adds	r3, #52	; 0x34
 800c050:	2200      	movs	r2, #0
 800c052:	801a      	strh	r2, [r3, #0]
 800c054:	e013      	b.n	800c07e <LED_Set+0x212>
		}
		else
		{
			LED[i].TimeCyclesNext = 0;
 800c056:	7bba      	ldrb	r2, [r7, #14]
 800c058:	4910      	ldr	r1, [pc, #64]	; (800c09c <LED_Set+0x230>)
 800c05a:	4613      	mov	r3, r2
 800c05c:	00db      	lsls	r3, r3, #3
 800c05e:	4413      	add	r3, r2
 800c060:	00db      	lsls	r3, r3, #3
 800c062:	440b      	add	r3, r1
 800c064:	3340      	adds	r3, #64	; 0x40
 800c066:	2200      	movs	r2, #0
 800c068:	601a      	str	r2, [r3, #0]
			LED[i].RestorePreviousNext = 0;
 800c06a:	7bba      	ldrb	r2, [r7, #14]
 800c06c:	490b      	ldr	r1, [pc, #44]	; (800c09c <LED_Set+0x230>)
 800c06e:	4613      	mov	r3, r2
 800c070:	00db      	lsls	r3, r3, #3
 800c072:	4413      	add	r3, r2
 800c074:	00db      	lsls	r3, r3, #3
 800c076:	440b      	add	r3, r1
 800c078:	3346      	adds	r3, #70	; 0x46
 800c07a:	2200      	movs	r2, #0
 800c07c:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = FirstLED; i<= LastLED; i ++)
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	3301      	adds	r3, #1
 800c082:	73bb      	strb	r3, [r7, #14]
 800c084:	7bba      	ldrb	r2, [r7, #14]
 800c086:	7bfb      	ldrb	r3, [r7, #15]
 800c088:	429a      	cmp	r2, r3
 800c08a:	f67f af21 	bls.w	800bed0 <LED_Set+0x64>
		}
	}
}
 800c08e:	bf00      	nop
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c09a:	bf00      	nop
 800c09c:	20000a38 	.word	0x20000a38

0800c0a0 <LED_SetNext>:
void LED_SetNext (uint8_t newLED)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	71fb      	strb	r3, [r7, #7]
	if (LED[newLED].EffectNext == -1)
 800c0aa:	79fa      	ldrb	r2, [r7, #7]
 800c0ac:	4982      	ldr	r1, [pc, #520]	; (800c2b8 <LED_SetNext+0x218>)
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	4413      	add	r3, r2
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	440b      	add	r3, r1
 800c0b8:	3312      	adds	r3, #18
 800c0ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c2:	d167      	bne.n	800c194 <LED_SetNext+0xf4>
	{
		LED[newLED].ColorNext = -1;
 800c0c4:	79fa      	ldrb	r2, [r7, #7]
 800c0c6:	497c      	ldr	r1, [pc, #496]	; (800c2b8 <LED_SetNext+0x218>)
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	4413      	add	r3, r2
 800c0ce:	00db      	lsls	r3, r3, #3
 800c0d0:	440b      	add	r3, r1
 800c0d2:	f103 0108 	add.w	r1, r3, #8
 800c0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0da:	f04f 33ff 	mov.w	r3, #4294967295
 800c0de:	e9c1 2300 	strd	r2, r3, [r1]
		LED[newLED].IntensityNext = -1;
 800c0e2:	79fa      	ldrb	r2, [r7, #7]
 800c0e4:	4974      	ldr	r1, [pc, #464]	; (800c2b8 <LED_SetNext+0x218>)
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	4413      	add	r3, r2
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	440b      	add	r3, r1
 800c0f0:	3316      	adds	r3, #22
 800c0f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0f6:	801a      	strh	r2, [r3, #0]
		LED[newLED].BlinkTimeOnNext = -1;
 800c0f8:	79fa      	ldrb	r2, [r7, #7]
 800c0fa:	496f      	ldr	r1, [pc, #444]	; (800c2b8 <LED_SetNext+0x218>)
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	00db      	lsls	r3, r3, #3
 800c100:	4413      	add	r3, r2
 800c102:	00db      	lsls	r3, r3, #3
 800c104:	440b      	add	r3, r1
 800c106:	331c      	adds	r3, #28
 800c108:	f04f 32ff 	mov.w	r2, #4294967295
 800c10c:	601a      	str	r2, [r3, #0]
		LED[newLED].BlinkTimeOffNext = -1;
 800c10e:	79fa      	ldrb	r2, [r7, #7]
 800c110:	4969      	ldr	r1, [pc, #420]	; (800c2b8 <LED_SetNext+0x218>)
 800c112:	4613      	mov	r3, r2
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	4413      	add	r3, r2
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	440b      	add	r3, r1
 800c11c:	3324      	adds	r3, #36	; 0x24
 800c11e:	f04f 32ff 	mov.w	r2, #4294967295
 800c122:	601a      	str	r2, [r3, #0]
		LED[newLED].BreathIntervalNext = -1;
 800c124:	79fa      	ldrb	r2, [r7, #7]
 800c126:	4964      	ldr	r1, [pc, #400]	; (800c2b8 <LED_SetNext+0x218>)
 800c128:	4613      	mov	r3, r2
 800c12a:	00db      	lsls	r3, r3, #3
 800c12c:	4413      	add	r3, r2
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	440b      	add	r3, r1
 800c132:	332a      	adds	r3, #42	; 0x2a
 800c134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c138:	801a      	strh	r2, [r3, #0]
		LED[newLED].FadeInIntervalNext = -1;
 800c13a:	79fa      	ldrb	r2, [r7, #7]
 800c13c:	495e      	ldr	r1, [pc, #376]	; (800c2b8 <LED_SetNext+0x218>)
 800c13e:	4613      	mov	r3, r2
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	4413      	add	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	440b      	add	r3, r1
 800c148:	332e      	adds	r3, #46	; 0x2e
 800c14a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c14e:	801a      	strh	r2, [r3, #0]
		LED[newLED].FadeOutIntervalNext = -1;
 800c150:	79fa      	ldrb	r2, [r7, #7]
 800c152:	4959      	ldr	r1, [pc, #356]	; (800c2b8 <LED_SetNext+0x218>)
 800c154:	4613      	mov	r3, r2
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	4413      	add	r3, r2
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	440b      	add	r3, r1
 800c15e:	3332      	adds	r3, #50	; 0x32
 800c160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c164:	801a      	strh	r2, [r3, #0]
		LED[newLED].TimeCyclesNext = -1;
 800c166:	79fa      	ldrb	r2, [r7, #7]
 800c168:	4953      	ldr	r1, [pc, #332]	; (800c2b8 <LED_SetNext+0x218>)
 800c16a:	4613      	mov	r3, r2
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	4413      	add	r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	440b      	add	r3, r1
 800c174:	3340      	adds	r3, #64	; 0x40
 800c176:	f04f 32ff 	mov.w	r2, #4294967295
 800c17a:	601a      	str	r2, [r3, #0]
		LED[newLED].RestorePreviousNext = -1;
 800c17c:	79fa      	ldrb	r2, [r7, #7]
 800c17e:	494e      	ldr	r1, [pc, #312]	; (800c2b8 <LED_SetNext+0x218>)
 800c180:	4613      	mov	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	4413      	add	r3, r2
 800c186:	00db      	lsls	r3, r3, #3
 800c188:	440b      	add	r3, r1
 800c18a:	3346      	adds	r3, #70	; 0x46
 800c18c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c190:	801a      	strh	r2, [r3, #0]
		return;
 800c192:	e192      	b.n	800c4ba <LED_SetNext+0x41a>
	}
	else if (LED[newLED].EffectNext  == BREATHING)
 800c194:	79fa      	ldrb	r2, [r7, #7]
 800c196:	4948      	ldr	r1, [pc, #288]	; (800c2b8 <LED_SetNext+0x218>)
 800c198:	4613      	mov	r3, r2
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	440b      	add	r3, r1
 800c1a2:	3312      	adds	r3, #18
 800c1a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d120      	bne.n	800c1ee <LED_SetNext+0x14e>
	{
		LED[newLED].BreathInterval = LED[newLED].BreathIntervalNext;
 800c1ac:	79fa      	ldrb	r2, [r7, #7]
 800c1ae:	4942      	ldr	r1, [pc, #264]	; (800c2b8 <LED_SetNext+0x218>)
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	4413      	add	r3, r2
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	440b      	add	r3, r1
 800c1ba:	332a      	adds	r3, #42	; 0x2a
 800c1bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1c0:	79fa      	ldrb	r2, [r7, #7]
 800c1c2:	b2d8      	uxtb	r0, r3
 800c1c4:	493c      	ldr	r1, [pc, #240]	; (800c2b8 <LED_SetNext+0x218>)
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	4413      	add	r3, r2
 800c1cc:	00db      	lsls	r3, r3, #3
 800c1ce:	440b      	add	r3, r1
 800c1d0:	3328      	adds	r3, #40	; 0x28
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	701a      	strb	r2, [r3, #0]
		LED[newLED].BreathIntervalNext = -1;
 800c1d6:	79fa      	ldrb	r2, [r7, #7]
 800c1d8:	4937      	ldr	r1, [pc, #220]	; (800c2b8 <LED_SetNext+0x218>)
 800c1da:	4613      	mov	r3, r2
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	4413      	add	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	440b      	add	r3, r1
 800c1e4:	332a      	adds	r3, #42	; 0x2a
 800c1e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1ea:	801a      	strh	r2, [r3, #0]
 800c1ec:	e0ba      	b.n	800c364 <LED_SetNext+0x2c4>
	}
	else if (LED[newLED].EffectNext == FADEIN)
 800c1ee:	79fa      	ldrb	r2, [r7, #7]
 800c1f0:	4931      	ldr	r1, [pc, #196]	; (800c2b8 <LED_SetNext+0x218>)
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	4413      	add	r3, r2
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	440b      	add	r3, r1
 800c1fc:	3312      	adds	r3, #18
 800c1fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c202:	2b04      	cmp	r3, #4
 800c204:	d120      	bne.n	800c248 <LED_SetNext+0x1a8>
	{
		LED[newLED].FadeInInterval = LED[newLED].FadeInIntervalNext;
 800c206:	79fa      	ldrb	r2, [r7, #7]
 800c208:	492b      	ldr	r1, [pc, #172]	; (800c2b8 <LED_SetNext+0x218>)
 800c20a:	4613      	mov	r3, r2
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	4413      	add	r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	440b      	add	r3, r1
 800c214:	332e      	adds	r3, #46	; 0x2e
 800c216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c21a:	79fa      	ldrb	r2, [r7, #7]
 800c21c:	b2d8      	uxtb	r0, r3
 800c21e:	4926      	ldr	r1, [pc, #152]	; (800c2b8 <LED_SetNext+0x218>)
 800c220:	4613      	mov	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	4413      	add	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	440b      	add	r3, r1
 800c22a:	332c      	adds	r3, #44	; 0x2c
 800c22c:	4602      	mov	r2, r0
 800c22e:	701a      	strb	r2, [r3, #0]
		LED[newLED].FadeInIntervalNext = -1;
 800c230:	79fa      	ldrb	r2, [r7, #7]
 800c232:	4921      	ldr	r1, [pc, #132]	; (800c2b8 <LED_SetNext+0x218>)
 800c234:	4613      	mov	r3, r2
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	4413      	add	r3, r2
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	440b      	add	r3, r1
 800c23e:	332e      	adds	r3, #46	; 0x2e
 800c240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c244:	801a      	strh	r2, [r3, #0]
 800c246:	e08d      	b.n	800c364 <LED_SetNext+0x2c4>
	}
	else if (LED[newLED].EffectNext == FADEOUT)
 800c248:	79fa      	ldrb	r2, [r7, #7]
 800c24a:	491b      	ldr	r1, [pc, #108]	; (800c2b8 <LED_SetNext+0x218>)
 800c24c:	4613      	mov	r3, r2
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	4413      	add	r3, r2
 800c252:	00db      	lsls	r3, r3, #3
 800c254:	440b      	add	r3, r1
 800c256:	3312      	adds	r3, #18
 800c258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c25c:	2b05      	cmp	r3, #5
 800c25e:	d12d      	bne.n	800c2bc <LED_SetNext+0x21c>
	{
		LED[newLED].FadeOutInterval = LED[newLED].FadeOutIntervalNext;
 800c260:	79fa      	ldrb	r2, [r7, #7]
 800c262:	4915      	ldr	r1, [pc, #84]	; (800c2b8 <LED_SetNext+0x218>)
 800c264:	4613      	mov	r3, r2
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	4413      	add	r3, r2
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	440b      	add	r3, r1
 800c26e:	3332      	adds	r3, #50	; 0x32
 800c270:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c274:	79fa      	ldrb	r2, [r7, #7]
 800c276:	b2d8      	uxtb	r0, r3
 800c278:	490f      	ldr	r1, [pc, #60]	; (800c2b8 <LED_SetNext+0x218>)
 800c27a:	4613      	mov	r3, r2
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	4413      	add	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	440b      	add	r3, r1
 800c284:	3330      	adds	r3, #48	; 0x30
 800c286:	4602      	mov	r2, r0
 800c288:	701a      	strb	r2, [r3, #0]
		LED[newLED].FadeOutIntervalNext = -1;
 800c28a:	79fa      	ldrb	r2, [r7, #7]
 800c28c:	490a      	ldr	r1, [pc, #40]	; (800c2b8 <LED_SetNext+0x218>)
 800c28e:	4613      	mov	r3, r2
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	4413      	add	r3, r2
 800c294:	00db      	lsls	r3, r3, #3
 800c296:	440b      	add	r3, r1
 800c298:	3332      	adds	r3, #50	; 0x32
 800c29a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c29e:	801a      	strh	r2, [r3, #0]
		LED[newLED].FadeIntensity = 255;
 800c2a0:	79fa      	ldrb	r2, [r7, #7]
 800c2a2:	4905      	ldr	r1, [pc, #20]	; (800c2b8 <LED_SetNext+0x218>)
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	4413      	add	r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	440b      	add	r3, r1
 800c2ae:	333a      	adds	r3, #58	; 0x3a
 800c2b0:	22ff      	movs	r2, #255	; 0xff
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	e056      	b.n	800c364 <LED_SetNext+0x2c4>
 800c2b6:	bf00      	nop
 800c2b8:	20000a38 	.word	0x20000a38
	}
	else if (LED[newLED].EffectNext == BLINKING)
 800c2bc:	79fa      	ldrb	r2, [r7, #7]
 800c2be:	4981      	ldr	r1, [pc, #516]	; (800c4c4 <LED_SetNext+0x424>)
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	4413      	add	r3, r2
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	440b      	add	r3, r1
 800c2ca:	3312      	adds	r3, #18
 800c2cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d147      	bne.n	800c364 <LED_SetNext+0x2c4>
	{
		LED[newLED].BlinkTimeOn = LED[newLED].BlinkTimeOnNext;
 800c2d4:	79fa      	ldrb	r2, [r7, #7]
 800c2d6:	497b      	ldr	r1, [pc, #492]	; (800c4c4 <LED_SetNext+0x424>)
 800c2d8:	4613      	mov	r3, r2
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	4413      	add	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	440b      	add	r3, r1
 800c2e2:	331c      	adds	r3, #28
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	79fa      	ldrb	r2, [r7, #7]
 800c2e8:	b298      	uxth	r0, r3
 800c2ea:	4976      	ldr	r1, [pc, #472]	; (800c4c4 <LED_SetNext+0x424>)
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	00db      	lsls	r3, r3, #3
 800c2f0:	4413      	add	r3, r2
 800c2f2:	00db      	lsls	r3, r3, #3
 800c2f4:	440b      	add	r3, r1
 800c2f6:	3318      	adds	r3, #24
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	801a      	strh	r2, [r3, #0]
		LED[newLED].BlinkTimeOnNext = -1;
 800c2fc:	79fa      	ldrb	r2, [r7, #7]
 800c2fe:	4971      	ldr	r1, [pc, #452]	; (800c4c4 <LED_SetNext+0x424>)
 800c300:	4613      	mov	r3, r2
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	4413      	add	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	440b      	add	r3, r1
 800c30a:	331c      	adds	r3, #28
 800c30c:	f04f 32ff 	mov.w	r2, #4294967295
 800c310:	601a      	str	r2, [r3, #0]
		LED[newLED].BlinkTimeOff = LED[newLED].BlinkTimeOffNext ;
 800c312:	79fa      	ldrb	r2, [r7, #7]
 800c314:	496b      	ldr	r1, [pc, #428]	; (800c4c4 <LED_SetNext+0x424>)
 800c316:	4613      	mov	r3, r2
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	4413      	add	r3, r2
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	440b      	add	r3, r1
 800c320:	3324      	adds	r3, #36	; 0x24
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	79fa      	ldrb	r2, [r7, #7]
 800c326:	b298      	uxth	r0, r3
 800c328:	4966      	ldr	r1, [pc, #408]	; (800c4c4 <LED_SetNext+0x424>)
 800c32a:	4613      	mov	r3, r2
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	4413      	add	r3, r2
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	440b      	add	r3, r1
 800c334:	3320      	adds	r3, #32
 800c336:	4602      	mov	r2, r0
 800c338:	801a      	strh	r2, [r3, #0]
		LED[newLED].BlinkTimeOffNext = -1;
 800c33a:	79fa      	ldrb	r2, [r7, #7]
 800c33c:	4961      	ldr	r1, [pc, #388]	; (800c4c4 <LED_SetNext+0x424>)
 800c33e:	4613      	mov	r3, r2
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	4413      	add	r3, r2
 800c344:	00db      	lsls	r3, r3, #3
 800c346:	440b      	add	r3, r1
 800c348:	3324      	adds	r3, #36	; 0x24
 800c34a:	f04f 32ff 	mov.w	r2, #4294967295
 800c34e:	601a      	str	r2, [r3, #0]
		LED[newLED].Counter = 0;
 800c350:	79fa      	ldrb	r2, [r7, #7]
 800c352:	495c      	ldr	r1, [pc, #368]	; (800c4c4 <LED_SetNext+0x424>)
 800c354:	4613      	mov	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	4413      	add	r3, r2
 800c35a:	00db      	lsls	r3, r3, #3
 800c35c:	440b      	add	r3, r1
 800c35e:	3334      	adds	r3, #52	; 0x34
 800c360:	2200      	movs	r2, #0
 800c362:	801a      	strh	r2, [r3, #0]
	}
	LED[newLED].Effect = LED[newLED].EffectNext ;
 800c364:	79fa      	ldrb	r2, [r7, #7]
 800c366:	4957      	ldr	r1, [pc, #348]	; (800c4c4 <LED_SetNext+0x424>)
 800c368:	4613      	mov	r3, r2
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	4413      	add	r3, r2
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	440b      	add	r3, r1
 800c372:	3312      	adds	r3, #18
 800c374:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c378:	79fa      	ldrb	r2, [r7, #7]
 800c37a:	b2d8      	uxtb	r0, r3
 800c37c:	4951      	ldr	r1, [pc, #324]	; (800c4c4 <LED_SetNext+0x424>)
 800c37e:	4613      	mov	r3, r2
 800c380:	00db      	lsls	r3, r3, #3
 800c382:	4413      	add	r3, r2
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	440b      	add	r3, r1
 800c388:	3310      	adds	r3, #16
 800c38a:	4602      	mov	r2, r0
 800c38c:	701a      	strb	r2, [r3, #0]
	LED[newLED].EffectNext = -1;
 800c38e:	79fa      	ldrb	r2, [r7, #7]
 800c390:	494c      	ldr	r1, [pc, #304]	; (800c4c4 <LED_SetNext+0x424>)
 800c392:	4613      	mov	r3, r2
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	4413      	add	r3, r2
 800c398:	00db      	lsls	r3, r3, #3
 800c39a:	440b      	add	r3, r1
 800c39c:	3312      	adds	r3, #18
 800c39e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3a2:	801a      	strh	r2, [r3, #0]
	LED[newLED].Color = LED[newLED].ColorNext ;
 800c3a4:	79fa      	ldrb	r2, [r7, #7]
 800c3a6:	4947      	ldr	r1, [pc, #284]	; (800c4c4 <LED_SetNext+0x424>)
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	4413      	add	r3, r2
 800c3ae:	00db      	lsls	r3, r3, #3
 800c3b0:	440b      	add	r3, r1
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	79f9      	ldrb	r1, [r7, #7]
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	4a41      	ldr	r2, [pc, #260]	; (800c4c4 <LED_SetNext+0x424>)
 800c3be:	460b      	mov	r3, r1
 800c3c0:	00db      	lsls	r3, r3, #3
 800c3c2:	440b      	add	r3, r1
 800c3c4:	00db      	lsls	r3, r3, #3
 800c3c6:	4413      	add	r3, r2
 800c3c8:	6018      	str	r0, [r3, #0]
	LED[newLED].ColorNext = -1;
 800c3ca:	79fa      	ldrb	r2, [r7, #7]
 800c3cc:	493d      	ldr	r1, [pc, #244]	; (800c4c4 <LED_SetNext+0x424>)
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	4413      	add	r3, r2
 800c3d4:	00db      	lsls	r3, r3, #3
 800c3d6:	440b      	add	r3, r1
 800c3d8:	f103 0108 	add.w	r1, r3, #8
 800c3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e4:	e9c1 2300 	strd	r2, r3, [r1]
	LED[newLED].Intensity = LED[newLED].IntensityNext ;
 800c3e8:	79fa      	ldrb	r2, [r7, #7]
 800c3ea:	4936      	ldr	r1, [pc, #216]	; (800c4c4 <LED_SetNext+0x424>)
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	4413      	add	r3, r2
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	440b      	add	r3, r1
 800c3f6:	3316      	adds	r3, #22
 800c3f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3fc:	79fa      	ldrb	r2, [r7, #7]
 800c3fe:	b2d8      	uxtb	r0, r3
 800c400:	4930      	ldr	r1, [pc, #192]	; (800c4c4 <LED_SetNext+0x424>)
 800c402:	4613      	mov	r3, r2
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	4413      	add	r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	440b      	add	r3, r1
 800c40c:	3314      	adds	r3, #20
 800c40e:	4602      	mov	r2, r0
 800c410:	701a      	strb	r2, [r3, #0]
	LED[newLED].IntensityNext = -1;
 800c412:	79fa      	ldrb	r2, [r7, #7]
 800c414:	492b      	ldr	r1, [pc, #172]	; (800c4c4 <LED_SetNext+0x424>)
 800c416:	4613      	mov	r3, r2
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	4413      	add	r3, r2
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	440b      	add	r3, r1
 800c420:	3316      	adds	r3, #22
 800c422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c426:	801a      	strh	r2, [r3, #0]
	LED[newLED].TimeCycles = LED[newLED].TimeCyclesNext;
 800c428:	79fa      	ldrb	r2, [r7, #7]
 800c42a:	4926      	ldr	r1, [pc, #152]	; (800c4c4 <LED_SetNext+0x424>)
 800c42c:	4613      	mov	r3, r2
 800c42e:	00db      	lsls	r3, r3, #3
 800c430:	4413      	add	r3, r2
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	440b      	add	r3, r1
 800c436:	3340      	adds	r3, #64	; 0x40
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	79fa      	ldrb	r2, [r7, #7]
 800c43c:	b298      	uxth	r0, r3
 800c43e:	4921      	ldr	r1, [pc, #132]	; (800c4c4 <LED_SetNext+0x424>)
 800c440:	4613      	mov	r3, r2
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	4413      	add	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	440b      	add	r3, r1
 800c44a:	333c      	adds	r3, #60	; 0x3c
 800c44c:	4602      	mov	r2, r0
 800c44e:	801a      	strh	r2, [r3, #0]
	LED[newLED].TimeCyclesNext = -1;
 800c450:	79fa      	ldrb	r2, [r7, #7]
 800c452:	491c      	ldr	r1, [pc, #112]	; (800c4c4 <LED_SetNext+0x424>)
 800c454:	4613      	mov	r3, r2
 800c456:	00db      	lsls	r3, r3, #3
 800c458:	4413      	add	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	440b      	add	r3, r1
 800c45e:	3340      	adds	r3, #64	; 0x40
 800c460:	f04f 32ff 	mov.w	r2, #4294967295
 800c464:	601a      	str	r2, [r3, #0]
	LED[newLED].RestorePrevious = LED[newLED].RestorePreviousNext;
 800c466:	79fa      	ldrb	r2, [r7, #7]
 800c468:	4916      	ldr	r1, [pc, #88]	; (800c4c4 <LED_SetNext+0x424>)
 800c46a:	4613      	mov	r3, r2
 800c46c:	00db      	lsls	r3, r3, #3
 800c46e:	4413      	add	r3, r2
 800c470:	00db      	lsls	r3, r3, #3
 800c472:	440b      	add	r3, r1
 800c474:	3346      	adds	r3, #70	; 0x46
 800c476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c47a:	79fa      	ldrb	r2, [r7, #7]
 800c47c:	b2d8      	uxtb	r0, r3
 800c47e:	4911      	ldr	r1, [pc, #68]	; (800c4c4 <LED_SetNext+0x424>)
 800c480:	4613      	mov	r3, r2
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	4413      	add	r3, r2
 800c486:	00db      	lsls	r3, r3, #3
 800c488:	440b      	add	r3, r1
 800c48a:	3344      	adds	r3, #68	; 0x44
 800c48c:	4602      	mov	r2, r0
 800c48e:	701a      	strb	r2, [r3, #0]
	LED[newLED].RestorePreviousNext = -1;
 800c490:	79fa      	ldrb	r2, [r7, #7]
 800c492:	490c      	ldr	r1, [pc, #48]	; (800c4c4 <LED_SetNext+0x424>)
 800c494:	4613      	mov	r3, r2
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	4413      	add	r3, r2
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	440b      	add	r3, r1
 800c49e:	3346      	adds	r3, #70	; 0x46
 800c4a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4a4:	801a      	strh	r2, [r3, #0]
	LED[newLED].TimeCycleCounter = 0;
 800c4a6:	79fa      	ldrb	r2, [r7, #7]
 800c4a8:	4906      	ldr	r1, [pc, #24]	; (800c4c4 <LED_SetNext+0x424>)
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	00db      	lsls	r3, r3, #3
 800c4ae:	4413      	add	r3, r2
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3336      	adds	r3, #54	; 0x36
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	801a      	strh	r2, [r3, #0]
}
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bc80      	pop	{r7}
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	20000a38 	.word	0x20000a38

0800c4c8 <LED_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initializes the LED module
//! \details    Set all LED off
//! \params     None
void LED_Init(void)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
	WS2812_CloseAll();
 800c4ce:	f002 fd25 	bl	800ef1c <WS2812_CloseAll>
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	71fb      	strb	r3, [r7, #7]
 800c4d6:	e0c3      	b.n	800c660 <LED_Init+0x198>
	{
		LED[i].Effect = SWITCHEDOFF;
 800c4d8:	79fa      	ldrb	r2, [r7, #7]
 800c4da:	4966      	ldr	r1, [pc, #408]	; (800c674 <LED_Init+0x1ac>)
 800c4dc:	4613      	mov	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	4413      	add	r3, r2
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	440b      	add	r3, r1
 800c4e6:	3310      	adds	r3, #16
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
		LED[i].EffectNext = NONE;
 800c4ec:	79fa      	ldrb	r2, [r7, #7]
 800c4ee:	4961      	ldr	r1, [pc, #388]	; (800c674 <LED_Init+0x1ac>)
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	4413      	add	r3, r2
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	440b      	add	r3, r1
 800c4fa:	3312      	adds	r3, #18
 800c4fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c500:	801a      	strh	r2, [r3, #0]
		LED[i].Color = 0;
 800c502:	79fa      	ldrb	r2, [r7, #7]
 800c504:	495b      	ldr	r1, [pc, #364]	; (800c674 <LED_Init+0x1ac>)
 800c506:	4613      	mov	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	4413      	add	r3, r2
 800c50c:	00db      	lsls	r3, r3, #3
 800c50e:	440b      	add	r3, r1
 800c510:	2200      	movs	r2, #0
 800c512:	601a      	str	r2, [r3, #0]
		LED[i].ColorNext = -1;
 800c514:	79fa      	ldrb	r2, [r7, #7]
 800c516:	4957      	ldr	r1, [pc, #348]	; (800c674 <LED_Init+0x1ac>)
 800c518:	4613      	mov	r3, r2
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	4413      	add	r3, r2
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	440b      	add	r3, r1
 800c522:	f103 0108 	add.w	r1, r3, #8
 800c526:	f04f 32ff 	mov.w	r2, #4294967295
 800c52a:	f04f 33ff 	mov.w	r3, #4294967295
 800c52e:	e9c1 2300 	strd	r2, r3, [r1]
		LED[i].Intensity = 0;
 800c532:	79fa      	ldrb	r2, [r7, #7]
 800c534:	494f      	ldr	r1, [pc, #316]	; (800c674 <LED_Init+0x1ac>)
 800c536:	4613      	mov	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	4413      	add	r3, r2
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	440b      	add	r3, r1
 800c540:	3314      	adds	r3, #20
 800c542:	2200      	movs	r2, #0
 800c544:	701a      	strb	r2, [r3, #0]
		LED[i].IntensityNext = -1;
 800c546:	79fa      	ldrb	r2, [r7, #7]
 800c548:	494a      	ldr	r1, [pc, #296]	; (800c674 <LED_Init+0x1ac>)
 800c54a:	4613      	mov	r3, r2
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	4413      	add	r3, r2
 800c550:	00db      	lsls	r3, r3, #3
 800c552:	440b      	add	r3, r1
 800c554:	3316      	adds	r3, #22
 800c556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c55a:	801a      	strh	r2, [r3, #0]
		LED[i].BlinkTimeOn = 500;
 800c55c:	79fa      	ldrb	r2, [r7, #7]
 800c55e:	4945      	ldr	r1, [pc, #276]	; (800c674 <LED_Init+0x1ac>)
 800c560:	4613      	mov	r3, r2
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	4413      	add	r3, r2
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	440b      	add	r3, r1
 800c56a:	3318      	adds	r3, #24
 800c56c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c570:	801a      	strh	r2, [r3, #0]
		LED[i].BlinkTimeOnNext = -1;
 800c572:	79fa      	ldrb	r2, [r7, #7]
 800c574:	493f      	ldr	r1, [pc, #252]	; (800c674 <LED_Init+0x1ac>)
 800c576:	4613      	mov	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	4413      	add	r3, r2
 800c57c:	00db      	lsls	r3, r3, #3
 800c57e:	440b      	add	r3, r1
 800c580:	331c      	adds	r3, #28
 800c582:	f04f 32ff 	mov.w	r2, #4294967295
 800c586:	601a      	str	r2, [r3, #0]
		LED[i].BlinkTimeOff = 500;
 800c588:	79fa      	ldrb	r2, [r7, #7]
 800c58a:	493a      	ldr	r1, [pc, #232]	; (800c674 <LED_Init+0x1ac>)
 800c58c:	4613      	mov	r3, r2
 800c58e:	00db      	lsls	r3, r3, #3
 800c590:	4413      	add	r3, r2
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	440b      	add	r3, r1
 800c596:	3320      	adds	r3, #32
 800c598:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c59c:	801a      	strh	r2, [r3, #0]
		LED[i].BlinkTimeOffNext = -1;
 800c59e:	79fa      	ldrb	r2, [r7, #7]
 800c5a0:	4934      	ldr	r1, [pc, #208]	; (800c674 <LED_Init+0x1ac>)
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	00db      	lsls	r3, r3, #3
 800c5a6:	4413      	add	r3, r2
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3324      	adds	r3, #36	; 0x24
 800c5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c5b2:	601a      	str	r2, [r3, #0]
		LED[i].BreathInterval = 5;
 800c5b4:	79fa      	ldrb	r2, [r7, #7]
 800c5b6:	492f      	ldr	r1, [pc, #188]	; (800c674 <LED_Init+0x1ac>)
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	4413      	add	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	440b      	add	r3, r1
 800c5c2:	3328      	adds	r3, #40	; 0x28
 800c5c4:	2205      	movs	r2, #5
 800c5c6:	701a      	strb	r2, [r3, #0]
		LED[i].BreathIntervalNext = -1;
 800c5c8:	79fa      	ldrb	r2, [r7, #7]
 800c5ca:	492a      	ldr	r1, [pc, #168]	; (800c674 <LED_Init+0x1ac>)
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	4413      	add	r3, r2
 800c5d2:	00db      	lsls	r3, r3, #3
 800c5d4:	440b      	add	r3, r1
 800c5d6:	332a      	adds	r3, #42	; 0x2a
 800c5d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5dc:	801a      	strh	r2, [r3, #0]
		LED[i].FadeInInterval = 10;
 800c5de:	79fa      	ldrb	r2, [r7, #7]
 800c5e0:	4924      	ldr	r1, [pc, #144]	; (800c674 <LED_Init+0x1ac>)
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	4413      	add	r3, r2
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	440b      	add	r3, r1
 800c5ec:	332c      	adds	r3, #44	; 0x2c
 800c5ee:	220a      	movs	r2, #10
 800c5f0:	701a      	strb	r2, [r3, #0]
		LED[i].FadeInIntervalNext = -1;
 800c5f2:	79fa      	ldrb	r2, [r7, #7]
 800c5f4:	491f      	ldr	r1, [pc, #124]	; (800c674 <LED_Init+0x1ac>)
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	00db      	lsls	r3, r3, #3
 800c5fa:	4413      	add	r3, r2
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	440b      	add	r3, r1
 800c600:	332e      	adds	r3, #46	; 0x2e
 800c602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c606:	801a      	strh	r2, [r3, #0]
		LED[i].FadeOutInterval = 20;
 800c608:	79fa      	ldrb	r2, [r7, #7]
 800c60a:	491a      	ldr	r1, [pc, #104]	; (800c674 <LED_Init+0x1ac>)
 800c60c:	4613      	mov	r3, r2
 800c60e:	00db      	lsls	r3, r3, #3
 800c610:	4413      	add	r3, r2
 800c612:	00db      	lsls	r3, r3, #3
 800c614:	440b      	add	r3, r1
 800c616:	3330      	adds	r3, #48	; 0x30
 800c618:	2214      	movs	r2, #20
 800c61a:	701a      	strb	r2, [r3, #0]
		LED[i].FadeOutIntervalNext = -1;
 800c61c:	79fa      	ldrb	r2, [r7, #7]
 800c61e:	4915      	ldr	r1, [pc, #84]	; (800c674 <LED_Init+0x1ac>)
 800c620:	4613      	mov	r3, r2
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	4413      	add	r3, r2
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	440b      	add	r3, r1
 800c62a:	3332      	adds	r3, #50	; 0x32
 800c62c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c630:	801a      	strh	r2, [r3, #0]
		LED[i].TimeCycles = 0;
 800c632:	79fa      	ldrb	r2, [r7, #7]
 800c634:	490f      	ldr	r1, [pc, #60]	; (800c674 <LED_Init+0x1ac>)
 800c636:	4613      	mov	r3, r2
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	4413      	add	r3, r2
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	440b      	add	r3, r1
 800c640:	333c      	adds	r3, #60	; 0x3c
 800c642:	2200      	movs	r2, #0
 800c644:	801a      	strh	r2, [r3, #0]
		LED[i].RestorePrevious = 0;
 800c646:	79fa      	ldrb	r2, [r7, #7]
 800c648:	490a      	ldr	r1, [pc, #40]	; (800c674 <LED_Init+0x1ac>)
 800c64a:	4613      	mov	r3, r2
 800c64c:	00db      	lsls	r3, r3, #3
 800c64e:	4413      	add	r3, r2
 800c650:	00db      	lsls	r3, r3, #3
 800c652:	440b      	add	r3, r1
 800c654:	3344      	adds	r3, #68	; 0x44
 800c656:	2200      	movs	r2, #0
 800c658:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 800c65a:	79fb      	ldrb	r3, [r7, #7]
 800c65c:	3301      	adds	r3, #1
 800c65e:	71fb      	strb	r3, [r7, #7]
 800c660:	79fb      	ldrb	r3, [r7, #7]
 800c662:	2b04      	cmp	r3, #4
 800c664:	f67f af38 	bls.w	800c4d8 <LED_Init+0x10>
	}
}
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20000a38 	.word	0x20000a38

0800c678 <LED_Handle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the LED control
//! \details    Calculates the intensity of the LED and sets if needed
//! \params		None
void LED_Handle (void)
{
 800c678:	b590      	push	{r4, r7, lr}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
	uint8_t NeedsUpdate = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	71fb      	strb	r3, [r7, #7]


	for (uint8_t i = 0; i < WS2812_NUM;i++)
 800c682:	2300      	movs	r3, #0
 800c684:	71bb      	strb	r3, [r7, #6]
 800c686:	f000 bf59 	b.w	800d53c <LED_Handle+0xec4>
	{
		NeedsUpdate= 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	71fb      	strb	r3, [r7, #7]
		if (i==1) i=2;
 800c68e:	79bb      	ldrb	r3, [r7, #6]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <LED_Handle+0x20>
 800c694:	2302      	movs	r3, #2
 800c696:	71bb      	strb	r3, [r7, #6]
		if (LED[i].Color != LED[i].ColorOld)
 800c698:	79ba      	ldrb	r2, [r7, #6]
 800c69a:	499b      	ldr	r1, [pc, #620]	; (800c908 <LED_Handle+0x290>)
 800c69c:	4613      	mov	r3, r2
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	4413      	add	r3, r2
 800c6a2:	00db      	lsls	r3, r3, #3
 800c6a4:	440b      	add	r3, r1
 800c6a6:	6819      	ldr	r1, [r3, #0]
 800c6a8:	79ba      	ldrb	r2, [r7, #6]
 800c6aa:	4897      	ldr	r0, [pc, #604]	; (800c908 <LED_Handle+0x290>)
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	4413      	add	r3, r2
 800c6b2:	00db      	lsls	r3, r3, #3
 800c6b4:	4403      	add	r3, r0
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4299      	cmp	r1, r3
 800c6bc:	d013      	beq.n	800c6e6 <LED_Handle+0x6e>
		{
			NeedsUpdate = 1;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	71fb      	strb	r3, [r7, #7]
			LED[i].ColorOld = LED[i].Color;
 800c6c2:	79b9      	ldrb	r1, [r7, #6]
 800c6c4:	79ba      	ldrb	r2, [r7, #6]
 800c6c6:	4890      	ldr	r0, [pc, #576]	; (800c908 <LED_Handle+0x290>)
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	00db      	lsls	r3, r3, #3
 800c6cc:	440b      	add	r3, r1
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	4403      	add	r3, r0
 800c6d2:	6819      	ldr	r1, [r3, #0]
 800c6d4:	488c      	ldr	r0, [pc, #560]	; (800c908 <LED_Handle+0x290>)
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	00db      	lsls	r3, r3, #3
 800c6da:	4413      	add	r3, r2
 800c6dc:	00db      	lsls	r3, r3, #3
 800c6de:	4403      	add	r3, r0
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	6019      	str	r1, [r3, #0]
 800c6e4:	e085      	b.n	800c7f2 <LED_Handle+0x17a>

		}
		else if (LED[i].Intensity != LED[i].IntensityOld)
 800c6e6:	79ba      	ldrb	r2, [r7, #6]
 800c6e8:	4987      	ldr	r1, [pc, #540]	; (800c908 <LED_Handle+0x290>)
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	00db      	lsls	r3, r3, #3
 800c6ee:	4413      	add	r3, r2
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	440b      	add	r3, r1
 800c6f4:	3314      	adds	r3, #20
 800c6f6:	7819      	ldrb	r1, [r3, #0]
 800c6f8:	79ba      	ldrb	r2, [r7, #6]
 800c6fa:	4883      	ldr	r0, [pc, #524]	; (800c908 <LED_Handle+0x290>)
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	4413      	add	r3, r2
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	4403      	add	r3, r0
 800c706:	3315      	adds	r3, #21
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	4299      	cmp	r1, r3
 800c70c:	d015      	beq.n	800c73a <LED_Handle+0xc2>
		{
			NeedsUpdate = 1;
 800c70e:	2301      	movs	r3, #1
 800c710:	71fb      	strb	r3, [r7, #7]
			LED[i].IntensityOld = LED[i].Intensity;
 800c712:	79b9      	ldrb	r1, [r7, #6]
 800c714:	79ba      	ldrb	r2, [r7, #6]
 800c716:	487c      	ldr	r0, [pc, #496]	; (800c908 <LED_Handle+0x290>)
 800c718:	460b      	mov	r3, r1
 800c71a:	00db      	lsls	r3, r3, #3
 800c71c:	440b      	add	r3, r1
 800c71e:	00db      	lsls	r3, r3, #3
 800c720:	4403      	add	r3, r0
 800c722:	3314      	adds	r3, #20
 800c724:	7818      	ldrb	r0, [r3, #0]
 800c726:	4978      	ldr	r1, [pc, #480]	; (800c908 <LED_Handle+0x290>)
 800c728:	4613      	mov	r3, r2
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	4413      	add	r3, r2
 800c72e:	00db      	lsls	r3, r3, #3
 800c730:	440b      	add	r3, r1
 800c732:	3315      	adds	r3, #21
 800c734:	4602      	mov	r2, r0
 800c736:	701a      	strb	r2, [r3, #0]
 800c738:	e05b      	b.n	800c7f2 <LED_Handle+0x17a>

		}
		else if (LED[i].Effect != LED[i].EffectOld)
 800c73a:	79ba      	ldrb	r2, [r7, #6]
 800c73c:	4972      	ldr	r1, [pc, #456]	; (800c908 <LED_Handle+0x290>)
 800c73e:	4613      	mov	r3, r2
 800c740:	00db      	lsls	r3, r3, #3
 800c742:	4413      	add	r3, r2
 800c744:	00db      	lsls	r3, r3, #3
 800c746:	440b      	add	r3, r1
 800c748:	3310      	adds	r3, #16
 800c74a:	7819      	ldrb	r1, [r3, #0]
 800c74c:	79ba      	ldrb	r2, [r7, #6]
 800c74e:	486e      	ldr	r0, [pc, #440]	; (800c908 <LED_Handle+0x290>)
 800c750:	4613      	mov	r3, r2
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	4413      	add	r3, r2
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	4403      	add	r3, r0
 800c75a:	3311      	adds	r3, #17
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	4299      	cmp	r1, r3
 800c760:	d047      	beq.n	800c7f2 <LED_Handle+0x17a>
		{
			LED[i].Counter = 0;
 800c762:	79ba      	ldrb	r2, [r7, #6]
 800c764:	4968      	ldr	r1, [pc, #416]	; (800c908 <LED_Handle+0x290>)
 800c766:	4613      	mov	r3, r2
 800c768:	00db      	lsls	r3, r3, #3
 800c76a:	4413      	add	r3, r2
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	440b      	add	r3, r1
 800c770:	3334      	adds	r3, #52	; 0x34
 800c772:	2200      	movs	r2, #0
 800c774:	801a      	strh	r2, [r3, #0]
			LED[i].BreathIntensity = 0;
 800c776:	79ba      	ldrb	r2, [r7, #6]
 800c778:	4963      	ldr	r1, [pc, #396]	; (800c908 <LED_Handle+0x290>)
 800c77a:	4613      	mov	r3, r2
 800c77c:	00db      	lsls	r3, r3, #3
 800c77e:	4413      	add	r3, r2
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	440b      	add	r3, r1
 800c784:	3338      	adds	r3, #56	; 0x38
 800c786:	2200      	movs	r2, #0
 800c788:	801a      	strh	r2, [r3, #0]
			LED[i].FadeIntensity = 0;
 800c78a:	79ba      	ldrb	r2, [r7, #6]
 800c78c:	495e      	ldr	r1, [pc, #376]	; (800c908 <LED_Handle+0x290>)
 800c78e:	4613      	mov	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	4413      	add	r3, r2
 800c794:	00db      	lsls	r3, r3, #3
 800c796:	440b      	add	r3, r1
 800c798:	333a      	adds	r3, #58	; 0x3a
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
			if (LED[i].Effect == FADEOUT) LED[i].FadeIntensity = 255;
 800c79e:	79ba      	ldrb	r2, [r7, #6]
 800c7a0:	4959      	ldr	r1, [pc, #356]	; (800c908 <LED_Handle+0x290>)
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	4413      	add	r3, r2
 800c7a8:	00db      	lsls	r3, r3, #3
 800c7aa:	440b      	add	r3, r1
 800c7ac:	3310      	adds	r3, #16
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	2b05      	cmp	r3, #5
 800c7b2:	d109      	bne.n	800c7c8 <LED_Handle+0x150>
 800c7b4:	79ba      	ldrb	r2, [r7, #6]
 800c7b6:	4954      	ldr	r1, [pc, #336]	; (800c908 <LED_Handle+0x290>)
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	4413      	add	r3, r2
 800c7be:	00db      	lsls	r3, r3, #3
 800c7c0:	440b      	add	r3, r1
 800c7c2:	333a      	adds	r3, #58	; 0x3a
 800c7c4:	22ff      	movs	r2, #255	; 0xff
 800c7c6:	701a      	strb	r2, [r3, #0]
			NeedsUpdate = 1;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	71fb      	strb	r3, [r7, #7]
			LED[i].EffectOld = LED[i].Effect;
 800c7cc:	79b9      	ldrb	r1, [r7, #6]
 800c7ce:	79ba      	ldrb	r2, [r7, #6]
 800c7d0:	484d      	ldr	r0, [pc, #308]	; (800c908 <LED_Handle+0x290>)
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	00db      	lsls	r3, r3, #3
 800c7d6:	440b      	add	r3, r1
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	4403      	add	r3, r0
 800c7dc:	3310      	adds	r3, #16
 800c7de:	7818      	ldrb	r0, [r3, #0]
 800c7e0:	4949      	ldr	r1, [pc, #292]	; (800c908 <LED_Handle+0x290>)
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	4413      	add	r3, r2
 800c7e8:	00db      	lsls	r3, r3, #3
 800c7ea:	440b      	add	r3, r1
 800c7ec:	3311      	adds	r3, #17
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	701a      	strb	r2, [r3, #0]
		}
		if (LED[i].Effect == BLINKING)
 800c7f2:	79ba      	ldrb	r2, [r7, #6]
 800c7f4:	4944      	ldr	r1, [pc, #272]	; (800c908 <LED_Handle+0x290>)
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	00db      	lsls	r3, r3, #3
 800c7fa:	4413      	add	r3, r2
 800c7fc:	00db      	lsls	r3, r3, #3
 800c7fe:	440b      	add	r3, r1
 800c800:	3310      	adds	r3, #16
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b02      	cmp	r3, #2
 800c806:	f040 8122 	bne.w	800ca4e <LED_Handle+0x3d6>
		{
			if (LED[i].Counter >= LED[i].BlinkTimeOn + LED[i].BlinkTimeOff) //Needs to switch off
 800c80a:	79ba      	ldrb	r2, [r7, #6]
 800c80c:	493e      	ldr	r1, [pc, #248]	; (800c908 <LED_Handle+0x290>)
 800c80e:	4613      	mov	r3, r2
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	4413      	add	r3, r2
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	440b      	add	r3, r1
 800c818:	3334      	adds	r3, #52	; 0x34
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	79ba      	ldrb	r2, [r7, #6]
 800c820:	4939      	ldr	r1, [pc, #228]	; (800c908 <LED_Handle+0x290>)
 800c822:	4613      	mov	r3, r2
 800c824:	00db      	lsls	r3, r3, #3
 800c826:	4413      	add	r3, r2
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	440b      	add	r3, r1
 800c82c:	3318      	adds	r3, #24
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	461c      	mov	r4, r3
 800c832:	79ba      	ldrb	r2, [r7, #6]
 800c834:	4934      	ldr	r1, [pc, #208]	; (800c908 <LED_Handle+0x290>)
 800c836:	4613      	mov	r3, r2
 800c838:	00db      	lsls	r3, r3, #3
 800c83a:	4413      	add	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	440b      	add	r3, r1
 800c840:	3320      	adds	r3, #32
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	4423      	add	r3, r4
 800c846:	4298      	cmp	r0, r3
 800c848:	db62      	blt.n	800c910 <LED_Handle+0x298>
			{
				if (LED[i].TimeCycles > 0)
 800c84a:	79ba      	ldrb	r2, [r7, #6]
 800c84c:	492e      	ldr	r1, [pc, #184]	; (800c908 <LED_Handle+0x290>)
 800c84e:	4613      	mov	r3, r2
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	4413      	add	r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	440b      	add	r3, r1
 800c858:	333c      	adds	r3, #60	; 0x3c
 800c85a:	881b      	ldrh	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d045      	beq.n	800c8ec <LED_Handle+0x274>
				{
					if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 800c860:	79ba      	ldrb	r2, [r7, #6]
 800c862:	4929      	ldr	r1, [pc, #164]	; (800c908 <LED_Handle+0x290>)
 800c864:	4613      	mov	r3, r2
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	4413      	add	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	440b      	add	r3, r1
 800c86e:	3336      	adds	r3, #54	; 0x36
 800c870:	8819      	ldrh	r1, [r3, #0]
 800c872:	79ba      	ldrb	r2, [r7, #6]
 800c874:	4824      	ldr	r0, [pc, #144]	; (800c908 <LED_Handle+0x290>)
 800c876:	4613      	mov	r3, r2
 800c878:	00db      	lsls	r3, r3, #3
 800c87a:	4413      	add	r3, r2
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	4403      	add	r3, r0
 800c880:	333c      	adds	r3, #60	; 0x3c
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	4299      	cmp	r1, r3
 800c886:	d331      	bcc.n	800c8ec <LED_Handle+0x274>
					{
						if (LED[i].RestorePrevious)
 800c888:	79ba      	ldrb	r2, [r7, #6]
 800c88a:	491f      	ldr	r1, [pc, #124]	; (800c908 <LED_Handle+0x290>)
 800c88c:	4613      	mov	r3, r2
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	4413      	add	r3, r2
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	440b      	add	r3, r1
 800c896:	3344      	adds	r3, #68	; 0x44
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d01a      	beq.n	800c8d4 <LED_Handle+0x25c>
						{
							if ((LEDPREVIOUS[i].Effect != BREATHING) && (LEDPREVIOUS[i].Effect != FADEIN))
 800c89e:	79ba      	ldrb	r2, [r7, #6]
 800c8a0:	491a      	ldr	r1, [pc, #104]	; (800c90c <LED_Handle+0x294>)
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	00db      	lsls	r3, r3, #3
 800c8a6:	4413      	add	r3, r2
 800c8a8:	00db      	lsls	r3, r3, #3
 800c8aa:	440b      	add	r3, r1
 800c8ac:	3310      	adds	r3, #16
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	2b03      	cmp	r3, #3
 800c8b2:	d019      	beq.n	800c8e8 <LED_Handle+0x270>
 800c8b4:	79ba      	ldrb	r2, [r7, #6]
 800c8b6:	4915      	ldr	r1, [pc, #84]	; (800c90c <LED_Handle+0x294>)
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	4413      	add	r3, r2
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	440b      	add	r3, r1
 800c8c2:	3310      	adds	r3, #16
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b04      	cmp	r3, #4
 800c8c8:	d00e      	beq.n	800c8e8 <LED_Handle+0x270>
							LED_RestorePrevious(i);
 800c8ca:	79bb      	ldrb	r3, [r7, #6]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff fa09 	bl	800bce4 <LED_RestorePrevious>
 800c8d2:	e009      	b.n	800c8e8 <LED_Handle+0x270>
						}
						else
						{
							LED[i].Effect = SWITCHEDOFF;
 800c8d4:	79ba      	ldrb	r2, [r7, #6]
 800c8d6:	490c      	ldr	r1, [pc, #48]	; (800c908 <LED_Handle+0x290>)
 800c8d8:	4613      	mov	r3, r2
 800c8da:	00db      	lsls	r3, r3, #3
 800c8dc:	4413      	add	r3, r2
 800c8de:	00db      	lsls	r3, r3, #3
 800c8e0:	440b      	add	r3, r1
 800c8e2:	3310      	adds	r3, #16
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
						}
						NeedsUpdate = 1;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	71fb      	strb	r3, [r7, #7]
					}
				}
				LED[i].Counter = 0;
 800c8ec:	79ba      	ldrb	r2, [r7, #6]
 800c8ee:	4906      	ldr	r1, [pc, #24]	; (800c908 <LED_Handle+0x290>)
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	4413      	add	r3, r2
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	440b      	add	r3, r1
 800c8fa:	3334      	adds	r3, #52	; 0x34
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	801a      	strh	r2, [r3, #0]
				NeedsUpdate = 1;
 800c900:	2301      	movs	r3, #1
 800c902:	71fb      	strb	r3, [r7, #7]
 800c904:	e08e      	b.n	800ca24 <LED_Handle+0x3ac>
 800c906:	bf00      	nop
 800c908:	20000a38 	.word	0x20000a38
 800c90c:	20000ba0 	.word	0x20000ba0
			}
			else if (LED[i].Counter == LED[i].BlinkTimeOn) //Needs to switch on
 800c910:	79ba      	ldrb	r2, [r7, #6]
 800c912:	499c      	ldr	r1, [pc, #624]	; (800cb84 <LED_Handle+0x50c>)
 800c914:	4613      	mov	r3, r2
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	4413      	add	r3, r2
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	440b      	add	r3, r1
 800c91e:	3334      	adds	r3, #52	; 0x34
 800c920:	8819      	ldrh	r1, [r3, #0]
 800c922:	79ba      	ldrb	r2, [r7, #6]
 800c924:	4897      	ldr	r0, [pc, #604]	; (800cb84 <LED_Handle+0x50c>)
 800c926:	4613      	mov	r3, r2
 800c928:	00db      	lsls	r3, r3, #3
 800c92a:	4413      	add	r3, r2
 800c92c:	00db      	lsls	r3, r3, #3
 800c92e:	4403      	add	r3, r0
 800c930:	3318      	adds	r3, #24
 800c932:	881b      	ldrh	r3, [r3, #0]
 800c934:	4299      	cmp	r1, r3
 800c936:	d168      	bne.n	800ca0a <LED_Handle+0x392>
			{
				if (LED[i].TimeCycles > 0)
 800c938:	79ba      	ldrb	r2, [r7, #6]
 800c93a:	4992      	ldr	r1, [pc, #584]	; (800cb84 <LED_Handle+0x50c>)
 800c93c:	4613      	mov	r3, r2
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	4413      	add	r3, r2
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	440b      	add	r3, r1
 800c946:	333c      	adds	r3, #60	; 0x3c
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d05a      	beq.n	800ca04 <LED_Handle+0x38c>
				{
					if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 800c94e:	79ba      	ldrb	r2, [r7, #6]
 800c950:	498c      	ldr	r1, [pc, #560]	; (800cb84 <LED_Handle+0x50c>)
 800c952:	4613      	mov	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	4413      	add	r3, r2
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	440b      	add	r3, r1
 800c95c:	3336      	adds	r3, #54	; 0x36
 800c95e:	8819      	ldrh	r1, [r3, #0]
 800c960:	79ba      	ldrb	r2, [r7, #6]
 800c962:	4888      	ldr	r0, [pc, #544]	; (800cb84 <LED_Handle+0x50c>)
 800c964:	4613      	mov	r3, r2
 800c966:	00db      	lsls	r3, r3, #3
 800c968:	4413      	add	r3, r2
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	4403      	add	r3, r0
 800c96e:	333c      	adds	r3, #60	; 0x3c
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	4299      	cmp	r1, r3
 800c974:	d332      	bcc.n	800c9dc <LED_Handle+0x364>
					{
						if (LED[i].RestorePrevious)
 800c976:	79ba      	ldrb	r2, [r7, #6]
 800c978:	4982      	ldr	r1, [pc, #520]	; (800cb84 <LED_Handle+0x50c>)
 800c97a:	4613      	mov	r3, r2
 800c97c:	00db      	lsls	r3, r3, #3
 800c97e:	4413      	add	r3, r2
 800c980:	00db      	lsls	r3, r3, #3
 800c982:	440b      	add	r3, r1
 800c984:	3344      	adds	r3, #68	; 0x44
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d01a      	beq.n	800c9c2 <LED_Handle+0x34a>
						{
							if  ((LEDPREVIOUS[i].Effect == BREATHING) || (LEDPREVIOUS[i].Effect == FADEIN))
 800c98c:	79ba      	ldrb	r2, [r7, #6]
 800c98e:	497e      	ldr	r1, [pc, #504]	; (800cb88 <LED_Handle+0x510>)
 800c990:	4613      	mov	r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	4413      	add	r3, r2
 800c996:	00db      	lsls	r3, r3, #3
 800c998:	440b      	add	r3, r1
 800c99a:	3310      	adds	r3, #16
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	2b03      	cmp	r3, #3
 800c9a0:	d00a      	beq.n	800c9b8 <LED_Handle+0x340>
 800c9a2:	79ba      	ldrb	r2, [r7, #6]
 800c9a4:	4978      	ldr	r1, [pc, #480]	; (800cb88 <LED_Handle+0x510>)
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	4413      	add	r3, r2
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	440b      	add	r3, r1
 800c9b0:	3310      	adds	r3, #16
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	2b04      	cmp	r3, #4
 800c9b6:	d10e      	bne.n	800c9d6 <LED_Handle+0x35e>
								LED_RestorePrevious(i);
 800c9b8:	79bb      	ldrb	r3, [r7, #6]
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff f992 	bl	800bce4 <LED_RestorePrevious>
 800c9c0:	e009      	b.n	800c9d6 <LED_Handle+0x35e>
						}
						else
						{
							LED[i].Effect = SWITCHEDOFF;
 800c9c2:	79ba      	ldrb	r2, [r7, #6]
 800c9c4:	496f      	ldr	r1, [pc, #444]	; (800cb84 <LED_Handle+0x50c>)
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	00db      	lsls	r3, r3, #3
 800c9ca:	4413      	add	r3, r2
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	440b      	add	r3, r1
 800c9d0:	3310      	adds	r3, #16
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	701a      	strb	r2, [r3, #0]
						}
						NeedsUpdate = 1;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	71fb      	strb	r3, [r7, #7]
 800c9da:	e013      	b.n	800ca04 <LED_Handle+0x38c>
					}
					else
					{
						LED[i].TimeCycleCounter ++;
 800c9dc:	79ba      	ldrb	r2, [r7, #6]
 800c9de:	4969      	ldr	r1, [pc, #420]	; (800cb84 <LED_Handle+0x50c>)
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	4413      	add	r3, r2
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	440b      	add	r3, r1
 800c9ea:	3336      	adds	r3, #54	; 0x36
 800c9ec:	881b      	ldrh	r3, [r3, #0]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	b298      	uxth	r0, r3
 800c9f2:	4964      	ldr	r1, [pc, #400]	; (800cb84 <LED_Handle+0x50c>)
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	00db      	lsls	r3, r3, #3
 800c9f8:	4413      	add	r3, r2
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	440b      	add	r3, r1
 800c9fe:	3336      	adds	r3, #54	; 0x36
 800ca00:	4602      	mov	r2, r0
 800ca02:	801a      	strh	r2, [r3, #0]
					}
				}
				NeedsUpdate = 1;
 800ca04:	2301      	movs	r3, #1
 800ca06:	71fb      	strb	r3, [r7, #7]
 800ca08:	e00c      	b.n	800ca24 <LED_Handle+0x3ac>
			}
			else if (LED[i].Counter == 0) //Make sure LED is on after first started
 800ca0a:	79ba      	ldrb	r2, [r7, #6]
 800ca0c:	495d      	ldr	r1, [pc, #372]	; (800cb84 <LED_Handle+0x50c>)
 800ca0e:	4613      	mov	r3, r2
 800ca10:	00db      	lsls	r3, r3, #3
 800ca12:	4413      	add	r3, r2
 800ca14:	00db      	lsls	r3, r3, #3
 800ca16:	440b      	add	r3, r1
 800ca18:	3334      	adds	r3, #52	; 0x34
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <LED_Handle+0x3ac>
			{
				NeedsUpdate = 1;
 800ca20:	2301      	movs	r3, #1
 800ca22:	71fb      	strb	r3, [r7, #7]
			}
			LED[i].Counter ++;
 800ca24:	79ba      	ldrb	r2, [r7, #6]
 800ca26:	4957      	ldr	r1, [pc, #348]	; (800cb84 <LED_Handle+0x50c>)
 800ca28:	4613      	mov	r3, r2
 800ca2a:	00db      	lsls	r3, r3, #3
 800ca2c:	4413      	add	r3, r2
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	440b      	add	r3, r1
 800ca32:	3334      	adds	r3, #52	; 0x34
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	3301      	adds	r3, #1
 800ca38:	b298      	uxth	r0, r3
 800ca3a:	4952      	ldr	r1, [pc, #328]	; (800cb84 <LED_Handle+0x50c>)
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	4413      	add	r3, r2
 800ca42:	00db      	lsls	r3, r3, #3
 800ca44:	440b      	add	r3, r1
 800ca46:	3334      	adds	r3, #52	; 0x34
 800ca48:	4602      	mov	r2, r0
 800ca4a:	801a      	strh	r2, [r3, #0]
 800ca4c:	e1ad      	b.n	800cdaa <LED_Handle+0x732>
		}
		else if (LED[i].Effect == BREATHING)
 800ca4e:	79ba      	ldrb	r2, [r7, #6]
 800ca50:	494c      	ldr	r1, [pc, #304]	; (800cb84 <LED_Handle+0x50c>)
 800ca52:	4613      	mov	r3, r2
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	4413      	add	r3, r2
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	440b      	add	r3, r1
 800ca5c:	3310      	adds	r3, #16
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d136      	bne.n	800cad2 <LED_Handle+0x45a>
		{
			LED[i].Counter ++;
 800ca64:	79ba      	ldrb	r2, [r7, #6]
 800ca66:	4947      	ldr	r1, [pc, #284]	; (800cb84 <LED_Handle+0x50c>)
 800ca68:	4613      	mov	r3, r2
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	4413      	add	r3, r2
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	440b      	add	r3, r1
 800ca72:	3334      	adds	r3, #52	; 0x34
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	3301      	adds	r3, #1
 800ca78:	b298      	uxth	r0, r3
 800ca7a:	4942      	ldr	r1, [pc, #264]	; (800cb84 <LED_Handle+0x50c>)
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	4413      	add	r3, r2
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	440b      	add	r3, r1
 800ca86:	3334      	adds	r3, #52	; 0x34
 800ca88:	4602      	mov	r2, r0
 800ca8a:	801a      	strh	r2, [r3, #0]
			if (LED[i].Counter >= LED[i].BreathInterval)
 800ca8c:	79ba      	ldrb	r2, [r7, #6]
 800ca8e:	493d      	ldr	r1, [pc, #244]	; (800cb84 <LED_Handle+0x50c>)
 800ca90:	4613      	mov	r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	4413      	add	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	440b      	add	r3, r1
 800ca9a:	3334      	adds	r3, #52	; 0x34
 800ca9c:	8819      	ldrh	r1, [r3, #0]
 800ca9e:	79ba      	ldrb	r2, [r7, #6]
 800caa0:	4838      	ldr	r0, [pc, #224]	; (800cb84 <LED_Handle+0x50c>)
 800caa2:	4613      	mov	r3, r2
 800caa4:	00db      	lsls	r3, r3, #3
 800caa6:	4413      	add	r3, r2
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	4403      	add	r3, r0
 800caac:	3328      	adds	r3, #40	; 0x28
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	4299      	cmp	r1, r3
 800cab4:	f0c0 8179 	bcc.w	800cdaa <LED_Handle+0x732>
			{
				LED[i].Counter = 0;
 800cab8:	79ba      	ldrb	r2, [r7, #6]
 800caba:	4932      	ldr	r1, [pc, #200]	; (800cb84 <LED_Handle+0x50c>)
 800cabc:	4613      	mov	r3, r2
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	4413      	add	r3, r2
 800cac2:	00db      	lsls	r3, r3, #3
 800cac4:	440b      	add	r3, r1
 800cac6:	3334      	adds	r3, #52	; 0x34
 800cac8:	2200      	movs	r2, #0
 800caca:	801a      	strh	r2, [r3, #0]
				NeedsUpdate = 1;
 800cacc:	2301      	movs	r3, #1
 800cace:	71fb      	strb	r3, [r7, #7]
 800cad0:	e16b      	b.n	800cdaa <LED_Handle+0x732>
			}
		}
		else if (LED[i].Effect == FADEIN)
 800cad2:	79ba      	ldrb	r2, [r7, #6]
 800cad4:	492b      	ldr	r1, [pc, #172]	; (800cb84 <LED_Handle+0x50c>)
 800cad6:	4613      	mov	r3, r2
 800cad8:	00db      	lsls	r3, r3, #3
 800cada:	4413      	add	r3, r2
 800cadc:	00db      	lsls	r3, r3, #3
 800cade:	440b      	add	r3, r1
 800cae0:	3310      	adds	r3, #16
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b04      	cmp	r3, #4
 800cae6:	d151      	bne.n	800cb8c <LED_Handle+0x514>
		{
			if (LED[i].FadeIntensity < 255)
 800cae8:	79ba      	ldrb	r2, [r7, #6]
 800caea:	4926      	ldr	r1, [pc, #152]	; (800cb84 <LED_Handle+0x50c>)
 800caec:	4613      	mov	r3, r2
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	4413      	add	r3, r2
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	440b      	add	r3, r1
 800caf6:	333a      	adds	r3, #58	; 0x3a
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2bff      	cmp	r3, #255	; 0xff
 800cafc:	d036      	beq.n	800cb6c <LED_Handle+0x4f4>
			{
				LED[i].Counter ++;
 800cafe:	79ba      	ldrb	r2, [r7, #6]
 800cb00:	4920      	ldr	r1, [pc, #128]	; (800cb84 <LED_Handle+0x50c>)
 800cb02:	4613      	mov	r3, r2
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	4413      	add	r3, r2
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	440b      	add	r3, r1
 800cb0c:	3334      	adds	r3, #52	; 0x34
 800cb0e:	881b      	ldrh	r3, [r3, #0]
 800cb10:	3301      	adds	r3, #1
 800cb12:	b298      	uxth	r0, r3
 800cb14:	491b      	ldr	r1, [pc, #108]	; (800cb84 <LED_Handle+0x50c>)
 800cb16:	4613      	mov	r3, r2
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	4413      	add	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	440b      	add	r3, r1
 800cb20:	3334      	adds	r3, #52	; 0x34
 800cb22:	4602      	mov	r2, r0
 800cb24:	801a      	strh	r2, [r3, #0]
				if (LED[i].Counter >= LED[i].FadeInInterval)
 800cb26:	79ba      	ldrb	r2, [r7, #6]
 800cb28:	4916      	ldr	r1, [pc, #88]	; (800cb84 <LED_Handle+0x50c>)
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	4413      	add	r3, r2
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	440b      	add	r3, r1
 800cb34:	3334      	adds	r3, #52	; 0x34
 800cb36:	8819      	ldrh	r1, [r3, #0]
 800cb38:	79ba      	ldrb	r2, [r7, #6]
 800cb3a:	4812      	ldr	r0, [pc, #72]	; (800cb84 <LED_Handle+0x50c>)
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	4413      	add	r3, r2
 800cb42:	00db      	lsls	r3, r3, #3
 800cb44:	4403      	add	r3, r0
 800cb46:	332c      	adds	r3, #44	; 0x2c
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	4299      	cmp	r1, r3
 800cb4e:	f0c0 812c 	bcc.w	800cdaa <LED_Handle+0x732>
				{
					LED[i].Counter = 0;
 800cb52:	79ba      	ldrb	r2, [r7, #6]
 800cb54:	490b      	ldr	r1, [pc, #44]	; (800cb84 <LED_Handle+0x50c>)
 800cb56:	4613      	mov	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	4413      	add	r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	440b      	add	r3, r1
 800cb60:	3334      	adds	r3, #52	; 0x34
 800cb62:	2200      	movs	r2, #0
 800cb64:	801a      	strh	r2, [r3, #0]
					NeedsUpdate = 1;
 800cb66:	2301      	movs	r3, #1
 800cb68:	71fb      	strb	r3, [r7, #7]
 800cb6a:	e11e      	b.n	800cdaa <LED_Handle+0x732>
				}
			}
			else
			{
				LED[i].Effect = SWITCHEDON;
 800cb6c:	79ba      	ldrb	r2, [r7, #6]
 800cb6e:	4905      	ldr	r1, [pc, #20]	; (800cb84 <LED_Handle+0x50c>)
 800cb70:	4613      	mov	r3, r2
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	4413      	add	r3, r2
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	440b      	add	r3, r1
 800cb7a:	3310      	adds	r3, #16
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	701a      	strb	r2, [r3, #0]
 800cb80:	e113      	b.n	800cdaa <LED_Handle+0x732>
 800cb82:	bf00      	nop
 800cb84:	20000a38 	.word	0x20000a38
 800cb88:	20000ba0 	.word	0x20000ba0
			}
		}
		else if (LED[i].Effect == FADEOUT)
 800cb8c:	79ba      	ldrb	r2, [r7, #6]
 800cb8e:	49b0      	ldr	r1, [pc, #704]	; (800ce50 <LED_Handle+0x7d8>)
 800cb90:	4613      	mov	r3, r2
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	4413      	add	r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	440b      	add	r3, r1
 800cb9a:	3310      	adds	r3, #16
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b05      	cmp	r3, #5
 800cba0:	d14c      	bne.n	800cc3c <LED_Handle+0x5c4>
		{
			if (LED[i].FadeIntensity > 0)
 800cba2:	79ba      	ldrb	r2, [r7, #6]
 800cba4:	49aa      	ldr	r1, [pc, #680]	; (800ce50 <LED_Handle+0x7d8>)
 800cba6:	4613      	mov	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	4413      	add	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	440b      	add	r3, r1
 800cbb0:	333a      	adds	r3, #58	; 0x3a
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d036      	beq.n	800cc26 <LED_Handle+0x5ae>
			{
				LED[i].Counter ++;
 800cbb8:	79ba      	ldrb	r2, [r7, #6]
 800cbba:	49a5      	ldr	r1, [pc, #660]	; (800ce50 <LED_Handle+0x7d8>)
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	4413      	add	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	440b      	add	r3, r1
 800cbc6:	3334      	adds	r3, #52	; 0x34
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	b298      	uxth	r0, r3
 800cbce:	49a0      	ldr	r1, [pc, #640]	; (800ce50 <LED_Handle+0x7d8>)
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	4413      	add	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	440b      	add	r3, r1
 800cbda:	3334      	adds	r3, #52	; 0x34
 800cbdc:	4602      	mov	r2, r0
 800cbde:	801a      	strh	r2, [r3, #0]
				if (LED[i].Counter >= LED[i].FadeOutInterval)
 800cbe0:	79ba      	ldrb	r2, [r7, #6]
 800cbe2:	499b      	ldr	r1, [pc, #620]	; (800ce50 <LED_Handle+0x7d8>)
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	4413      	add	r3, r2
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	440b      	add	r3, r1
 800cbee:	3334      	adds	r3, #52	; 0x34
 800cbf0:	8819      	ldrh	r1, [r3, #0]
 800cbf2:	79ba      	ldrb	r2, [r7, #6]
 800cbf4:	4896      	ldr	r0, [pc, #600]	; (800ce50 <LED_Handle+0x7d8>)
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	4413      	add	r3, r2
 800cbfc:	00db      	lsls	r3, r3, #3
 800cbfe:	4403      	add	r3, r0
 800cc00:	3330      	adds	r3, #48	; 0x30
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	4299      	cmp	r1, r3
 800cc08:	f0c0 80cf 	bcc.w	800cdaa <LED_Handle+0x732>
				{
					LED[i].Counter = 0;
 800cc0c:	79ba      	ldrb	r2, [r7, #6]
 800cc0e:	4990      	ldr	r1, [pc, #576]	; (800ce50 <LED_Handle+0x7d8>)
 800cc10:	4613      	mov	r3, r2
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	4413      	add	r3, r2
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	440b      	add	r3, r1
 800cc1a:	3334      	adds	r3, #52	; 0x34
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	801a      	strh	r2, [r3, #0]
					NeedsUpdate = 1;
 800cc20:	2301      	movs	r3, #1
 800cc22:	71fb      	strb	r3, [r7, #7]
 800cc24:	e0c1      	b.n	800cdaa <LED_Handle+0x732>
				}
			}
			else
			{
				LED[i].Effect = SWITCHEDOFF;
 800cc26:	79ba      	ldrb	r2, [r7, #6]
 800cc28:	4989      	ldr	r1, [pc, #548]	; (800ce50 <LED_Handle+0x7d8>)
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	4413      	add	r3, r2
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	440b      	add	r3, r1
 800cc34:	3310      	adds	r3, #16
 800cc36:	2200      	movs	r2, #0
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	e0b6      	b.n	800cdaa <LED_Handle+0x732>
			}
		}
		else if (LED[i].Effect == SWITCHEDOFF)
 800cc3c:	79ba      	ldrb	r2, [r7, #6]
 800cc3e:	4984      	ldr	r1, [pc, #528]	; (800ce50 <LED_Handle+0x7d8>)
 800cc40:	4613      	mov	r3, r2
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	4413      	add	r3, r2
 800cc46:	00db      	lsls	r3, r3, #3
 800cc48:	440b      	add	r3, r1
 800cc4a:	3310      	adds	r3, #16
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d11d      	bne.n	800cc8e <LED_Handle+0x616>
		{
			if (LED[i].EffectNext > SWITCHEDOFF)
 800cc52:	79ba      	ldrb	r2, [r7, #6]
 800cc54:	497e      	ldr	r1, [pc, #504]	; (800ce50 <LED_Handle+0x7d8>)
 800cc56:	4613      	mov	r3, r2
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	4413      	add	r3, r2
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	440b      	add	r3, r1
 800cc60:	3312      	adds	r3, #18
 800cc62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f340 809f 	ble.w	800cdaa <LED_Handle+0x732>
			{
				LED_SetNext(i);
 800cc6c:	79bb      	ldrb	r3, [r7, #6]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7ff fa16 	bl	800c0a0 <LED_SetNext>
				LED[i].BreathIntensity = 0; // Make sure breathing is starting with breathing up
 800cc74:	79ba      	ldrb	r2, [r7, #6]
 800cc76:	4976      	ldr	r1, [pc, #472]	; (800ce50 <LED_Handle+0x7d8>)
 800cc78:	4613      	mov	r3, r2
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	4413      	add	r3, r2
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	440b      	add	r3, r1
 800cc82:	3338      	adds	r3, #56	; 0x38
 800cc84:	2200      	movs	r2, #0
 800cc86:	801a      	strh	r2, [r3, #0]
				NeedsUpdate = 1;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	71fb      	strb	r3, [r7, #7]
 800cc8c:	e08d      	b.n	800cdaa <LED_Handle+0x732>
			}
		}
		else if (LED[i].Effect == SWITCHEDON)
 800cc8e:	79ba      	ldrb	r2, [r7, #6]
 800cc90:	496f      	ldr	r1, [pc, #444]	; (800ce50 <LED_Handle+0x7d8>)
 800cc92:	4613      	mov	r3, r2
 800cc94:	00db      	lsls	r3, r3, #3
 800cc96:	4413      	add	r3, r2
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	440b      	add	r3, r1
 800cc9c:	3310      	adds	r3, #16
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	f040 8082 	bne.w	800cdaa <LED_Handle+0x732>
		{
			//If this LED setting is time limited, count the time and switch off, or restore previous after time elapsed.
			if (LED[i].TimeCycles > 0)
 800cca6:	79ba      	ldrb	r2, [r7, #6]
 800cca8:	4969      	ldr	r1, [pc, #420]	; (800ce50 <LED_Handle+0x7d8>)
 800ccaa:	4613      	mov	r3, r2
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	4413      	add	r3, r2
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	440b      	add	r3, r1
 800ccb4:	333c      	adds	r3, #60	; 0x3c
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d045      	beq.n	800cd48 <LED_Handle+0x6d0>
			{
				if (LED[i].TimeCycleCounter > LED[i].TimeCycles)
 800ccbc:	79ba      	ldrb	r2, [r7, #6]
 800ccbe:	4964      	ldr	r1, [pc, #400]	; (800ce50 <LED_Handle+0x7d8>)
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	00db      	lsls	r3, r3, #3
 800ccc4:	4413      	add	r3, r2
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	440b      	add	r3, r1
 800ccca:	3336      	adds	r3, #54	; 0x36
 800cccc:	8819      	ldrh	r1, [r3, #0]
 800ccce:	79ba      	ldrb	r2, [r7, #6]
 800ccd0:	485f      	ldr	r0, [pc, #380]	; (800ce50 <LED_Handle+0x7d8>)
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	00db      	lsls	r3, r3, #3
 800ccd6:	4413      	add	r3, r2
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	4403      	add	r3, r0
 800ccdc:	333c      	adds	r3, #60	; 0x3c
 800ccde:	881b      	ldrh	r3, [r3, #0]
 800cce0:	4299      	cmp	r1, r3
 800cce2:	d91c      	bls.n	800cd1e <LED_Handle+0x6a6>
				{
					if (LED[i].RestorePrevious)
 800cce4:	79ba      	ldrb	r2, [r7, #6]
 800cce6:	495a      	ldr	r1, [pc, #360]	; (800ce50 <LED_Handle+0x7d8>)
 800cce8:	4613      	mov	r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	4413      	add	r3, r2
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	440b      	add	r3, r1
 800ccf2:	3344      	adds	r3, #68	; 0x44
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d004      	beq.n	800cd04 <LED_Handle+0x68c>
					{
						LED_RestorePrevious(i);
 800ccfa:	79bb      	ldrb	r3, [r7, #6]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fff1 	bl	800bce4 <LED_RestorePrevious>
 800cd02:	e009      	b.n	800cd18 <LED_Handle+0x6a0>
					}
					else
					{
						LED[i].Effect = SWITCHEDOFF;
 800cd04:	79ba      	ldrb	r2, [r7, #6]
 800cd06:	4952      	ldr	r1, [pc, #328]	; (800ce50 <LED_Handle+0x7d8>)
 800cd08:	4613      	mov	r3, r2
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	4413      	add	r3, r2
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	440b      	add	r3, r1
 800cd12:	3310      	adds	r3, #16
 800cd14:	2200      	movs	r2, #0
 800cd16:	701a      	strb	r2, [r3, #0]
					}
					NeedsUpdate = 1;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	71fb      	strb	r3, [r7, #7]
 800cd1c:	e01e      	b.n	800cd5c <LED_Handle+0x6e4>
				}
				else
				{
					LED[i].TimeCycleCounter ++;
 800cd1e:	79ba      	ldrb	r2, [r7, #6]
 800cd20:	494b      	ldr	r1, [pc, #300]	; (800ce50 <LED_Handle+0x7d8>)
 800cd22:	4613      	mov	r3, r2
 800cd24:	00db      	lsls	r3, r3, #3
 800cd26:	4413      	add	r3, r2
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	440b      	add	r3, r1
 800cd2c:	3336      	adds	r3, #54	; 0x36
 800cd2e:	881b      	ldrh	r3, [r3, #0]
 800cd30:	3301      	adds	r3, #1
 800cd32:	b298      	uxth	r0, r3
 800cd34:	4946      	ldr	r1, [pc, #280]	; (800ce50 <LED_Handle+0x7d8>)
 800cd36:	4613      	mov	r3, r2
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	4413      	add	r3, r2
 800cd3c:	00db      	lsls	r3, r3, #3
 800cd3e:	440b      	add	r3, r1
 800cd40:	3336      	adds	r3, #54	; 0x36
 800cd42:	4602      	mov	r2, r0
 800cd44:	801a      	strh	r2, [r3, #0]
 800cd46:	e009      	b.n	800cd5c <LED_Handle+0x6e4>
				}
			}
			else
			{
				LED[i].TimeCycleCounter = 0;
 800cd48:	79ba      	ldrb	r2, [r7, #6]
 800cd4a:	4941      	ldr	r1, [pc, #260]	; (800ce50 <LED_Handle+0x7d8>)
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	4413      	add	r3, r2
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	440b      	add	r3, r1
 800cd56:	3336      	adds	r3, #54	; 0x36
 800cd58:	2200      	movs	r2, #0
 800cd5a:	801a      	strh	r2, [r3, #0]
			}

			if (LED[i].EffectNext > SWITCHEDOFF)
 800cd5c:	79ba      	ldrb	r2, [r7, #6]
 800cd5e:	493c      	ldr	r1, [pc, #240]	; (800ce50 <LED_Handle+0x7d8>)
 800cd60:	4613      	mov	r3, r2
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	4413      	add	r3, r2
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	440b      	add	r3, r1
 800cd6a:	3312      	adds	r3, #18
 800cd6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	dd1a      	ble.n	800cdaa <LED_Handle+0x732>
			{
				LED_SetNext(i);
 800cd74:	79bb      	ldrb	r3, [r7, #6]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7ff f992 	bl	800c0a0 <LED_SetNext>
				if (LED[i].Effect == BREATHING)
 800cd7c:	79ba      	ldrb	r2, [r7, #6]
 800cd7e:	4934      	ldr	r1, [pc, #208]	; (800ce50 <LED_Handle+0x7d8>)
 800cd80:	4613      	mov	r3, r2
 800cd82:	00db      	lsls	r3, r3, #3
 800cd84:	4413      	add	r3, r2
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	440b      	add	r3, r1
 800cd8a:	3310      	adds	r3, #16
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	2b03      	cmp	r3, #3
 800cd90:	d109      	bne.n	800cda6 <LED_Handle+0x72e>
					LED[i].BreathIntensity = 255; //Make sure breathing starts with breathing down
 800cd92:	79ba      	ldrb	r2, [r7, #6]
 800cd94:	492e      	ldr	r1, [pc, #184]	; (800ce50 <LED_Handle+0x7d8>)
 800cd96:	4613      	mov	r3, r2
 800cd98:	00db      	lsls	r3, r3, #3
 800cd9a:	4413      	add	r3, r2
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	440b      	add	r3, r1
 800cda0:	3338      	adds	r3, #56	; 0x38
 800cda2:	22ff      	movs	r2, #255	; 0xff
 800cda4:	801a      	strh	r2, [r3, #0]
				NeedsUpdate = 1;
 800cda6:	2301      	movs	r3, #1
 800cda8:	71fb      	strb	r3, [r7, #7]
			}
		}
		if (NeedsUpdate)
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 83c2 	beq.w	800d536 <LED_Handle+0xebe>
		{
			if (LED[i].Effect == SWITCHEDOFF)
 800cdb2:	79ba      	ldrb	r2, [r7, #6]
 800cdb4:	4926      	ldr	r1, [pc, #152]	; (800ce50 <LED_Handle+0x7d8>)
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	4413      	add	r3, r2
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	440b      	add	r3, r1
 800cdc0:	3310      	adds	r3, #16
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d117      	bne.n	800cdf8 <LED_Handle+0x780>
			{
				if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 800cdc8:	79bb      	ldrb	r3, [r7, #6]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d106      	bne.n	800cddc <LED_Handle+0x764>
 800cdce:	4b20      	ldr	r3, [pc, #128]	; (800ce50 <LED_Handle+0x7d8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	f001 fe7e 	bl	800ead8 <WS2812_Set>
				WS2812_Set(i, LED[i].Color,0);
 800cddc:	79ba      	ldrb	r2, [r7, #6]
 800cdde:	491c      	ldr	r1, [pc, #112]	; (800ce50 <LED_Handle+0x7d8>)
 800cde0:	4613      	mov	r3, r2
 800cde2:	00db      	lsls	r3, r3, #3
 800cde4:	4413      	add	r3, r2
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	440b      	add	r3, r1
 800cdea:	6819      	ldr	r1, [r3, #0]
 800cdec:	79bb      	ldrb	r3, [r7, #6]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f001 fe71 	bl	800ead8 <WS2812_Set>
 800cdf6:	e365      	b.n	800d4c4 <LED_Handle+0xe4c>

			}
			else if (LED[i].Effect == SWITCHEDON)
 800cdf8:	79ba      	ldrb	r2, [r7, #6]
 800cdfa:	4915      	ldr	r1, [pc, #84]	; (800ce50 <LED_Handle+0x7d8>)
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	00db      	lsls	r3, r3, #3
 800ce00:	4413      	add	r3, r2
 800ce02:	00db      	lsls	r3, r3, #3
 800ce04:	440b      	add	r3, r1
 800ce06:	3310      	adds	r3, #16
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d122      	bne.n	800ce54 <LED_Handle+0x7dc>
			{
				if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 800ce0e:	79bb      	ldrb	r3, [r7, #6]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d107      	bne.n	800ce24 <LED_Handle+0x7ac>
 800ce14:	4b0e      	ldr	r3, [pc, #56]	; (800ce50 <LED_Handle+0x7d8>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a0d      	ldr	r2, [pc, #52]	; (800ce50 <LED_Handle+0x7d8>)
 800ce1a:	7d12      	ldrb	r2, [r2, #20]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	2001      	movs	r0, #1
 800ce20:	f001 fe5a 	bl	800ead8 <WS2812_Set>
				WS2812_Set(i, LED[i].Color,LED[i].Intensity);
 800ce24:	79ba      	ldrb	r2, [r7, #6]
 800ce26:	490a      	ldr	r1, [pc, #40]	; (800ce50 <LED_Handle+0x7d8>)
 800ce28:	4613      	mov	r3, r2
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	440b      	add	r3, r1
 800ce32:	6819      	ldr	r1, [r3, #0]
 800ce34:	79ba      	ldrb	r2, [r7, #6]
 800ce36:	4806      	ldr	r0, [pc, #24]	; (800ce50 <LED_Handle+0x7d8>)
 800ce38:	4613      	mov	r3, r2
 800ce3a:	00db      	lsls	r3, r3, #3
 800ce3c:	4413      	add	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	4403      	add	r3, r0
 800ce42:	3314      	adds	r3, #20
 800ce44:	781a      	ldrb	r2, [r3, #0]
 800ce46:	79bb      	ldrb	r3, [r7, #6]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f001 fe45 	bl	800ead8 <WS2812_Set>
 800ce4e:	e339      	b.n	800d4c4 <LED_Handle+0xe4c>
 800ce50:	20000a38 	.word	0x20000a38
			}
			else if (LED[i].Effect == BLINKING)
 800ce54:	79ba      	ldrb	r2, [r7, #6]
 800ce56:	49a1      	ldr	r1, [pc, #644]	; (800d0dc <LED_Handle+0xa64>)
 800ce58:	4613      	mov	r3, r2
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	4413      	add	r3, r2
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	440b      	add	r3, r1
 800ce62:	3310      	adds	r3, #16
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	f040 8093 	bne.w	800cf92 <LED_Handle+0x91a>
			{
				if (LED[i].Counter >= LED[i].BlinkTimeOn) //Is on, needs to switch off
 800ce6c:	79ba      	ldrb	r2, [r7, #6]
 800ce6e:	499b      	ldr	r1, [pc, #620]	; (800d0dc <LED_Handle+0xa64>)
 800ce70:	4613      	mov	r3, r2
 800ce72:	00db      	lsls	r3, r3, #3
 800ce74:	4413      	add	r3, r2
 800ce76:	00db      	lsls	r3, r3, #3
 800ce78:	440b      	add	r3, r1
 800ce7a:	3334      	adds	r3, #52	; 0x34
 800ce7c:	8819      	ldrh	r1, [r3, #0]
 800ce7e:	79ba      	ldrb	r2, [r7, #6]
 800ce80:	4896      	ldr	r0, [pc, #600]	; (800d0dc <LED_Handle+0xa64>)
 800ce82:	4613      	mov	r3, r2
 800ce84:	00db      	lsls	r3, r3, #3
 800ce86:	4413      	add	r3, r2
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	4403      	add	r3, r0
 800ce8c:	3318      	adds	r3, #24
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	4299      	cmp	r1, r3
 800ce92:	d334      	bcc.n	800cefe <LED_Handle+0x886>
				{
					if ((LED[i].EffectNext == SWITCHEDON) || (LED[i].EffectNext == FADEOUT))
 800ce94:	79ba      	ldrb	r2, [r7, #6]
 800ce96:	4991      	ldr	r1, [pc, #580]	; (800d0dc <LED_Handle+0xa64>)
 800ce98:	4613      	mov	r3, r2
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	4413      	add	r3, r2
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	440b      	add	r3, r1
 800cea2:	3312      	adds	r3, #18
 800cea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d00b      	beq.n	800cec4 <LED_Handle+0x84c>
 800ceac:	79ba      	ldrb	r2, [r7, #6]
 800ceae:	498b      	ldr	r1, [pc, #556]	; (800d0dc <LED_Handle+0xa64>)
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	4413      	add	r3, r2
 800ceb6:	00db      	lsls	r3, r3, #3
 800ceb8:	440b      	add	r3, r1
 800ceba:	3312      	adds	r3, #18
 800cebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cec0:	2b05      	cmp	r3, #5
 800cec2:	d104      	bne.n	800cece <LED_Handle+0x856>
					{
						LED_SetNext (i);
 800cec4:	79bb      	ldrb	r3, [r7, #6]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7ff f8ea 	bl	800c0a0 <LED_SetNext>
 800cecc:	e2fa      	b.n	800d4c4 <LED_Handle+0xe4c>
					}
					else
					{
						if (i==0) WS2812_Set(1, LED[0].Color,0);//Also other water tank LED
 800cece:	79bb      	ldrb	r3, [r7, #6]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d106      	bne.n	800cee2 <LED_Handle+0x86a>
 800ced4:	4b81      	ldr	r3, [pc, #516]	; (800d0dc <LED_Handle+0xa64>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2200      	movs	r2, #0
 800ceda:	4619      	mov	r1, r3
 800cedc:	2001      	movs	r0, #1
 800cede:	f001 fdfb 	bl	800ead8 <WS2812_Set>
						WS2812_Set(i, LED[i].Color,0);
 800cee2:	79ba      	ldrb	r2, [r7, #6]
 800cee4:	497d      	ldr	r1, [pc, #500]	; (800d0dc <LED_Handle+0xa64>)
 800cee6:	4613      	mov	r3, r2
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	4413      	add	r3, r2
 800ceec:	00db      	lsls	r3, r3, #3
 800ceee:	440b      	add	r3, r1
 800cef0:	6819      	ldr	r1, [r3, #0]
 800cef2:	79bb      	ldrb	r3, [r7, #6]
 800cef4:	2200      	movs	r2, #0
 800cef6:	4618      	mov	r0, r3
 800cef8:	f001 fdee 	bl	800ead8 <WS2812_Set>
 800cefc:	e2e2      	b.n	800d4c4 <LED_Handle+0xe4c>
					}
				}
				else //Is off, needs to switch on
				{
					if (((LED[i].EffectNext != SWITCHEDON) || (LED[i].EffectNext != FADEOUT)) && (LED[i].EffectNext >=0))
 800cefe:	79ba      	ldrb	r2, [r7, #6]
 800cf00:	4976      	ldr	r1, [pc, #472]	; (800d0dc <LED_Handle+0xa64>)
 800cf02:	4613      	mov	r3, r2
 800cf04:	00db      	lsls	r3, r3, #3
 800cf06:	4413      	add	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	440b      	add	r3, r1
 800cf0c:	3312      	adds	r3, #18
 800cf0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d10b      	bne.n	800cf2e <LED_Handle+0x8b6>
 800cf16:	79ba      	ldrb	r2, [r7, #6]
 800cf18:	4970      	ldr	r1, [pc, #448]	; (800d0dc <LED_Handle+0xa64>)
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	00db      	lsls	r3, r3, #3
 800cf1e:	4413      	add	r3, r2
 800cf20:	00db      	lsls	r3, r3, #3
 800cf22:	440b      	add	r3, r1
 800cf24:	3312      	adds	r3, #18
 800cf26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf2a:	2b05      	cmp	r3, #5
 800cf2c:	d010      	beq.n	800cf50 <LED_Handle+0x8d8>
 800cf2e:	79ba      	ldrb	r2, [r7, #6]
 800cf30:	496a      	ldr	r1, [pc, #424]	; (800d0dc <LED_Handle+0xa64>)
 800cf32:	4613      	mov	r3, r2
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	4413      	add	r3, r2
 800cf38:	00db      	lsls	r3, r3, #3
 800cf3a:	440b      	add	r3, r1
 800cf3c:	3312      	adds	r3, #18
 800cf3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	db04      	blt.n	800cf50 <LED_Handle+0x8d8>
					{
						LED_SetNext (i);
 800cf46:	79bb      	ldrb	r3, [r7, #6]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7ff f8a9 	bl	800c0a0 <LED_SetNext>
 800cf4e:	e2b9      	b.n	800d4c4 <LED_Handle+0xe4c>
					}
					else
					{
						if (i==0) WS2812_Set(1, LED[0].Color,LED[0].Intensity);//Also other water tank LED
 800cf50:	79bb      	ldrb	r3, [r7, #6]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d107      	bne.n	800cf66 <LED_Handle+0x8ee>
 800cf56:	4b61      	ldr	r3, [pc, #388]	; (800d0dc <LED_Handle+0xa64>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a60      	ldr	r2, [pc, #384]	; (800d0dc <LED_Handle+0xa64>)
 800cf5c:	7d12      	ldrb	r2, [r2, #20]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	2001      	movs	r0, #1
 800cf62:	f001 fdb9 	bl	800ead8 <WS2812_Set>
						WS2812_Set(i, LED[i].Color,LED[i].Intensity);
 800cf66:	79ba      	ldrb	r2, [r7, #6]
 800cf68:	495c      	ldr	r1, [pc, #368]	; (800d0dc <LED_Handle+0xa64>)
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	4413      	add	r3, r2
 800cf70:	00db      	lsls	r3, r3, #3
 800cf72:	440b      	add	r3, r1
 800cf74:	6819      	ldr	r1, [r3, #0]
 800cf76:	79ba      	ldrb	r2, [r7, #6]
 800cf78:	4858      	ldr	r0, [pc, #352]	; (800d0dc <LED_Handle+0xa64>)
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	00db      	lsls	r3, r3, #3
 800cf7e:	4413      	add	r3, r2
 800cf80:	00db      	lsls	r3, r3, #3
 800cf82:	4403      	add	r3, r0
 800cf84:	3314      	adds	r3, #20
 800cf86:	781a      	ldrb	r2, [r3, #0]
 800cf88:	79bb      	ldrb	r3, [r7, #6]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f001 fda4 	bl	800ead8 <WS2812_Set>
 800cf90:	e298      	b.n	800d4c4 <LED_Handle+0xe4c>
					}

				}
			}
			else if (LED[i].Effect == BREATHING)
 800cf92:	79ba      	ldrb	r2, [r7, #6]
 800cf94:	4951      	ldr	r1, [pc, #324]	; (800d0dc <LED_Handle+0xa64>)
 800cf96:	4613      	mov	r3, r2
 800cf98:	00db      	lsls	r3, r3, #3
 800cf9a:	4413      	add	r3, r2
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	440b      	add	r3, r1
 800cfa0:	3310      	adds	r3, #16
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	f040 81bf 	bne.w	800d328 <LED_Handle+0xcb0>
			{
				LED[i].BreathIntensity ++;
 800cfaa:	79ba      	ldrb	r2, [r7, #6]
 800cfac:	494b      	ldr	r1, [pc, #300]	; (800d0dc <LED_Handle+0xa64>)
 800cfae:	4613      	mov	r3, r2
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3338      	adds	r3, #56	; 0x38
 800cfba:	881b      	ldrh	r3, [r3, #0]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	b298      	uxth	r0, r3
 800cfc0:	4946      	ldr	r1, [pc, #280]	; (800d0dc <LED_Handle+0xa64>)
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	4413      	add	r3, r2
 800cfc8:	00db      	lsls	r3, r3, #3
 800cfca:	440b      	add	r3, r1
 800cfcc:	3338      	adds	r3, #56	; 0x38
 800cfce:	4602      	mov	r2, r0
 800cfd0:	801a      	strh	r2, [r3, #0]
				if (LED[i].BreathIntensity > 510)
 800cfd2:	79ba      	ldrb	r2, [r7, #6]
 800cfd4:	4941      	ldr	r1, [pc, #260]	; (800d0dc <LED_Handle+0xa64>)
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	00db      	lsls	r3, r3, #3
 800cfda:	4413      	add	r3, r2
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	440b      	add	r3, r1
 800cfe0:	3338      	adds	r3, #56	; 0x38
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800cfe8:	f240 8090 	bls.w	800d10c <LED_Handle+0xa94>
				{
					if ((LED[i].EffectNext != SWITCHEDON) && (LED[i].EffectNext != FADEOUT))
 800cfec:	79ba      	ldrb	r2, [r7, #6]
 800cfee:	493b      	ldr	r1, [pc, #236]	; (800d0dc <LED_Handle+0xa64>)
 800cff0:	4613      	mov	r3, r2
 800cff2:	00db      	lsls	r3, r3, #3
 800cff4:	4413      	add	r3, r2
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	440b      	add	r3, r1
 800cffa:	3312      	adds	r3, #18
 800cffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d00f      	beq.n	800d024 <LED_Handle+0x9ac>
 800d004:	79ba      	ldrb	r2, [r7, #6]
 800d006:	4935      	ldr	r1, [pc, #212]	; (800d0dc <LED_Handle+0xa64>)
 800d008:	4613      	mov	r3, r2
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4413      	add	r3, r2
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	440b      	add	r3, r1
 800d012:	3312      	adds	r3, #18
 800d014:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d018:	2b05      	cmp	r3, #5
 800d01a:	d003      	beq.n	800d024 <LED_Handle+0x9ac>
					{
						LED_SetNext (i);
 800d01c:	79bb      	ldrb	r3, [r7, #6]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7ff f83e 	bl	800c0a0 <LED_SetNext>
					}
					LED[i].BreathIntensity = 0;
 800d024:	79ba      	ldrb	r2, [r7, #6]
 800d026:	492d      	ldr	r1, [pc, #180]	; (800d0dc <LED_Handle+0xa64>)
 800d028:	4613      	mov	r3, r2
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	4413      	add	r3, r2
 800d02e:	00db      	lsls	r3, r3, #3
 800d030:	440b      	add	r3, r1
 800d032:	3338      	adds	r3, #56	; 0x38
 800d034:	2200      	movs	r2, #0
 800d036:	801a      	strh	r2, [r3, #0]
					if (LED[i].TimeCycles > 0)
 800d038:	79ba      	ldrb	r2, [r7, #6]
 800d03a:	4928      	ldr	r1, [pc, #160]	; (800d0dc <LED_Handle+0xa64>)
 800d03c:	4613      	mov	r3, r2
 800d03e:	00db      	lsls	r3, r3, #3
 800d040:	4413      	add	r3, r2
 800d042:	00db      	lsls	r3, r3, #3
 800d044:	440b      	add	r3, r1
 800d046:	333c      	adds	r3, #60	; 0x3c
 800d048:	881b      	ldrh	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d05e      	beq.n	800d10c <LED_Handle+0xa94>
					{
						if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 800d04e:	79ba      	ldrb	r2, [r7, #6]
 800d050:	4922      	ldr	r1, [pc, #136]	; (800d0dc <LED_Handle+0xa64>)
 800d052:	4613      	mov	r3, r2
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	4413      	add	r3, r2
 800d058:	00db      	lsls	r3, r3, #3
 800d05a:	440b      	add	r3, r1
 800d05c:	3336      	adds	r3, #54	; 0x36
 800d05e:	8819      	ldrh	r1, [r3, #0]
 800d060:	79ba      	ldrb	r2, [r7, #6]
 800d062:	481e      	ldr	r0, [pc, #120]	; (800d0dc <LED_Handle+0xa64>)
 800d064:	4613      	mov	r3, r2
 800d066:	00db      	lsls	r3, r3, #3
 800d068:	4413      	add	r3, r2
 800d06a:	00db      	lsls	r3, r3, #3
 800d06c:	4403      	add	r3, r0
 800d06e:	333c      	adds	r3, #60	; 0x3c
 800d070:	881b      	ldrh	r3, [r3, #0]
 800d072:	4299      	cmp	r1, r3
 800d074:	d336      	bcc.n	800d0e4 <LED_Handle+0xa6c>
						{
							if (LED[i].RestorePrevious)
 800d076:	79ba      	ldrb	r2, [r7, #6]
 800d078:	4918      	ldr	r1, [pc, #96]	; (800d0dc <LED_Handle+0xa64>)
 800d07a:	4613      	mov	r3, r2
 800d07c:	00db      	lsls	r3, r3, #3
 800d07e:	4413      	add	r3, r2
 800d080:	00db      	lsls	r3, r3, #3
 800d082:	440b      	add	r3, r1
 800d084:	3344      	adds	r3, #68	; 0x44
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d01a      	beq.n	800d0c2 <LED_Handle+0xa4a>
							{
								if  ((LEDPREVIOUS[i].Effect == BREATHING) || (LEDPREVIOUS[i].Effect == FADEIN))
 800d08c:	79ba      	ldrb	r2, [r7, #6]
 800d08e:	4914      	ldr	r1, [pc, #80]	; (800d0e0 <LED_Handle+0xa68>)
 800d090:	4613      	mov	r3, r2
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	4413      	add	r3, r2
 800d096:	00db      	lsls	r3, r3, #3
 800d098:	440b      	add	r3, r1
 800d09a:	3310      	adds	r3, #16
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d00a      	beq.n	800d0b8 <LED_Handle+0xa40>
 800d0a2:	79ba      	ldrb	r2, [r7, #6]
 800d0a4:	490e      	ldr	r1, [pc, #56]	; (800d0e0 <LED_Handle+0xa68>)
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	4413      	add	r3, r2
 800d0ac:	00db      	lsls	r3, r3, #3
 800d0ae:	440b      	add	r3, r1
 800d0b0:	3310      	adds	r3, #16
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	d10e      	bne.n	800d0d6 <LED_Handle+0xa5e>
									LED_RestorePrevious(i);
 800d0b8:	79bb      	ldrb	r3, [r7, #6]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fe12 	bl	800bce4 <LED_RestorePrevious>
 800d0c0:	e009      	b.n	800d0d6 <LED_Handle+0xa5e>
							}
							else
							{
								LED[i].Effect = SWITCHEDOFF;
 800d0c2:	79ba      	ldrb	r2, [r7, #6]
 800d0c4:	4905      	ldr	r1, [pc, #20]	; (800d0dc <LED_Handle+0xa64>)
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	4413      	add	r3, r2
 800d0cc:	00db      	lsls	r3, r3, #3
 800d0ce:	440b      	add	r3, r1
 800d0d0:	3310      	adds	r3, #16
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	701a      	strb	r2, [r3, #0]
							}
							NeedsUpdate = 1;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	71fb      	strb	r3, [r7, #7]
 800d0da:	e017      	b.n	800d10c <LED_Handle+0xa94>
 800d0dc:	20000a38 	.word	0x20000a38
 800d0e0:	20000ba0 	.word	0x20000ba0
						}
						else
						{
							LED[i].TimeCycleCounter ++;
 800d0e4:	79ba      	ldrb	r2, [r7, #6]
 800d0e6:	498d      	ldr	r1, [pc, #564]	; (800d31c <LED_Handle+0xca4>)
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	4413      	add	r3, r2
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	440b      	add	r3, r1
 800d0f2:	3336      	adds	r3, #54	; 0x36
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	b298      	uxth	r0, r3
 800d0fa:	4988      	ldr	r1, [pc, #544]	; (800d31c <LED_Handle+0xca4>)
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	4413      	add	r3, r2
 800d102:	00db      	lsls	r3, r3, #3
 800d104:	440b      	add	r3, r1
 800d106:	3336      	adds	r3, #54	; 0x36
 800d108:	4602      	mov	r2, r0
 800d10a:	801a      	strh	r2, [r3, #0]
						}
					}
				}
				if (LED[i].BreathIntensity <= 255)
 800d10c:	79ba      	ldrb	r2, [r7, #6]
 800d10e:	4983      	ldr	r1, [pc, #524]	; (800d31c <LED_Handle+0xca4>)
 800d110:	4613      	mov	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	4413      	add	r3, r2
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	440b      	add	r3, r1
 800d11a:	3338      	adds	r3, #56	; 0x38
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	2bff      	cmp	r3, #255	; 0xff
 800d120:	f200 80b4 	bhi.w	800d28c <LED_Handle+0xc14>
				{
					if (LED[i].BreathIntensity == 255) //LED at max intensity. If Next is SWITCHED ON or FadeOut, switch to next
 800d124:	79ba      	ldrb	r2, [r7, #6]
 800d126:	497d      	ldr	r1, [pc, #500]	; (800d31c <LED_Handle+0xca4>)
 800d128:	4613      	mov	r3, r2
 800d12a:	00db      	lsls	r3, r3, #3
 800d12c:	4413      	add	r3, r2
 800d12e:	00db      	lsls	r3, r3, #3
 800d130:	440b      	add	r3, r1
 800d132:	3338      	adds	r3, #56	; 0x38
 800d134:	881b      	ldrh	r3, [r3, #0]
 800d136:	2bff      	cmp	r3, #255	; 0xff
 800d138:	d16c      	bne.n	800d214 <LED_Handle+0xb9c>
					{
						if (LED[i].TimeCycles > 0)
 800d13a:	79ba      	ldrb	r2, [r7, #6]
 800d13c:	4977      	ldr	r1, [pc, #476]	; (800d31c <LED_Handle+0xca4>)
 800d13e:	4613      	mov	r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	4413      	add	r3, r2
 800d144:	00db      	lsls	r3, r3, #3
 800d146:	440b      	add	r3, r1
 800d148:	333c      	adds	r3, #60	; 0x3c
 800d14a:	881b      	ldrh	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d045      	beq.n	800d1dc <LED_Handle+0xb64>
						{
							if (LED[i].TimeCycleCounter >= LED[i].TimeCycles)
 800d150:	79ba      	ldrb	r2, [r7, #6]
 800d152:	4972      	ldr	r1, [pc, #456]	; (800d31c <LED_Handle+0xca4>)
 800d154:	4613      	mov	r3, r2
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	4413      	add	r3, r2
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	440b      	add	r3, r1
 800d15e:	3336      	adds	r3, #54	; 0x36
 800d160:	8819      	ldrh	r1, [r3, #0]
 800d162:	79ba      	ldrb	r2, [r7, #6]
 800d164:	486d      	ldr	r0, [pc, #436]	; (800d31c <LED_Handle+0xca4>)
 800d166:	4613      	mov	r3, r2
 800d168:	00db      	lsls	r3, r3, #3
 800d16a:	4413      	add	r3, r2
 800d16c:	00db      	lsls	r3, r3, #3
 800d16e:	4403      	add	r3, r0
 800d170:	333c      	adds	r3, #60	; 0x3c
 800d172:	881b      	ldrh	r3, [r3, #0]
 800d174:	4299      	cmp	r1, r3
 800d176:	d331      	bcc.n	800d1dc <LED_Handle+0xb64>
							{
								if (LED[i].RestorePrevious)
 800d178:	79ba      	ldrb	r2, [r7, #6]
 800d17a:	4968      	ldr	r1, [pc, #416]	; (800d31c <LED_Handle+0xca4>)
 800d17c:	4613      	mov	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	4413      	add	r3, r2
 800d182:	00db      	lsls	r3, r3, #3
 800d184:	440b      	add	r3, r1
 800d186:	3344      	adds	r3, #68	; 0x44
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d01a      	beq.n	800d1c4 <LED_Handle+0xb4c>
								{
									if ((LEDPREVIOUS[i].Effect != BREATHING) && (LEDPREVIOUS[i].Effect != FADEIN))
 800d18e:	79ba      	ldrb	r2, [r7, #6]
 800d190:	4963      	ldr	r1, [pc, #396]	; (800d320 <LED_Handle+0xca8>)
 800d192:	4613      	mov	r3, r2
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	4413      	add	r3, r2
 800d198:	00db      	lsls	r3, r3, #3
 800d19a:	440b      	add	r3, r1
 800d19c:	3310      	adds	r3, #16
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b03      	cmp	r3, #3
 800d1a2:	d019      	beq.n	800d1d8 <LED_Handle+0xb60>
 800d1a4:	79ba      	ldrb	r2, [r7, #6]
 800d1a6:	495e      	ldr	r1, [pc, #376]	; (800d320 <LED_Handle+0xca8>)
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	4413      	add	r3, r2
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	440b      	add	r3, r1
 800d1b2:	3310      	adds	r3, #16
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b04      	cmp	r3, #4
 800d1b8:	d00e      	beq.n	800d1d8 <LED_Handle+0xb60>
									LED_RestorePrevious(i);
 800d1ba:	79bb      	ldrb	r3, [r7, #6]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe fd91 	bl	800bce4 <LED_RestorePrevious>
 800d1c2:	e009      	b.n	800d1d8 <LED_Handle+0xb60>
								}
								else
								{
									LED[i].Effect = SWITCHEDOFF;
 800d1c4:	79ba      	ldrb	r2, [r7, #6]
 800d1c6:	4955      	ldr	r1, [pc, #340]	; (800d31c <LED_Handle+0xca4>)
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	4413      	add	r3, r2
 800d1ce:	00db      	lsls	r3, r3, #3
 800d1d0:	440b      	add	r3, r1
 800d1d2:	3310      	adds	r3, #16
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	701a      	strb	r2, [r3, #0]
								}
								NeedsUpdate = 1;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	71fb      	strb	r3, [r7, #7]
							}
						}
						if ((LED[i].EffectNext == SWITCHEDON) || (LED[i].EffectNext == FADEOUT))
 800d1dc:	79ba      	ldrb	r2, [r7, #6]
 800d1de:	494f      	ldr	r1, [pc, #316]	; (800d31c <LED_Handle+0xca4>)
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	00db      	lsls	r3, r3, #3
 800d1e4:	4413      	add	r3, r2
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	440b      	add	r3, r1
 800d1ea:	3312      	adds	r3, #18
 800d1ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d00b      	beq.n	800d20c <LED_Handle+0xb94>
 800d1f4:	79ba      	ldrb	r2, [r7, #6]
 800d1f6:	4949      	ldr	r1, [pc, #292]	; (800d31c <LED_Handle+0xca4>)
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	4413      	add	r3, r2
 800d1fe:	00db      	lsls	r3, r3, #3
 800d200:	440b      	add	r3, r1
 800d202:	3312      	adds	r3, #18
 800d204:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d208:	2b05      	cmp	r3, #5
 800d20a:	d103      	bne.n	800d214 <LED_Handle+0xb9c>
						{
							LED_SetNext (i);
 800d20c:	79bb      	ldrb	r3, [r7, #6]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe ff46 	bl	800c0a0 <LED_SetNext>
						}
					}
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].BreathIntensity) / 255);//Also other water tank LED
 800d214:	79bb      	ldrb	r3, [r7, #6]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d111      	bne.n	800d23e <LED_Handle+0xbc6>
 800d21a:	4b40      	ldr	r3, [pc, #256]	; (800d31c <LED_Handle+0xca4>)
 800d21c:	6819      	ldr	r1, [r3, #0]
 800d21e:	4b3f      	ldr	r3, [pc, #252]	; (800d31c <LED_Handle+0xca4>)
 800d220:	7d1b      	ldrb	r3, [r3, #20]
 800d222:	461a      	mov	r2, r3
 800d224:	4b3d      	ldr	r3, [pc, #244]	; (800d31c <LED_Handle+0xca4>)
 800d226:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d228:	fb02 f303 	mul.w	r3, r2, r3
 800d22c:	4a3d      	ldr	r2, [pc, #244]	; (800d324 <LED_Handle+0xcac>)
 800d22e:	fba2 2303 	umull	r2, r3, r2, r3
 800d232:	09db      	lsrs	r3, r3, #7
 800d234:	b2db      	uxtb	r3, r3
 800d236:	461a      	mov	r2, r3
 800d238:	2001      	movs	r0, #1
 800d23a:	f001 fc4d 	bl	800ead8 <WS2812_Set>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].BreathIntensity) / 255);
 800d23e:	79ba      	ldrb	r2, [r7, #6]
 800d240:	4936      	ldr	r1, [pc, #216]	; (800d31c <LED_Handle+0xca4>)
 800d242:	4613      	mov	r3, r2
 800d244:	00db      	lsls	r3, r3, #3
 800d246:	4413      	add	r3, r2
 800d248:	00db      	lsls	r3, r3, #3
 800d24a:	440b      	add	r3, r1
 800d24c:	6819      	ldr	r1, [r3, #0]
 800d24e:	79ba      	ldrb	r2, [r7, #6]
 800d250:	4832      	ldr	r0, [pc, #200]	; (800d31c <LED_Handle+0xca4>)
 800d252:	4613      	mov	r3, r2
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	4413      	add	r3, r2
 800d258:	00db      	lsls	r3, r3, #3
 800d25a:	4403      	add	r3, r0
 800d25c:	3314      	adds	r3, #20
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	461c      	mov	r4, r3
 800d262:	79ba      	ldrb	r2, [r7, #6]
 800d264:	482d      	ldr	r0, [pc, #180]	; (800d31c <LED_Handle+0xca4>)
 800d266:	4613      	mov	r3, r2
 800d268:	00db      	lsls	r3, r3, #3
 800d26a:	4413      	add	r3, r2
 800d26c:	00db      	lsls	r3, r3, #3
 800d26e:	4403      	add	r3, r0
 800d270:	3338      	adds	r3, #56	; 0x38
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	fb04 f303 	mul.w	r3, r4, r3
 800d278:	4a2a      	ldr	r2, [pc, #168]	; (800d324 <LED_Handle+0xcac>)
 800d27a:	fba2 2303 	umull	r2, r3, r2, r3
 800d27e:	09db      	lsrs	r3, r3, #7
 800d280:	b2da      	uxtb	r2, r3
 800d282:	79bb      	ldrb	r3, [r7, #6]
 800d284:	4618      	mov	r0, r3
 800d286:	f001 fc27 	bl	800ead8 <WS2812_Set>
 800d28a:	e11b      	b.n	800d4c4 <LED_Handle+0xe4c>
				}
				else
				{
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) (510-LED[i].BreathIntensity) / 255));//Also other water tank LED
 800d28c:	79bb      	ldrb	r3, [r7, #6]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d11a      	bne.n	800d2c8 <LED_Handle+0xc50>
 800d292:	4b22      	ldr	r3, [pc, #136]	; (800d31c <LED_Handle+0xca4>)
 800d294:	6819      	ldr	r1, [r3, #0]
 800d296:	4b21      	ldr	r3, [pc, #132]	; (800d31c <LED_Handle+0xca4>)
 800d298:	7d1b      	ldrb	r3, [r3, #20]
 800d29a:	461c      	mov	r4, r3
 800d29c:	79ba      	ldrb	r2, [r7, #6]
 800d29e:	481f      	ldr	r0, [pc, #124]	; (800d31c <LED_Handle+0xca4>)
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	4413      	add	r3, r2
 800d2a6:	00db      	lsls	r3, r3, #3
 800d2a8:	4403      	add	r3, r0
 800d2aa:	3338      	adds	r3, #56	; 0x38
 800d2ac:	881b      	ldrh	r3, [r3, #0]
 800d2ae:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800d2b2:	fb04 f303 	mul.w	r3, r4, r3
 800d2b6:	4a1b      	ldr	r2, [pc, #108]	; (800d324 <LED_Handle+0xcac>)
 800d2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2bc:	09db      	lsrs	r3, r3, #7
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	2001      	movs	r0, #1
 800d2c4:	f001 fc08 	bl	800ead8 <WS2812_Set>
					WS2812_Set(i, LED[i].Color,(uint8_t) ((uint32_t) LED[i].Intensity * (uint32_t) (510-LED[i].BreathIntensity) / 255));
 800d2c8:	79ba      	ldrb	r2, [r7, #6]
 800d2ca:	4914      	ldr	r1, [pc, #80]	; (800d31c <LED_Handle+0xca4>)
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	00db      	lsls	r3, r3, #3
 800d2d0:	4413      	add	r3, r2
 800d2d2:	00db      	lsls	r3, r3, #3
 800d2d4:	440b      	add	r3, r1
 800d2d6:	6819      	ldr	r1, [r3, #0]
 800d2d8:	79ba      	ldrb	r2, [r7, #6]
 800d2da:	4810      	ldr	r0, [pc, #64]	; (800d31c <LED_Handle+0xca4>)
 800d2dc:	4613      	mov	r3, r2
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	4413      	add	r3, r2
 800d2e2:	00db      	lsls	r3, r3, #3
 800d2e4:	4403      	add	r3, r0
 800d2e6:	3314      	adds	r3, #20
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	461c      	mov	r4, r3
 800d2ec:	79ba      	ldrb	r2, [r7, #6]
 800d2ee:	480b      	ldr	r0, [pc, #44]	; (800d31c <LED_Handle+0xca4>)
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	00db      	lsls	r3, r3, #3
 800d2f4:	4413      	add	r3, r2
 800d2f6:	00db      	lsls	r3, r3, #3
 800d2f8:	4403      	add	r3, r0
 800d2fa:	3338      	adds	r3, #56	; 0x38
 800d2fc:	881b      	ldrh	r3, [r3, #0]
 800d2fe:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800d302:	fb04 f303 	mul.w	r3, r4, r3
 800d306:	4a07      	ldr	r2, [pc, #28]	; (800d324 <LED_Handle+0xcac>)
 800d308:	fba2 2303 	umull	r2, r3, r2, r3
 800d30c:	09db      	lsrs	r3, r3, #7
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	79bb      	ldrb	r3, [r7, #6]
 800d312:	4618      	mov	r0, r3
 800d314:	f001 fbe0 	bl	800ead8 <WS2812_Set>
 800d318:	e0d4      	b.n	800d4c4 <LED_Handle+0xe4c>
 800d31a:	bf00      	nop
 800d31c:	20000a38 	.word	0x20000a38
 800d320:	20000ba0 	.word	0x20000ba0
 800d324:	80808081 	.word	0x80808081
				}
			}
			else if (LED[i].Effect == FADEIN)
 800d328:	79ba      	ldrb	r2, [r7, #6]
 800d32a:	4989      	ldr	r1, [pc, #548]	; (800d550 <LED_Handle+0xed8>)
 800d32c:	4613      	mov	r3, r2
 800d32e:	00db      	lsls	r3, r3, #3
 800d330:	4413      	add	r3, r2
 800d332:	00db      	lsls	r3, r3, #3
 800d334:	440b      	add	r3, r1
 800d336:	3310      	adds	r3, #16
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	2b04      	cmp	r3, #4
 800d33c:	d15c      	bne.n	800d3f8 <LED_Handle+0xd80>
			{
				if (LED[i].FadeIntensity < 255)
 800d33e:	79ba      	ldrb	r2, [r7, #6]
 800d340:	4983      	ldr	r1, [pc, #524]	; (800d550 <LED_Handle+0xed8>)
 800d342:	4613      	mov	r3, r2
 800d344:	00db      	lsls	r3, r3, #3
 800d346:	4413      	add	r3, r2
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	440b      	add	r3, r1
 800d34c:	333a      	adds	r3, #58	; 0x3a
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	2bff      	cmp	r3, #255	; 0xff
 800d352:	f000 80b7 	beq.w	800d4c4 <LED_Handle+0xe4c>
				{
					LED[i].FadeIntensity ++;
 800d356:	79ba      	ldrb	r2, [r7, #6]
 800d358:	497d      	ldr	r1, [pc, #500]	; (800d550 <LED_Handle+0xed8>)
 800d35a:	4613      	mov	r3, r2
 800d35c:	00db      	lsls	r3, r3, #3
 800d35e:	4413      	add	r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	440b      	add	r3, r1
 800d364:	333a      	adds	r3, #58	; 0x3a
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	3301      	adds	r3, #1
 800d36a:	b2d8      	uxtb	r0, r3
 800d36c:	4978      	ldr	r1, [pc, #480]	; (800d550 <LED_Handle+0xed8>)
 800d36e:	4613      	mov	r3, r2
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	4413      	add	r3, r2
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	440b      	add	r3, r1
 800d378:	333a      	adds	r3, #58	; 0x3a
 800d37a:	4602      	mov	r2, r0
 800d37c:	701a      	strb	r2, [r3, #0]
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 800d37e:	79bb      	ldrb	r3, [r7, #6]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d112      	bne.n	800d3aa <LED_Handle+0xd32>
 800d384:	4b72      	ldr	r3, [pc, #456]	; (800d550 <LED_Handle+0xed8>)
 800d386:	6819      	ldr	r1, [r3, #0]
 800d388:	4b71      	ldr	r3, [pc, #452]	; (800d550 <LED_Handle+0xed8>)
 800d38a:	7d1b      	ldrb	r3, [r3, #20]
 800d38c:	461a      	mov	r2, r3
 800d38e:	4b70      	ldr	r3, [pc, #448]	; (800d550 <LED_Handle+0xed8>)
 800d390:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d394:	fb02 f303 	mul.w	r3, r2, r3
 800d398:	4a6e      	ldr	r2, [pc, #440]	; (800d554 <LED_Handle+0xedc>)
 800d39a:	fba2 2303 	umull	r2, r3, r2, r3
 800d39e:	09db      	lsrs	r3, r3, #7
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	f001 fb97 	bl	800ead8 <WS2812_Set>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].FadeIntensity) / 255);
 800d3aa:	79ba      	ldrb	r2, [r7, #6]
 800d3ac:	4968      	ldr	r1, [pc, #416]	; (800d550 <LED_Handle+0xed8>)
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	4413      	add	r3, r2
 800d3b4:	00db      	lsls	r3, r3, #3
 800d3b6:	440b      	add	r3, r1
 800d3b8:	6819      	ldr	r1, [r3, #0]
 800d3ba:	79ba      	ldrb	r2, [r7, #6]
 800d3bc:	4864      	ldr	r0, [pc, #400]	; (800d550 <LED_Handle+0xed8>)
 800d3be:	4613      	mov	r3, r2
 800d3c0:	00db      	lsls	r3, r3, #3
 800d3c2:	4413      	add	r3, r2
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	4403      	add	r3, r0
 800d3c8:	3314      	adds	r3, #20
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	461c      	mov	r4, r3
 800d3ce:	79ba      	ldrb	r2, [r7, #6]
 800d3d0:	485f      	ldr	r0, [pc, #380]	; (800d550 <LED_Handle+0xed8>)
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	00db      	lsls	r3, r3, #3
 800d3d6:	4413      	add	r3, r2
 800d3d8:	00db      	lsls	r3, r3, #3
 800d3da:	4403      	add	r3, r0
 800d3dc:	333a      	adds	r3, #58	; 0x3a
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	fb04 f303 	mul.w	r3, r4, r3
 800d3e4:	4a5b      	ldr	r2, [pc, #364]	; (800d554 <LED_Handle+0xedc>)
 800d3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ea:	09db      	lsrs	r3, r3, #7
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	79bb      	ldrb	r3, [r7, #6]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f001 fb71 	bl	800ead8 <WS2812_Set>
 800d3f6:	e065      	b.n	800d4c4 <LED_Handle+0xe4c>
				}
			}
			else if (LED[i].Effect == FADEOUT)
 800d3f8:	79ba      	ldrb	r2, [r7, #6]
 800d3fa:	4955      	ldr	r1, [pc, #340]	; (800d550 <LED_Handle+0xed8>)
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	4413      	add	r3, r2
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	440b      	add	r3, r1
 800d406:	3310      	adds	r3, #16
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	2b05      	cmp	r3, #5
 800d40c:	d15a      	bne.n	800d4c4 <LED_Handle+0xe4c>
			{
				if (LED[i].FadeIntensity > 0)
 800d40e:	79ba      	ldrb	r2, [r7, #6]
 800d410:	494f      	ldr	r1, [pc, #316]	; (800d550 <LED_Handle+0xed8>)
 800d412:	4613      	mov	r3, r2
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	4413      	add	r3, r2
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	440b      	add	r3, r1
 800d41c:	333a      	adds	r3, #58	; 0x3a
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d04f      	beq.n	800d4c4 <LED_Handle+0xe4c>
				{
					LED[i].FadeIntensity --;
 800d424:	79ba      	ldrb	r2, [r7, #6]
 800d426:	494a      	ldr	r1, [pc, #296]	; (800d550 <LED_Handle+0xed8>)
 800d428:	4613      	mov	r3, r2
 800d42a:	00db      	lsls	r3, r3, #3
 800d42c:	4413      	add	r3, r2
 800d42e:	00db      	lsls	r3, r3, #3
 800d430:	440b      	add	r3, r1
 800d432:	333a      	adds	r3, #58	; 0x3a
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	3b01      	subs	r3, #1
 800d438:	b2d8      	uxtb	r0, r3
 800d43a:	4945      	ldr	r1, [pc, #276]	; (800d550 <LED_Handle+0xed8>)
 800d43c:	4613      	mov	r3, r2
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	4413      	add	r3, r2
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	440b      	add	r3, r1
 800d446:	333a      	adds	r3, #58	; 0x3a
 800d448:	4602      	mov	r2, r0
 800d44a:	701a      	strb	r2, [r3, #0]
					if (i==0) WS2812_Set(1, LED[0].Color,((uint32_t) LED[0].Intensity * (uint32_t) LED[0].FadeIntensity) / 255);
 800d44c:	79bb      	ldrb	r3, [r7, #6]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d112      	bne.n	800d478 <LED_Handle+0xe00>
 800d452:	4b3f      	ldr	r3, [pc, #252]	; (800d550 <LED_Handle+0xed8>)
 800d454:	6819      	ldr	r1, [r3, #0]
 800d456:	4b3e      	ldr	r3, [pc, #248]	; (800d550 <LED_Handle+0xed8>)
 800d458:	7d1b      	ldrb	r3, [r3, #20]
 800d45a:	461a      	mov	r2, r3
 800d45c:	4b3c      	ldr	r3, [pc, #240]	; (800d550 <LED_Handle+0xed8>)
 800d45e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d462:	fb02 f303 	mul.w	r3, r2, r3
 800d466:	4a3b      	ldr	r2, [pc, #236]	; (800d554 <LED_Handle+0xedc>)
 800d468:	fba2 2303 	umull	r2, r3, r2, r3
 800d46c:	09db      	lsrs	r3, r3, #7
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	461a      	mov	r2, r3
 800d472:	2001      	movs	r0, #1
 800d474:	f001 fb30 	bl	800ead8 <WS2812_Set>
					WS2812_Set(i, LED[i].Color,((uint32_t) LED[i].Intensity * (uint32_t) LED[i].FadeIntensity) / 255);
 800d478:	79ba      	ldrb	r2, [r7, #6]
 800d47a:	4935      	ldr	r1, [pc, #212]	; (800d550 <LED_Handle+0xed8>)
 800d47c:	4613      	mov	r3, r2
 800d47e:	00db      	lsls	r3, r3, #3
 800d480:	4413      	add	r3, r2
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	440b      	add	r3, r1
 800d486:	6819      	ldr	r1, [r3, #0]
 800d488:	79ba      	ldrb	r2, [r7, #6]
 800d48a:	4831      	ldr	r0, [pc, #196]	; (800d550 <LED_Handle+0xed8>)
 800d48c:	4613      	mov	r3, r2
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	4413      	add	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	4403      	add	r3, r0
 800d496:	3314      	adds	r3, #20
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	461c      	mov	r4, r3
 800d49c:	79ba      	ldrb	r2, [r7, #6]
 800d49e:	482c      	ldr	r0, [pc, #176]	; (800d550 <LED_Handle+0xed8>)
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	4413      	add	r3, r2
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	4403      	add	r3, r0
 800d4aa:	333a      	adds	r3, #58	; 0x3a
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	fb04 f303 	mul.w	r3, r4, r3
 800d4b2:	4a28      	ldr	r2, [pc, #160]	; (800d554 <LED_Handle+0xedc>)
 800d4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b8:	09db      	lsrs	r3, r3, #7
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	79bb      	ldrb	r3, [r7, #6]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f001 fb0a 	bl	800ead8 <WS2812_Set>
				}
			}
			WS2812_Show();
 800d4c4:	f001 fd1c 	bl	800ef00 <WS2812_Show>
			LED[i].EffectOld = LED[i].Effect;
 800d4c8:	79b9      	ldrb	r1, [r7, #6]
 800d4ca:	79ba      	ldrb	r2, [r7, #6]
 800d4cc:	4820      	ldr	r0, [pc, #128]	; (800d550 <LED_Handle+0xed8>)
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	440b      	add	r3, r1
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	4403      	add	r3, r0
 800d4d8:	3310      	adds	r3, #16
 800d4da:	7818      	ldrb	r0, [r3, #0]
 800d4dc:	491c      	ldr	r1, [pc, #112]	; (800d550 <LED_Handle+0xed8>)
 800d4de:	4613      	mov	r3, r2
 800d4e0:	00db      	lsls	r3, r3, #3
 800d4e2:	4413      	add	r3, r2
 800d4e4:	00db      	lsls	r3, r3, #3
 800d4e6:	440b      	add	r3, r1
 800d4e8:	3311      	adds	r3, #17
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	701a      	strb	r2, [r3, #0]
			LED[i].IntensityOld = LED[i].Intensity;
 800d4ee:	79b9      	ldrb	r1, [r7, #6]
 800d4f0:	79ba      	ldrb	r2, [r7, #6]
 800d4f2:	4817      	ldr	r0, [pc, #92]	; (800d550 <LED_Handle+0xed8>)
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	440b      	add	r3, r1
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	4403      	add	r3, r0
 800d4fe:	3314      	adds	r3, #20
 800d500:	7818      	ldrb	r0, [r3, #0]
 800d502:	4913      	ldr	r1, [pc, #76]	; (800d550 <LED_Handle+0xed8>)
 800d504:	4613      	mov	r3, r2
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	4413      	add	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	440b      	add	r3, r1
 800d50e:	3315      	adds	r3, #21
 800d510:	4602      	mov	r2, r0
 800d512:	701a      	strb	r2, [r3, #0]
			LED[i].ColorOld = LED[i].Color;
 800d514:	79b9      	ldrb	r1, [r7, #6]
 800d516:	79ba      	ldrb	r2, [r7, #6]
 800d518:	480d      	ldr	r0, [pc, #52]	; (800d550 <LED_Handle+0xed8>)
 800d51a:	460b      	mov	r3, r1
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	440b      	add	r3, r1
 800d520:	00db      	lsls	r3, r3, #3
 800d522:	4403      	add	r3, r0
 800d524:	6819      	ldr	r1, [r3, #0]
 800d526:	480a      	ldr	r0, [pc, #40]	; (800d550 <LED_Handle+0xed8>)
 800d528:	4613      	mov	r3, r2
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	4413      	add	r3, r2
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	4403      	add	r3, r0
 800d532:	3304      	adds	r3, #4
 800d534:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i < WS2812_NUM;i++)
 800d536:	79bb      	ldrb	r3, [r7, #6]
 800d538:	3301      	adds	r3, #1
 800d53a:	71bb      	strb	r3, [r7, #6]
 800d53c:	79bb      	ldrb	r3, [r7, #6]
 800d53e:	2b04      	cmp	r3, #4
 800d540:	f67f a8a3 	bls.w	800c68a <LED_Handle+0x12>
		}
	}
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop
 800d548:	370c      	adds	r7, #12
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd90      	pop	{r4, r7, pc}
 800d54e:	bf00      	nop
 800d550:	20000a38 	.word	0x20000a38
 800d554:	80808081 	.word	0x80808081

0800d558 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d558:	b480      	push	{r7}
 800d55a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d55c:	f3bf 8f4f 	dsb	sy
}
 800d560:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d562:	4b06      	ldr	r3, [pc, #24]	; (800d57c <__NVIC_SystemReset+0x24>)
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d56a:	4904      	ldr	r1, [pc, #16]	; (800d57c <__NVIC_SystemReset+0x24>)
 800d56c:	4b04      	ldr	r3, [pc, #16]	; (800d580 <__NVIC_SystemReset+0x28>)
 800d56e:	4313      	orrs	r3, r2
 800d570:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d572:	f3bf 8f4f 	dsb	sy
}
 800d576:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <__NVIC_SystemReset+0x20>
 800d57c:	e000ed00 	.word	0xe000ed00
 800d580:	05fa0004 	.word	0x05fa0004

0800d584 <SER_Init>:
//-----------------------------------------------------------------------------
//! \brief      Initiates the serial unit
//! \details    Sets up Message buffer. Starts UART
//! \param      None
void SER_Init (void)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	af00      	add	r7, sp, #0
	Message.RxBuffer ='\000';
 800d588:	4b07      	ldr	r3, [pc, #28]	; (800d5a8 <SER_Init+0x24>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart3, &Message.RxBuffer, 1);
 800d58e:	2201      	movs	r2, #1
 800d590:	4905      	ldr	r1, [pc, #20]	; (800d5a8 <SER_Init+0x24>)
 800d592:	4806      	ldr	r0, [pc, #24]	; (800d5ac <SER_Init+0x28>)
 800d594:	f006 f816 	bl	80135c4 <HAL_UART_Receive_DMA>
	//__HAL_UART_ENABLE_IT(&huart3,UART_IT_IDLE);
	HAL_UART_Receive_DMA(&huart2, &Message.RxBuffer, 1);
 800d598:	2201      	movs	r2, #1
 800d59a:	4903      	ldr	r1, [pc, #12]	; (800d5a8 <SER_Init+0x24>)
 800d59c:	4804      	ldr	r0, [pc, #16]	; (800d5b0 <SER_Init+0x2c>)
 800d59e:	f006 f811 	bl	80135c4 <HAL_UART_Receive_DMA>
}
 800d5a2:	bf00      	nop
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20000d0c 	.word	0x20000d0c
 800d5ac:	2000088c 	.word	0x2000088c
 800d5b0:	20000848 	.word	0x20000848

0800d5b4 <SER_SetStatus>:
//-----------------------------------------------------------------------------
//! \brief      Sets the status of the return message of actions
//! \details    the work module confirms accepting or timing out.
//! \param[in]  uint8_t newStatus	Status of the return message
void SER_SetStatus (uint8_t newStatus)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	71fb      	strb	r3, [r7, #7]
	SER_SendReturnMessage (10, newStatus);
 800d5be:	79fb      	ldrb	r3, [r7, #7]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	200a      	movs	r0, #10
 800d5c4:	f000 f804 	bl	800d5d0 <SER_SendReturnMessage>
}
 800d5c8:	bf00      	nop
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <SER_SendReturnMessage>:
//! \brief      Sends a return message to the corresponding UART
//! \details    Calculates CRC, fills the buffer and sends the buffer
//! \param[in]  uint8_t newLength	Length of the message
//! \param[in]  uint8_t newStatus	Status of the return message
void SER_SendReturnMessage (uint8_t newLength, uint8_t newStatus)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	460a      	mov	r2, r1
 800d5da:	71fb      	strb	r3, [r7, #7]
 800d5dc:	4613      	mov	r3, r2
 800d5de:	71bb      	strb	r3, [r7, #6]
	uint8_t newCRC;
	//Fill length in data buffer
	Message.RxData[2]=UTL_Dec2Asc(newLength / 16);
 800d5e0:	79fb      	ldrb	r3, [r7, #7]
 800d5e2:	091b      	lsrs	r3, r3, #4
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f001 fa61 	bl	800eaae <UTL_Dec2Asc>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	4b39      	ldr	r3, [pc, #228]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d5f2:	72da      	strb	r2, [r3, #11]
	Message.RxData[3]=UTL_Dec2Asc(newLength % 16);
 800d5f4:	79fb      	ldrb	r3, [r7, #7]
 800d5f6:	f003 030f 	and.w	r3, r3, #15
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f001 fa56 	bl	800eaae <UTL_Dec2Asc>
 800d602:	4603      	mov	r3, r0
 800d604:	461a      	mov	r2, r3
 800d606:	4b34      	ldr	r3, [pc, #208]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d608:	731a      	strb	r2, [r3, #12]
	//Fill status in data buffer
	if (newLength > 8)
 800d60a:	79fb      	ldrb	r3, [r7, #7]
 800d60c:	2b08      	cmp	r3, #8
 800d60e:	d914      	bls.n	800d63a <SER_SendReturnMessage+0x6a>
	{
		Message.RxData[8]=UTL_Dec2Asc(newStatus / 16);
 800d610:	79bb      	ldrb	r3, [r7, #6]
 800d612:	091b      	lsrs	r3, r3, #4
 800d614:	b2db      	uxtb	r3, r3
 800d616:	4618      	mov	r0, r3
 800d618:	f001 fa49 	bl	800eaae <UTL_Dec2Asc>
 800d61c:	4603      	mov	r3, r0
 800d61e:	461a      	mov	r2, r3
 800d620:	4b2d      	ldr	r3, [pc, #180]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d622:	745a      	strb	r2, [r3, #17]
		Message.RxData[9]=UTL_Dec2Asc(newStatus % 16);
 800d624:	79bb      	ldrb	r3, [r7, #6]
 800d626:	f003 030f 	and.w	r3, r3, #15
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	4618      	mov	r0, r3
 800d62e:	f001 fa3e 	bl	800eaae <UTL_Dec2Asc>
 800d632:	4603      	mov	r3, r0
 800d634:	461a      	mov	r2, r3
 800d636:	4b28      	ldr	r3, [pc, #160]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d638:	749a      	strb	r2, [r3, #18]
	}
	//Calculate CRC and store it in data buffer
	newCRC = CalculateCRC8(Message.RxData, newLength);
 800d63a:	79fb      	ldrb	r3, [r7, #7]
 800d63c:	4619      	mov	r1, r3
 800d63e:	4827      	ldr	r0, [pc, #156]	; (800d6dc <SER_SendReturnMessage+0x10c>)
 800d640:	f7fd fe62 	bl	800b308 <CalculateCRC8>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]
	Message.RxData[6]= UTL_Dec2Asc(newCRC / 16);
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	091b      	lsrs	r3, r3, #4
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	4618      	mov	r0, r3
 800d650:	f001 fa2d 	bl	800eaae <UTL_Dec2Asc>
 800d654:	4603      	mov	r3, r0
 800d656:	461a      	mov	r2, r3
 800d658:	4b1f      	ldr	r3, [pc, #124]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d65a:	73da      	strb	r2, [r3, #15]
	Message.RxData[7]= UTL_Dec2Asc(newCRC % 16);
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
 800d65e:	f003 030f 	and.w	r3, r3, #15
 800d662:	b2db      	uxtb	r3, r3
 800d664:	4618      	mov	r0, r3
 800d666:	f001 fa22 	bl	800eaae <UTL_Dec2Asc>
 800d66a:	4603      	mov	r3, r0
 800d66c:	461a      	mov	r2, r3
 800d66e:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d670:	741a      	strb	r2, [r3, #16]
	//Send data

	if (UartReturn==2)
 800d672:	4b1b      	ldr	r3, [pc, #108]	; (800d6e0 <SER_SendReturnMessage+0x110>)
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b02      	cmp	r3, #2
 800d678:	d107      	bne.n	800d68a <SER_SendReturnMessage+0xba>
		HAL_UART_Transmit(&huart2, Message.RxData,newLength,100);
 800d67a:	79fb      	ldrb	r3, [r7, #7]
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	2364      	movs	r3, #100	; 0x64
 800d680:	4916      	ldr	r1, [pc, #88]	; (800d6dc <SER_SendReturnMessage+0x10c>)
 800d682:	4818      	ldr	r0, [pc, #96]	; (800d6e4 <SER_SendReturnMessage+0x114>)
 800d684:	f005 ff0c 	bl	80134a0 <HAL_UART_Transmit>
 800d688:	e00a      	b.n	800d6a0 <SER_SendReturnMessage+0xd0>
	else if (UartReturn==3)
 800d68a:	4b15      	ldr	r3, [pc, #84]	; (800d6e0 <SER_SendReturnMessage+0x110>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b03      	cmp	r3, #3
 800d690:	d106      	bne.n	800d6a0 <SER_SendReturnMessage+0xd0>
		HAL_UART_Transmit(&huart3, Message.RxData,newLength,100);
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	b29a      	uxth	r2, r3
 800d696:	2364      	movs	r3, #100	; 0x64
 800d698:	4910      	ldr	r1, [pc, #64]	; (800d6dc <SER_SendReturnMessage+0x10c>)
 800d69a:	4813      	ldr	r0, [pc, #76]	; (800d6e8 <SER_SendReturnMessage+0x118>)
 800d69c:	f005 ff00 	bl	80134a0 <HAL_UART_Transmit>
	//Empty data buffer
	Message.Length = 0;
 800d6a0:	4b0d      	ldr	r3, [pc, #52]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	709a      	strb	r2, [r3, #2]
	Message.MType = 0;
 800d6a6:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	70da      	strb	r2, [r3, #3]
	Message.Counter = 0;
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	80da      	strh	r2, [r3, #6]
	Message.CRCValue = 0;
 800d6b2:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	711a      	strb	r2, [r3, #4]
	Message.RxBuffer = 0;
 800d6b8:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <SER_SendReturnMessage+0x108>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	701a      	strb	r2, [r3, #0]
	memset(Message.RxData, 0, sizeof(Message.RxData));
 800d6be:	22ff      	movs	r2, #255	; 0xff
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	4806      	ldr	r0, [pc, #24]	; (800d6dc <SER_SendReturnMessage+0x10c>)
 800d6c4:	f006 fdb8 	bl	8014238 <memset>
	SER_Busy = 0;
 800d6c8:	4b08      	ldr	r3, [pc, #32]	; (800d6ec <SER_SendReturnMessage+0x11c>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
}
 800d6ce:	bf00      	nop
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20000d0c 	.word	0x20000d0c
 800d6dc:	20000d15 	.word	0x20000d15
 800d6e0:	20000e14 	.word	0x20000e14
 800d6e4:	20000848 	.word	0x20000848
 800d6e8:	2000088c 	.word	0x2000088c
 800d6ec:	20000e15 	.word	0x20000e15

0800d6f0 <SER_GetValue>:
//! \param[in]  uint8_t newUart			Uart number
//! \param[in]  uint8_t newStartByte	Start byte of the hex string
//! \param[in]  uint8_t newLength		Length of the hex string [2 or 4 bytes]
//! \param[out]	uint16_t ReturnValue
uint16_t SER_GetValue (uint8_t newStartByte, uint8_t newLength)
{
 800d6f0:	b590      	push	{r4, r7, lr}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	460a      	mov	r2, r1
 800d6fa:	71fb      	strb	r3, [r7, #7]
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	71bb      	strb	r3, [r7, #6]
	uint16_t returnValue = 0;
 800d700:	2300      	movs	r3, #0
 800d702:	81fb      	strh	r3, [r7, #14]
	if (newLength == 1)
 800d704:	79bb      	ldrb	r3, [r7, #6]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d109      	bne.n	800d71e <SER_GetValue+0x2e>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]);
 800d70a:	79fb      	ldrb	r3, [r7, #7]
 800d70c:	4a2c      	ldr	r2, [pc, #176]	; (800d7c0 <SER_GetValue+0xd0>)
 800d70e:	4413      	add	r3, r2
 800d710:	7a5b      	ldrb	r3, [r3, #9]
 800d712:	4618      	mov	r0, r3
 800d714:	f001 f9a2 	bl	800ea5c <UTL_Asc2Dec>
 800d718:	4603      	mov	r3, r0
 800d71a:	81fb      	strh	r3, [r7, #14]
 800d71c:	e04a      	b.n	800d7b4 <SER_GetValue+0xc4>
	else if (newLength == 2)
 800d71e:	79bb      	ldrb	r3, [r7, #6]
 800d720:	2b02      	cmp	r3, #2
 800d722:	d117      	bne.n	800d754 <SER_GetValue+0x64>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]);
 800d724:	79fb      	ldrb	r3, [r7, #7]
 800d726:	4a26      	ldr	r2, [pc, #152]	; (800d7c0 <SER_GetValue+0xd0>)
 800d728:	4413      	add	r3, r2
 800d72a:	7a5b      	ldrb	r3, [r3, #9]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f001 f995 	bl	800ea5c <UTL_Asc2Dec>
 800d732:	4603      	mov	r3, r0
 800d734:	b29b      	uxth	r3, r3
 800d736:	011b      	lsls	r3, r3, #4
 800d738:	b29c      	uxth	r4, r3
 800d73a:	79fb      	ldrb	r3, [r7, #7]
 800d73c:	3301      	adds	r3, #1
 800d73e:	4a20      	ldr	r2, [pc, #128]	; (800d7c0 <SER_GetValue+0xd0>)
 800d740:	4413      	add	r3, r2
 800d742:	7a5b      	ldrb	r3, [r3, #9]
 800d744:	4618      	mov	r0, r3
 800d746:	f001 f989 	bl	800ea5c <UTL_Asc2Dec>
 800d74a:	4603      	mov	r3, r0
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	4423      	add	r3, r4
 800d750:	81fb      	strh	r3, [r7, #14]
 800d752:	e02f      	b.n	800d7b4 <SER_GetValue+0xc4>
	else if (newLength == 4)//4 bytes
 800d754:	79bb      	ldrb	r3, [r7, #6]
 800d756:	2b04      	cmp	r3, #4
 800d758:	d12c      	bne.n	800d7b4 <SER_GetValue+0xc4>
		returnValue = UTL_Asc2Dec(Message.RxData[newStartByte]) * 4096 + UTL_Asc2Dec(Message.RxData[newStartByte + 1]) * 256 + UTL_Asc2Dec(Message.RxData[newStartByte + 2]) * 16 + UTL_Asc2Dec(Message.RxData[newStartByte + 3]);
 800d75a:	79fb      	ldrb	r3, [r7, #7]
 800d75c:	4a18      	ldr	r2, [pc, #96]	; (800d7c0 <SER_GetValue+0xd0>)
 800d75e:	4413      	add	r3, r2
 800d760:	7a5b      	ldrb	r3, [r3, #9]
 800d762:	4618      	mov	r0, r3
 800d764:	f001 f97a 	bl	800ea5c <UTL_Asc2Dec>
 800d768:	4603      	mov	r3, r0
 800d76a:	011c      	lsls	r4, r3, #4
 800d76c:	79fb      	ldrb	r3, [r7, #7]
 800d76e:	3301      	adds	r3, #1
 800d770:	4a13      	ldr	r2, [pc, #76]	; (800d7c0 <SER_GetValue+0xd0>)
 800d772:	4413      	add	r3, r2
 800d774:	7a5b      	ldrb	r3, [r3, #9]
 800d776:	4618      	mov	r0, r3
 800d778:	f001 f970 	bl	800ea5c <UTL_Asc2Dec>
 800d77c:	4603      	mov	r3, r0
 800d77e:	4423      	add	r3, r4
 800d780:	011c      	lsls	r4, r3, #4
 800d782:	79fb      	ldrb	r3, [r7, #7]
 800d784:	3302      	adds	r3, #2
 800d786:	4a0e      	ldr	r2, [pc, #56]	; (800d7c0 <SER_GetValue+0xd0>)
 800d788:	4413      	add	r3, r2
 800d78a:	7a5b      	ldrb	r3, [r3, #9]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f001 f965 	bl	800ea5c <UTL_Asc2Dec>
 800d792:	4603      	mov	r3, r0
 800d794:	4423      	add	r3, r4
 800d796:	b29b      	uxth	r3, r3
 800d798:	011b      	lsls	r3, r3, #4
 800d79a:	b29c      	uxth	r4, r3
 800d79c:	79fb      	ldrb	r3, [r7, #7]
 800d79e:	3303      	adds	r3, #3
 800d7a0:	4a07      	ldr	r2, [pc, #28]	; (800d7c0 <SER_GetValue+0xd0>)
 800d7a2:	4413      	add	r3, r2
 800d7a4:	7a5b      	ldrb	r3, [r3, #9]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f001 f958 	bl	800ea5c <UTL_Asc2Dec>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	4423      	add	r3, r4
 800d7b2:	81fb      	strh	r3, [r7, #14]
	return returnValue;
 800d7b4:	89fb      	ldrh	r3, [r7, #14]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3714      	adds	r7, #20
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd90      	pop	{r4, r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	20000d0c 	.word	0x20000d0c

0800d7c4 <SER_FillData>:
//! \details    Fills the buffer with converted characters
//! \param[in]  uint8_t newPosition		Position in the array
//! \Param[in]	uint8_t newByteCount	1 byte = 2 hex positions
//! \Param[in]	uint64_t newValue
void SER_FillData (uint8_t newPosition, uint8_t newByteCount, uint64_t newValue)
{
 800d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c8:	b089      	sub	sp, #36	; 0x24
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	e9c7 2300 	strd	r2, r3, [r7]
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	73fb      	strb	r3, [r7, #15]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	73bb      	strb	r3, [r7, #14]
	uint64_t CompareValue;
	if (newByteCount == 1) CompareValue = 0xF0;
 800d7d8:	7bbb      	ldrb	r3, [r7, #14]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d105      	bne.n	800d7ea <SER_FillData+0x26>
 800d7de:	f04f 02f0 	mov.w	r2, #240	; 0xf0
 800d7e2:	f04f 0300 	mov.w	r3, #0
 800d7e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (newByteCount == 2) CompareValue = 0xF000;
 800d7ea:	7bbb      	ldrb	r3, [r7, #14]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d105      	bne.n	800d7fc <SER_FillData+0x38>
 800d7f0:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800d7f4:	f04f 0300 	mov.w	r3, #0
 800d7f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (newByteCount == 4) CompareValue = 0xF0000000;
 800d7fc:	7bbb      	ldrb	r3, [r7, #14]
 800d7fe:	2b04      	cmp	r3, #4
 800d800:	d105      	bne.n	800d80e <SER_FillData+0x4a>
 800d802:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d806:	f04f 0300 	mov.w	r3, #0
 800d80a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (newByteCount == 8) CompareValue = 0xF000000000000000;
 800d80e:	7bbb      	ldrb	r3, [r7, #14]
 800d810:	2b08      	cmp	r3, #8
 800d812:	d105      	bne.n	800d820 <SER_FillData+0x5c>
 800d814:	f04f 0200 	mov.w	r2, #0
 800d818:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
 800d81c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 800d820:	2300      	movs	r3, #0
 800d822:	75fb      	strb	r3, [r7, #23]
 800d824:	e03d      	b.n	800d8a2 <SER_FillData+0xde>
	{
		Message.RxData[newPosition + i] = UTL_Dec2Asc(((newValue & (CompareValue >> i*4)) >> (4 * ((newByteCount * 2) - 1 - i))));
 800d826:	7dfb      	ldrb	r3, [r7, #23]
 800d828:	0099      	lsls	r1, r3, #2
 800d82a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d82e:	f1c1 0620 	rsb	r6, r1, #32
 800d832:	f1a1 0020 	sub.w	r0, r1, #32
 800d836:	fa22 f401 	lsr.w	r4, r2, r1
 800d83a:	fa03 f606 	lsl.w	r6, r3, r6
 800d83e:	4334      	orrs	r4, r6
 800d840:	fa23 f000 	lsr.w	r0, r3, r0
 800d844:	4304      	orrs	r4, r0
 800d846:	fa23 f501 	lsr.w	r5, r3, r1
 800d84a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d84e:	ea04 0a02 	and.w	sl, r4, r2
 800d852:	ea05 0b03 	and.w	fp, r5, r3
 800d856:	7bbb      	ldrb	r3, [r7, #14]
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	1e5a      	subs	r2, r3, #1
 800d85c:	7dfb      	ldrb	r3, [r7, #23]
 800d85e:	1ad3      	subs	r3, r2, r3
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	f1c3 0120 	rsb	r1, r3, #32
 800d866:	f1a3 0220 	sub.w	r2, r3, #32
 800d86a:	fa2a f803 	lsr.w	r8, sl, r3
 800d86e:	fa0b f101 	lsl.w	r1, fp, r1
 800d872:	ea48 0801 	orr.w	r8, r8, r1
 800d876:	fa2b f202 	lsr.w	r2, fp, r2
 800d87a:	ea48 0802 	orr.w	r8, r8, r2
 800d87e:	fa2b f903 	lsr.w	r9, fp, r3
 800d882:	fa5f f188 	uxtb.w	r1, r8
 800d886:	7bfa      	ldrb	r2, [r7, #15]
 800d888:	7dfb      	ldrb	r3, [r7, #23]
 800d88a:	18d6      	adds	r6, r2, r3
 800d88c:	4608      	mov	r0, r1
 800d88e:	f001 f90e 	bl	800eaae <UTL_Dec2Asc>
 800d892:	4603      	mov	r3, r0
 800d894:	461a      	mov	r2, r3
 800d896:	4b08      	ldr	r3, [pc, #32]	; (800d8b8 <SER_FillData+0xf4>)
 800d898:	4433      	add	r3, r6
 800d89a:	725a      	strb	r2, [r3, #9]
	for (uint8_t i = 0; i < (newByteCount * 2); i++)
 800d89c:	7dfb      	ldrb	r3, [r7, #23]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	75fb      	strb	r3, [r7, #23]
 800d8a2:	7dfa      	ldrb	r2, [r7, #23]
 800d8a4:	7bbb      	ldrb	r3, [r7, #14]
 800d8a6:	005b      	lsls	r3, r3, #1
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	dbbc      	blt.n	800d826 <SER_FillData+0x62>
	}
}
 800d8ac:	bf00      	nop
 800d8ae:	bf00      	nop
 800d8b0:	3724      	adds	r7, #36	; 0x24
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b8:	20000d0c 	.word	0x20000d0c

0800d8bc <SER_FillBuffer>:

uint8_t SER_FillBuffer (uint8_t newPosition, uint16_t MType)
{
 800d8bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8c0:	b0d2      	sub	sp, #328	; 0x148
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	460a      	mov	r2, r1
 800d8c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	volatile uint8_t Counter = 0;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint8_t ReturnValue = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	if (MType == MTypeSendPartitionBlock)
 800d8de:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800d8e2:	2b21      	cmp	r3, #33	; 0x21
 800d8e4:	d152      	bne.n	800d98c <SER_FillBuffer+0xd0>
	{
		SER_FillData(newPosition, 2, (uint32_t) FLA[pUpdate].Version);
 800d8e6:	4bbd      	ldr	r3, [pc, #756]	; (800dbdc <SER_FillBuffer+0x320>)
 800d8e8:	699b      	ldr	r3, [r3, #24]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	461c      	mov	r4, r3
 800d8ee:	4615      	mov	r5, r2
 800d8f0:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	462b      	mov	r3, r5
 800d8f8:	2102      	movs	r1, #2
 800d8fa:	f7ff ff63 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].LastBlock);
 800d8fe:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800d902:	b2db      	uxtb	r3, r3
 800d904:	3304      	adds	r3, #4
 800d906:	b2da      	uxtb	r2, r3
 800d908:	4613      	mov	r3, r2
 800d90a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800d90e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d912:	4413      	add	r3, r2
 800d914:	b2d8      	uxtb	r0, r3
 800d916:	4bb1      	ldr	r3, [pc, #708]	; (800dbdc <SER_FillBuffer+0x320>)
 800d918:	8bdb      	ldrh	r3, [r3, #30]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	2200      	movs	r2, #0
 800d91e:	4698      	mov	r8, r3
 800d920:	4691      	mov	r9, r2
 800d922:	4642      	mov	r2, r8
 800d924:	464b      	mov	r3, r9
 800d926:	2102      	movs	r1, #2
 800d928:	f7ff ff4c 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].NrOfBlocks);
 800d92c:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800d930:	b2db      	uxtb	r3, r3
 800d932:	3304      	adds	r3, #4
 800d934:	b2da      	uxtb	r2, r3
 800d936:	4613      	mov	r3, r2
 800d938:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800d93c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d940:	4413      	add	r3, r2
 800d942:	b2d8      	uxtb	r0, r3
 800d944:	4ba5      	ldr	r3, [pc, #660]	; (800dbdc <SER_FillBuffer+0x320>)
 800d946:	8c1b      	ldrh	r3, [r3, #32]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	2200      	movs	r2, #0
 800d94c:	469a      	mov	sl, r3
 800d94e:	4693      	mov	fp, r2
 800d950:	4652      	mov	r2, sl
 800d952:	465b      	mov	r3, fp
 800d954:	2102      	movs	r1, #2
 800d956:	f7ff ff35 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Status);
 800d95a:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	3304      	adds	r3, #4
 800d962:	b2da      	uxtb	r2, r3
 800d964:	4613      	mov	r3, r2
 800d966:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800d96a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d96e:	4413      	add	r3, r2
 800d970:	b2d8      	uxtb	r0, r3
 800d972:	4b9a      	ldr	r3, [pc, #616]	; (800dbdc <SER_FillBuffer+0x320>)
 800d974:	7f1b      	ldrb	r3, [r3, #28]
 800d976:	b2db      	uxtb	r3, r3
 800d978:	2200      	movs	r2, #0
 800d97a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800d97e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d982:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800d986:	2102      	movs	r1, #2
 800d988:	f7ff ff1c 	bl	800d7c4 <SER_FillData>
	}
	if ((MType == MTypeGetPartitionInfo) || (MType == MTypeUpgradeApplication) || (MType == MTypeSetPartitionStatus))
 800d98c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800d990:	2b23      	cmp	r3, #35	; 0x23
 800d992:	d008      	beq.n	800d9a6 <SER_FillBuffer+0xea>
 800d994:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800d998:	2b22      	cmp	r3, #34	; 0x22
 800d99a:	d004      	beq.n	800d9a6 <SER_FillBuffer+0xea>
 800d99c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800d9a0:	2b26      	cmp	r3, #38	; 0x26
 800d9a2:	f040 80bc 	bne.w	800db1e <SER_FillBuffer+0x262>
	{
		SER_FillData(newPosition, 2, (uint32_t) FLA[pApplication].Version);
 800d9a6:	4b8d      	ldr	r3, [pc, #564]	; (800dbdc <SER_FillBuffer+0x320>)
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800d9b0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d9b4:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800d9b8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800d9bc:	2102      	movs	r1, #2
 800d9be:	f7ff ff01 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pApplication].Status);
 800d9c2:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800d9d2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d9d6:	4413      	add	r3, r2
 800d9d8:	b2d8      	uxtb	r0, r3
 800d9da:	4b80      	ldr	r3, [pc, #512]	; (800dbdc <SER_FillBuffer+0x320>)
 800d9dc:	7c1b      	ldrb	r3, [r3, #16]
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800d9e6:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800d9ea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800d9ee:	2102      	movs	r1, #2
 800d9f0:	f7ff fee8 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pRollBack].Version);
 800d9f4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	4613      	mov	r3, r2
 800da00:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800da04:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800da08:	4413      	add	r3, r2
 800da0a:	b2d8      	uxtb	r0, r3
 800da0c:	4b73      	ldr	r3, [pc, #460]	; (800dbdc <SER_FillBuffer+0x320>)
 800da0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da10:	2200      	movs	r2, #0
 800da12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800da16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800da1a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800da1e:	2102      	movs	r1, #2
 800da20:	f7ff fed0 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pRollBack].Status);
 800da24:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	3304      	adds	r3, #4
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	4613      	mov	r3, r2
 800da30:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800da34:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800da38:	4413      	add	r3, r2
 800da3a:	b2d8      	uxtb	r0, r3
 800da3c:	4b67      	ldr	r3, [pc, #412]	; (800dbdc <SER_FillBuffer+0x320>)
 800da3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da42:	b2db      	uxtb	r3, r3
 800da44:	2200      	movs	r2, #0
 800da46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800da4a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800da4e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800da52:	2102      	movs	r1, #2
 800da54:	f7ff feb6 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Version);
 800da58:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	3304      	adds	r3, #4
 800da60:	b2da      	uxtb	r2, r3
 800da62:	4613      	mov	r3, r2
 800da64:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800da68:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800da6c:	4413      	add	r3, r2
 800da6e:	b2d8      	uxtb	r0, r3
 800da70:	4b5a      	ldr	r3, [pc, #360]	; (800dbdc <SER_FillBuffer+0x320>)
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	2200      	movs	r2, #0
 800da76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800da7a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800da7e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800da82:	2102      	movs	r1, #2
 800da84:	f7ff fe9e 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].LastBlock);
 800da88:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	3304      	adds	r3, #4
 800da90:	b2da      	uxtb	r2, r3
 800da92:	4613      	mov	r3, r2
 800da94:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800da98:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800da9c:	4413      	add	r3, r2
 800da9e:	b2d8      	uxtb	r0, r3
 800daa0:	4b4e      	ldr	r3, [pc, #312]	; (800dbdc <SER_FillBuffer+0x320>)
 800daa2:	8bdb      	ldrh	r3, [r3, #30]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	2200      	movs	r2, #0
 800daa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800daac:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800dab0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800dab4:	2102      	movs	r1, #2
 800dab6:	f7ff fe85 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].NrOfBlocks);
 800daba:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	3304      	adds	r3, #4
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	4613      	mov	r3, r2
 800dac6:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800daca:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dace:	4413      	add	r3, r2
 800dad0:	b2d8      	uxtb	r0, r3
 800dad2:	4b42      	ldr	r3, [pc, #264]	; (800dbdc <SER_FillBuffer+0x320>)
 800dad4:	8c1b      	ldrh	r3, [r3, #32]
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	2200      	movs	r2, #0
 800dada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dade:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800dae2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800dae6:	2102      	movs	r1, #2
 800dae8:	f7ff fe6c 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pUpdate].Status);
 800daec:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	3304      	adds	r3, #4
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	4613      	mov	r3, r2
 800daf8:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dafc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800db00:	4413      	add	r3, r2
 800db02:	b2d8      	uxtb	r0, r3
 800db04:	4b35      	ldr	r3, [pc, #212]	; (800dbdc <SER_FillBuffer+0x320>)
 800db06:	7f1b      	ldrb	r3, [r3, #28]
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	2200      	movs	r2, #0
 800db0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800db10:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800db14:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800db18:	2102      	movs	r1, #2
 800db1a:	f7ff fe53 	bl	800d7c4 <SER_FillData>
		SER_FillData(4, 1, (uint32_t) MType);
		SER_FillData(newPosition, 2, (uint32_t) BootloaderStatus);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pApplication].Status);
	}
#endif
	if (MType == MTypeGetDummyMode)
 800db1e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800db22:	2b35      	cmp	r3, #53	; 0x35
 800db24:	d164      	bne.n	800dbf0 <SER_FillBuffer+0x334>
		SER_FillData(newPosition, 2, (uint32_t) DUMMYMODE);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODEFILTER);
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODEH3);
#endif
#ifdef GRINDER
		SER_FillData(newPosition, 2, (uint32_t) DUMMYMODEGRINDER);
 800db26:	4b2e      	ldr	r3, [pc, #184]	; (800dbe0 <SER_FillBuffer+0x324>)
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2200      	movs	r2, #0
 800db2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800db32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800db36:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800db3a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800db3e:	2102      	movs	r1, #2
 800db40:	f7ff fe40 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODEFILTER);
 800db44:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	3304      	adds	r3, #4
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	4613      	mov	r3, r2
 800db50:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800db54:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800db58:	4413      	add	r3, r2
 800db5a:	b2d8      	uxtb	r0, r3
 800db5c:	4b21      	ldr	r3, [pc, #132]	; (800dbe4 <SER_FillBuffer+0x328>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	2200      	movs	r2, #0
 800db64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800db68:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800db6c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800db70:	2102      	movs	r1, #2
 800db72:	f7ff fe27 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODERFID);
 800db76:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	3304      	adds	r3, #4
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	4613      	mov	r3, r2
 800db82:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800db86:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800db8a:	4413      	add	r3, r2
 800db8c:	b2d8      	uxtb	r0, r3
 800db8e:	4b16      	ldr	r3, [pc, #88]	; (800dbe8 <SER_FillBuffer+0x32c>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	b2db      	uxtb	r3, r3
 800db94:	2200      	movs	r2, #0
 800db96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800db9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800db9e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800dba2:	2102      	movs	r1, #2
 800dba4:	f7ff fe0e 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) DUMMYMODESCALE);
 800dba8:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	3304      	adds	r3, #4
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dbb8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dbbc:	4413      	add	r3, r2
 800dbbe:	b2d8      	uxtb	r0, r3
 800dbc0:	4b0a      	ldr	r3, [pc, #40]	; (800dbec <SER_FillBuffer+0x330>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dbcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800dbd0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800dbd4:	2102      	movs	r1, #2
 800dbd6:	f7ff fdf5 	bl	800d7c4 <SER_FillData>
 800dbda:	e009      	b.n	800dbf0 <SER_FillBuffer+0x334>
 800dbdc:	20000a04 	.word	0x20000a04
 800dbe0:	2000096f 	.word	0x2000096f
 800dbe4:	20000970 	.word	0x20000970
 800dbe8:	20000971 	.word	0x20000971
 800dbec:	20000972 	.word	0x20000972
#endif
	}
	if (MType == MTypeGetMachineParameters)
 800dbf0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800dbf4:	2b38      	cmp	r3, #56	; 0x38
 800dbf6:	d148      	bne.n	800dc8a <SER_FillBuffer+0x3ce>
#ifdef COFFEEMAKER
		SER_FillData(newPosition, 2, (uint32_t) PUM_GetParameter(PUM_ULPERPULSEP1));
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) PUM_GetParameter(PUM_ULPERPULSEP2));
#endif
#ifdef GRINDER
		SER_FillData(newPosition, 2, (uint32_t) ADJ_GetParameter(ADJ_P));
 800dbf8:	2029      	movs	r0, #41	; 0x29
 800dbfa:	f7f9 f96f 	bl	8006edc <ADJ_GetParameter>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	2200      	movs	r2, #0
 800dc04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc08:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800dc0c:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800dc10:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800dc14:	2102      	movs	r1, #2
 800dc16:	f7ff fdd5 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) ADJ_GetParameter(ADJ_I));
 800dc1a:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	3304      	adds	r3, #4
 800dc22:	b2da      	uxtb	r2, r3
 800dc24:	4613      	mov	r3, r2
 800dc26:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dc2a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dc2e:	4413      	add	r3, r2
 800dc30:	b2dc      	uxtb	r4, r3
 800dc32:	202a      	movs	r0, #42	; 0x2a
 800dc34:	f7f9 f952 	bl	8006edc <ADJ_GetParameter>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dc42:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dc46:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800dc4a:	2102      	movs	r1, #2
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f7ff fdb9 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) ADJ_GetParameter(ADJ_D));
 800dc52:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	3304      	adds	r3, #4
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dc62:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dc66:	4413      	add	r3, r2
 800dc68:	b2dc      	uxtb	r4, r3
 800dc6a:	202b      	movs	r0, #43	; 0x2b
 800dc6c:	f7f9 f936 	bl	8006edc <ADJ_GetParameter>
 800dc70:	4603      	mov	r3, r0
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	2200      	movs	r2, #0
 800dc76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc7a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dc7e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800dc82:	2102      	movs	r1, #2
 800dc84:	4620      	mov	r0, r4
 800dc86:	f7ff fd9d 	bl	800d7c4 <SER_FillData>
#endif
	}
	if ((MType == MTypeGetProcessData)||(MType == MTypeGetAllData))
 800dc8a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800dc8e:	2b32      	cmp	r3, #50	; 0x32
 800dc90:	d004      	beq.n	800dc9c <SER_FillBuffer+0x3e0>
 800dc92:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800dc96:	2b31      	cmp	r3, #49	; 0x31
 800dc98:	f040 8110 	bne.w	800debc <SER_FillBuffer+0x600>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WRK_GetSubStatus());
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) AM_GetHumidity());
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) AM_GetTemperature());
#endif
#ifdef GRINDER
		SER_FillData(newPosition, 2, (uint64_t) REC_GetRequiredWeight());
 800dc9c:	f7fb fa5e 	bl	800915c <REC_GetRequiredWeight>
 800dca0:	4603      	mov	r3, r0
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	2200      	movs	r2, #0
 800dca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dcaa:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800dcae:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800dcb2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800dcb6:	2102      	movs	r1, #2
 800dcb8:	f7ff fd84 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) REC_GetGrindSize());
 800dcbc:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dccc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dcd0:	4413      	add	r3, r2
 800dcd2:	b2dc      	uxtb	r4, r3
 800dcd4:	f7fb fa4c 	bl	8009170 <REC_GetGrindSize>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dce2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800dce6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800dcea:	2102      	movs	r1, #2
 800dcec:	4620      	mov	r0, r4
 800dcee:	f7ff fd69 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) WRK_GetMainStatus());
 800dcf2:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dd02:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dd06:	4413      	add	r3, r2
 800dd08:	b2dc      	uxtb	r4, r3
 800dd0a:	f7fc fce3 	bl	800a6d4 <WRK_GetMainStatus>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2200      	movs	r2, #0
 800dd14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dd18:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dd1c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800dd20:	2102      	movs	r1, #2
 800dd22:	4620      	mov	r0, r4
 800dd24:	f7ff fd4e 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) WRK_GetSubStatus());
 800dd28:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	3304      	adds	r3, #4
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	4613      	mov	r3, r2
 800dd34:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dd38:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dd3c:	4413      	add	r3, r2
 800dd3e:	b2dc      	uxtb	r4, r3
 800dd40:	f7fc fcd2 	bl	800a6e8 <WRK_GetSubStatus>
 800dd44:	4603      	mov	r3, r0
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dd4e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800dd52:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800dd56:	2102      	movs	r1, #2
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7ff fd33 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) FIL_GetStatus());
 800dd5e:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	3304      	adds	r3, #4
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	4613      	mov	r3, r2
 800dd6a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dd6e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dd72:	4413      	add	r3, r2
 800dd74:	b2dc      	uxtb	r4, r3
 800dd76:	f7fd fb77 	bl	800b468 <FIL_GetStatus>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dd84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dd88:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800dd8c:	2102      	movs	r1, #2
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f7ff fd18 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) SLD_GetStatus());
 800dd94:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	4613      	mov	r3, r2
 800dda0:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dda4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800dda8:	4413      	add	r3, r2
 800ddaa:	b2dc      	uxtb	r4, r3
 800ddac:	f7fa fdc4 	bl	8008938 <SLD_GetStatus>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ddba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ddbe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ddc2:	2102      	movs	r1, #2
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f7ff fcfd 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) WRK_GetPrepareStatus());
 800ddca:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	b2da      	uxtb	r2, r3
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800ddda:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ddde:	4413      	add	r3, r2
 800dde0:	b2dc      	uxtb	r4, r3
 800dde2:	f7fc fc6d 	bl	800a6c0 <WRK_GetPrepareStatus>
 800dde6:	4603      	mov	r3, r0
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ddf0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800ddf4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ddf8:	2102      	movs	r1, #2
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f7ff fce2 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) HOP_GetStatus());
 800de00:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800de04:	b2db      	uxtb	r3, r3
 800de06:	3304      	adds	r3, #4
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	4613      	mov	r3, r2
 800de0c:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800de10:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800de14:	4413      	add	r3, r2
 800de16:	b2dc      	uxtb	r4, r3
 800de18:	f7fa ff4e 	bl	8008cb8 <HOP_GetStatus>
 800de1c:	4603      	mov	r3, r0
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	2200      	movs	r2, #0
 800de22:	67bb      	str	r3, [r7, #120]	; 0x78
 800de24:	67fa      	str	r2, [r7, #124]	; 0x7c
 800de26:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800de2a:	2102      	movs	r1, #2
 800de2c:	4620      	mov	r0, r4
 800de2e:	f7ff fcc9 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) GND_GetStatus());
 800de32:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800de36:	b2db      	uxtb	r3, r3
 800de38:	3304      	adds	r3, #4
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	4613      	mov	r3, r2
 800de3e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800de42:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800de46:	4413      	add	r3, r2
 800de48:	b2dc      	uxtb	r4, r3
 800de4a:	f7fa fe51 	bl	8008af0 <GND_GetStatus>
 800de4e:	4603      	mov	r3, r0
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2200      	movs	r2, #0
 800de54:	673b      	str	r3, [r7, #112]	; 0x70
 800de56:	677a      	str	r2, [r7, #116]	; 0x74
 800de58:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800de5c:	2102      	movs	r1, #2
 800de5e:	4620      	mov	r0, r4
 800de60:	f7ff fcb0 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) SCL_GetStatus());
 800de64:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	3304      	adds	r3, #4
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	4613      	mov	r3, r2
 800de70:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800de74:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800de78:	4413      	add	r3, r2
 800de7a:	b2dc      	uxtb	r4, r3
 800de7c:	f7fb fc26 	bl	80096cc <SCL_GetStatus>
 800de80:	4603      	mov	r3, r0
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2200      	movs	r2, #0
 800de86:	66bb      	str	r3, [r7, #104]	; 0x68
 800de88:	66fa      	str	r2, [r7, #108]	; 0x6c
 800de8a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800de8e:	2102      	movs	r1, #2
 800de90:	4620      	mov	r0, r4
 800de92:	f7ff fc97 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, 0); //Sensors not clear why needed
 800de96:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	3304      	adds	r3, #4
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	4613      	mov	r3, r2
 800dea2:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800dea6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800deaa:	4413      	add	r3, r2
 800deac:	b2d8      	uxtb	r0, r3
 800deae:	f04f 0200 	mov.w	r2, #0
 800deb2:	f04f 0300 	mov.w	r3, #0
 800deb6:	2102      	movs	r1, #2
 800deb8:	f7ff fc84 	bl	800d7c4 <SER_FillData>
#endif
	}
	if ((MType == MTypeGetPhysicalData)||(MType == MTypeGetAllData))
 800debc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800dec0:	2b33      	cmp	r3, #51	; 0x33
 800dec2:	d003      	beq.n	800decc <SER_FillBuffer+0x610>
 800dec4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800dec8:	2b31      	cmp	r3, #49	; 0x31
 800deca:	d15a      	bne.n	800df82 <SER_FillBuffer+0x6c6>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) BTN_GetStatus(BTN_COFFEE));
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) BTN_GetDirection(BTN_COFFEE));
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) BTN_GetStatus(BTN_MILK));
#endif
#ifdef GRINDER
		if (Counter == 0)
 800decc:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10e      	bne.n	800def4 <SER_FillBuffer+0x638>
			SER_FillData(newPosition, 2, (uint64_t) ANA_GetSensorValue(ADC_BURRS));
 800ded6:	2000      	movs	r0, #0
 800ded8:	f7f9 fd1a 	bl	8007910 <ANA_GetSensorValue>
 800dedc:	4603      	mov	r3, r0
 800dede:	4618      	mov	r0, r3
 800dee0:	f7f8 fd44 	bl	800696c <__aeabi_f2ulz>
 800dee4:	4602      	mov	r2, r0
 800dee6:	460b      	mov	r3, r1
 800dee8:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800deec:	2102      	movs	r1, #2
 800deee:	f7ff fc69 	bl	800d7c4 <SER_FillData>
 800def2:	e015      	b.n	800df20 <SER_FillBuffer+0x664>
		else
			SER_FillData(newPosition, (Counter+=4), (uint64_t) ANA_GetSensorValue(ADC_BURRS));
 800def4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800def8:	b2db      	uxtb	r3, r3
 800defa:	3304      	adds	r3, #4
 800defc:	b2dc      	uxtb	r4, r3
 800defe:	4623      	mov	r3, r4
 800df00:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800df04:	2000      	movs	r0, #0
 800df06:	f7f9 fd03 	bl	8007910 <ANA_GetSensorValue>
 800df0a:	4603      	mov	r3, r0
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7f8 fd2d 	bl	800696c <__aeabi_f2ulz>
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800df1a:	4621      	mov	r1, r4
 800df1c:	f7ff fc52 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) ANA_GetSensorValue(ADC_MOTOR));
 800df20:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800df24:	b2db      	uxtb	r3, r3
 800df26:	3304      	adds	r3, #4
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	4613      	mov	r3, r2
 800df2c:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800df30:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800df34:	4413      	add	r3, r2
 800df36:	b2dc      	uxtb	r4, r3
 800df38:	2001      	movs	r0, #1
 800df3a:	f7f9 fce9 	bl	8007910 <ANA_GetSensorValue>
 800df3e:	4603      	mov	r3, r0
 800df40:	4618      	mov	r0, r3
 800df42:	f7f8 fd13 	bl	800696c <__aeabi_f2ulz>
 800df46:	4602      	mov	r2, r0
 800df48:	460b      	mov	r3, r1
 800df4a:	2102      	movs	r1, #2
 800df4c:	4620      	mov	r0, r4
 800df4e:	f7ff fc39 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) SCL_GetWeight());
 800df52:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800df56:	b2db      	uxtb	r3, r3
 800df58:	3304      	adds	r3, #4
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	4613      	mov	r3, r2
 800df5e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800df62:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800df66:	4413      	add	r3, r2
 800df68:	b2dc      	uxtb	r4, r3
 800df6a:	f7fb faa9 	bl	80094c0 <SCL_GetWeight>
 800df6e:	4603      	mov	r3, r0
 800df70:	17da      	asrs	r2, r3, #31
 800df72:	663b      	str	r3, [r7, #96]	; 0x60
 800df74:	667a      	str	r2, [r7, #100]	; 0x64
 800df76:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800df7a:	2102      	movs	r1, #2
 800df7c:	4620      	mov	r0, r4
 800df7e:	f7ff fc21 	bl	800d7c4 <SER_FillData>
#endif
	}
#ifndef BOOTLOADER
	if ((MType == MTypeGetDeviceData)||(MType == MTypeGetAllData))
 800df82:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800df86:	2b34      	cmp	r3, #52	; 0x34
 800df88:	d003      	beq.n	800df92 <SER_FillBuffer+0x6d6>
 800df8a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800df8e:	2b31      	cmp	r3, #49	; 0x31
 800df90:	d17b      	bne.n	800e08a <SER_FillBuffer+0x7ce>
	{
		if (Counter == 0)
 800df92:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800df96:	b2db      	uxtb	r3, r3
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d109      	bne.n	800dfb0 <SER_FillBuffer+0x6f4>
			SER_FillData(newPosition, 2, (uint32_t) SERIALNUMBER >> 16);
 800df9c:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800dfa0:	f24f 1245 	movw	r2, #61765	; 0xf145
 800dfa4:	f04f 0300 	mov.w	r3, #0
 800dfa8:	2102      	movs	r1, #2
 800dfaa:	f7ff fc0b 	bl	800d7c4 <SER_FillData>
 800dfae:	e012      	b.n	800dfd6 <SER_FillBuffer+0x71a>
		else
			SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) SERIALNUMBER >> 16);
 800dfb0:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	3304      	adds	r3, #4
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800dfc0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800dfc4:	4413      	add	r3, r2
 800dfc6:	b2d8      	uxtb	r0, r3
 800dfc8:	f24f 1245 	movw	r2, #61765	; 0xf145
 800dfcc:	f04f 0300 	mov.w	r3, #0
 800dfd0:	2102      	movs	r1, #2
 800dfd2:	f7ff fbf7 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) (SERIALNUMBER & 0xffff));
 800dfd6:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	3304      	adds	r3, #4
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800dfe6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800dfea:	4413      	add	r3, r2
 800dfec:	b2d8      	uxtb	r0, r3
 800dfee:	f646 7212 	movw	r2, #28434	; 0x6f12
 800dff2:	f04f 0300 	mov.w	r3, #0
 800dff6:	2102      	movs	r1, #2
 800dff8:	f7ff fbe4 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WRK_GetHardwareVersion());
 800dffc:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e000:	b2db      	uxtb	r3, r3
 800e002:	3304      	adds	r3, #4
 800e004:	b2db      	uxtb	r3, r3
 800e006:	461a      	mov	r2, r3
 800e008:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e00c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e010:	4413      	add	r3, r2
 800e012:	b2dc      	uxtb	r4, r3
 800e014:	f7fd f8f0 	bl	800b1f8 <WRK_GetHardwareVersion>
 800e018:	4603      	mov	r3, r0
 800e01a:	2200      	movs	r2, #0
 800e01c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e01e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e020:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e024:	2102      	movs	r1, #2
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff fbcc 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) WRK_GetSoftwareVersion());
 800e02c:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e030:	b2db      	uxtb	r3, r3
 800e032:	3304      	adds	r3, #4
 800e034:	b2db      	uxtb	r3, r3
 800e036:	461a      	mov	r2, r3
 800e038:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e03c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e040:	4413      	add	r3, r2
 800e042:	b2dc      	uxtb	r4, r3
 800e044:	f7fd f8d0 	bl	800b1e8 <WRK_GetSoftwareVersion>
 800e048:	4603      	mov	r3, r0
 800e04a:	2200      	movs	r2, #0
 800e04c:	653b      	str	r3, [r7, #80]	; 0x50
 800e04e:	657a      	str	r2, [r7, #84]	; 0x54
 800e050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e054:	2102      	movs	r1, #2
 800e056:	4620      	mov	r0, r4
 800e058:	f7ff fbb4 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint32_t) FLA[pBootloader].Version);
 800e05c:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e060:	b2db      	uxtb	r3, r3
 800e062:	3304      	adds	r3, #4
 800e064:	b2db      	uxtb	r3, r3
 800e066:	461a      	mov	r2, r3
 800e068:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e06c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e070:	4413      	add	r3, r2
 800e072:	b2d8      	uxtb	r0, r3
 800e074:	4b81      	ldr	r3, [pc, #516]	; (800e27c <SER_FillBuffer+0x9c0>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2200      	movs	r2, #0
 800e07a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e07c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e07e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e082:	2102      	movs	r1, #2
 800e084:	f7ff fb9e 	bl	800d7c4 <SER_FillData>
 800e088:	e0e5      	b.n	800e256 <SER_FillBuffer+0x99a>
	}
#endif
#ifdef GRINDER
	else if (MType == MTypeGetDosingData)
 800e08a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800e08e:	2b36      	cmp	r3, #54	; 0x36
 800e090:	f040 80ae 	bne.w	800e1f0 <SER_FillBuffer+0x934>
	{
		SER_FillData(newPosition, 2, (uint64_t) HOP.TimeMin);
 800e094:	4b7a      	ldr	r3, [pc, #488]	; (800e280 <SER_FillBuffer+0x9c4>)
 800e096:	885b      	ldrh	r3, [r3, #2]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	2200      	movs	r2, #0
 800e09c:	643b      	str	r3, [r7, #64]	; 0x40
 800e09e:	647a      	str	r2, [r7, #68]	; 0x44
 800e0a0:	f897 013f 	ldrb.w	r0, [r7, #319]	; 0x13f
 800e0a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e0a8:	2102      	movs	r1, #2
 800e0aa:	f7ff fb8b 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) HOP.TimeMax);
 800e0ae:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800e0be:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e0c2:	4413      	add	r3, r2
 800e0c4:	b2d8      	uxtb	r0, r3
 800e0c6:	4b6e      	ldr	r3, [pc, #440]	; (800e280 <SER_FillBuffer+0x9c4>)
 800e0c8:	889b      	ldrh	r3, [r3, #4]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e0d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e0d6:	2102      	movs	r1, #2
 800e0d8:	f7ff fb74 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) HOP.DumpAngle);
 800e0dc:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 800e0ec:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e0f0:	4413      	add	r3, r2
 800e0f2:	b2d8      	uxtb	r0, r3
 800e0f4:	4b62      	ldr	r3, [pc, #392]	; (800e280 <SER_FillBuffer+0x9c4>)
 800e0f6:	799b      	ldrb	r3, [r3, #6]
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	633b      	str	r3, [r7, #48]	; 0x30
 800e0fe:	637a      	str	r2, [r7, #52]	; 0x34
 800e100:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e104:	2102      	movs	r1, #2
 800e106:	f7ff fb5d 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) HOP.DoseAngle);
 800e10a:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	3304      	adds	r3, #4
 800e112:	b2db      	uxtb	r3, r3
 800e114:	461a      	mov	r2, r3
 800e116:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e11a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e11e:	4413      	add	r3, r2
 800e120:	b2d8      	uxtb	r0, r3
 800e122:	4b57      	ldr	r3, [pc, #348]	; (800e280 <SER_FillBuffer+0x9c4>)
 800e124:	79db      	ldrb	r3, [r3, #7]
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2200      	movs	r2, #0
 800e12a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e12c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e12e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e132:	2102      	movs	r1, #2
 800e134:	f7ff fb46 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) HOP.DoseStepsMax);
 800e138:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	3304      	adds	r3, #4
 800e140:	b2db      	uxtb	r3, r3
 800e142:	461a      	mov	r2, r3
 800e144:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e148:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e14c:	4413      	add	r3, r2
 800e14e:	b2d8      	uxtb	r0, r3
 800e150:	4b4b      	ldr	r3, [pc, #300]	; (800e280 <SER_FillBuffer+0x9c4>)
 800e152:	7a1b      	ldrb	r3, [r3, #8]
 800e154:	b2db      	uxtb	r3, r3
 800e156:	2200      	movs	r2, #0
 800e158:	623b      	str	r3, [r7, #32]
 800e15a:	627a      	str	r2, [r7, #36]	; 0x24
 800e15c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e160:	2102      	movs	r1, #2
 800e162:	f7ff fb2f 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) SCL.StableTime);
 800e166:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	3304      	adds	r3, #4
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	461a      	mov	r2, r3
 800e172:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e176:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e17a:	4413      	add	r3, r2
 800e17c:	b2d8      	uxtb	r0, r3
 800e17e:	4b41      	ldr	r3, [pc, #260]	; (800e284 <SER_FillBuffer+0x9c8>)
 800e180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e182:	17da      	asrs	r2, r3, #31
 800e184:	61bb      	str	r3, [r7, #24]
 800e186:	61fa      	str	r2, [r7, #28]
 800e188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e18c:	2102      	movs	r1, #2
 800e18e:	f7ff fb19 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) HOP.ClosedPulseTime);
 800e192:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e196:	b2db      	uxtb	r3, r3
 800e198:	3304      	adds	r3, #4
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	461a      	mov	r2, r3
 800e19e:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e1a2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e1a6:	4413      	add	r3, r2
 800e1a8:	b2d8      	uxtb	r0, r3
 800e1aa:	4b35      	ldr	r3, [pc, #212]	; (800e280 <SER_FillBuffer+0x9c4>)
 800e1ac:	8b9b      	ldrh	r3, [r3, #28]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	613b      	str	r3, [r7, #16]
 800e1b4:	617a      	str	r2, [r7, #20]
 800e1b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e1ba:	2102      	movs	r1, #2
 800e1bc:	f7ff fb02 	bl	800d7c4 <SER_FillData>
		SER_FillData(newPosition+(Counter+=4), 2, (uint64_t) HOP.OpenedPulseTime);
 800e1c0:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	3304      	adds	r3, #4
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e1d0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e1d4:	4413      	add	r3, r2
 800e1d6:	b2d8      	uxtb	r0, r3
 800e1d8:	4b29      	ldr	r3, [pc, #164]	; (800e280 <SER_FillBuffer+0x9c4>)
 800e1da:	8bdb      	ldrh	r3, [r3, #30]
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	2200      	movs	r2, #0
 800e1e0:	60bb      	str	r3, [r7, #8]
 800e1e2:	60fa      	str	r2, [r7, #12]
 800e1e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e1e8:	2102      	movs	r1, #2
 800e1ea:	f7ff faeb 	bl	800d7c4 <SER_FillData>
 800e1ee:	e032      	b.n	800e256 <SER_FillBuffer+0x99a>
	}
	else if (MType == MTypeGetConsumableData)
 800e1f0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800e1f4:	2b61      	cmp	r3, #97	; 0x61
 800e1f6:	d12e      	bne.n	800e256 <SER_FillBuffer+0x99a>
	{

		for (uint8_t i=0; i < TAGDATACOUNT; i++)
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800e1fe:	e026      	b.n	800e24e <SER_FillBuffer+0x992>
		{
			SER_FillData(newPosition + Counter, 2, (uint64_t) CON.CardMemory[i]);
 800e200:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e204:	b2da      	uxtb	r2, r3
 800e206:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e20a:	4413      	add	r3, r2
 800e20c:	b2d8      	uxtb	r0, r3
 800e20e:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800e212:	4a1d      	ldr	r2, [pc, #116]	; (800e288 <SER_FillBuffer+0x9cc>)
 800e214:	4413      	add	r3, r2
 800e216:	785b      	ldrb	r3, [r3, #1]
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	2200      	movs	r2, #0
 800e21c:	603b      	str	r3, [r7, #0]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e224:	2102      	movs	r1, #2
 800e226:	f7ff facd 	bl	800d7c4 <SER_FillData>
			if (TAGDATACOUNT - i > 1) Counter += 4;
 800e22a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800e22e:	f1c3 033a 	rsb	r3, r3, #58	; 0x3a
 800e232:	2b01      	cmp	r3, #1
 800e234:	dd06      	ble.n	800e244 <SER_FillBuffer+0x988>
 800e236:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	3304      	adds	r3, #4
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
		for (uint8_t i=0; i < TAGDATACOUNT; i++)
 800e244:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800e248:	3301      	adds	r3, #1
 800e24a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800e24e:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800e252:	2b39      	cmp	r3, #57	; 0x39
 800e254:	d9d4      	bls.n	800e200 <SER_FillBuffer+0x944>
		}
	}
#endif
	ReturnValue = (Counter+=4);
 800e256:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	3304      	adds	r3, #4
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	461a      	mov	r2, r3
 800e262:	f887 2145 	strb.w	r2, [r7, #325]	; 0x145
 800e266:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	return ReturnValue;
 800e26a:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
}
 800e26e:	4618      	mov	r0, r3
 800e270:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800e274:	46bd      	mov	sp, r7
 800e276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e27a:	bf00      	nop
 800e27c:	20000a04 	.word	0x20000a04
 800e280:	20000568 	.word	0x20000568
 800e284:	200005dc 	.word	0x200005dc
 800e288:	200001d4 	.word	0x200001d4

0800e28c <SER_Handle>:
//-----------------------------------------------------------------------------
//! \brief      Handles the serial actions
//! \details    Process the message
//! \params     None
void SER_Handle (void)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	af00      	add	r7, sp, #0
	SER_ProcessMessage();
 800e290:	f000 f828 	bl	800e2e4 <SER_ProcessMessage>
	if(HAL_UART_GetError(&huart2))
 800e294:	4810      	ldr	r0, [pc, #64]	; (800e2d8 <SER_Handle+0x4c>)
 800e296:	f005 fbf1 	bl	8013a7c <HAL_UART_GetError>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d009      	beq.n	800e2b4 <SER_Handle+0x28>
	{
		HAL_UART_DMAStop(&huart2);
 800e2a0:	480d      	ldr	r0, [pc, #52]	; (800e2d8 <SER_Handle+0x4c>)
 800e2a2:	f005 f9bf 	bl	8013624 <HAL_UART_DMAStop>
		MX_USART2_UART_Init();
 800e2a6:	f7fb ffe7 	bl	800a278 <MX_USART2_UART_Init>
		HAL_UART_Receive_DMA(&huart2, &Message.RxBuffer, 1);
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	490b      	ldr	r1, [pc, #44]	; (800e2dc <SER_Handle+0x50>)
 800e2ae:	480a      	ldr	r0, [pc, #40]	; (800e2d8 <SER_Handle+0x4c>)
 800e2b0:	f005 f988 	bl	80135c4 <HAL_UART_Receive_DMA>
	}
	if(HAL_UART_GetError(&huart3))
 800e2b4:	480a      	ldr	r0, [pc, #40]	; (800e2e0 <SER_Handle+0x54>)
 800e2b6:	f005 fbe1 	bl	8013a7c <HAL_UART_GetError>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d009      	beq.n	800e2d4 <SER_Handle+0x48>
	{
		HAL_UART_DMAStop(&huart3);
 800e2c0:	4807      	ldr	r0, [pc, #28]	; (800e2e0 <SER_Handle+0x54>)
 800e2c2:	f005 f9af 	bl	8013624 <HAL_UART_DMAStop>
		MX_USART2_UART_Init();
 800e2c6:	f7fb ffd7 	bl	800a278 <MX_USART2_UART_Init>
		HAL_UART_Receive_DMA(&huart3, &Message.RxBuffer, 1);
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	4903      	ldr	r1, [pc, #12]	; (800e2dc <SER_Handle+0x50>)
 800e2ce:	4804      	ldr	r0, [pc, #16]	; (800e2e0 <SER_Handle+0x54>)
 800e2d0:	f005 f978 	bl	80135c4 <HAL_UART_Receive_DMA>
	}
}
 800e2d4:	bf00      	nop
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20000848 	.word	0x20000848
 800e2dc:	20000d0c 	.word	0x20000d0c
 800e2e0:	2000088c 	.word	0x2000088c

0800e2e4 <SER_ProcessMessage>:
//-----------------------------------------------------------------------------
//! \brief      Processes the message
//! \details    Checks if the complete message is received and if so processes it
//! \param      None
void SER_ProcessMessage (void)
{
 800e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e8:	b08f      	sub	sp, #60	; 0x3c
 800e2ea:	af08      	add	r7, sp, #32
	uint8_t DataLength;

	if	((Message.Counter > 0) &&(Message.Counter == Message.Length))  //Message received completely
 800e2ec:	4b95      	ldr	r3, [pc, #596]	; (800e544 <SER_ProcessMessage+0x260>)
 800e2ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f340 8285 	ble.w	800e802 <SER_ProcessMessage+0x51e>
 800e2f8:	4b92      	ldr	r3, [pc, #584]	; (800e544 <SER_ProcessMessage+0x260>)
 800e2fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e2fe:	461a      	mov	r2, r3
 800e300:	4b90      	ldr	r3, [pc, #576]	; (800e544 <SER_ProcessMessage+0x260>)
 800e302:	789b      	ldrb	r3, [r3, #2]
 800e304:	429a      	cmp	r2, r3
 800e306:	f040 827c 	bne.w	800e802 <SER_ProcessMessage+0x51e>
	{
		SER_Busy = 1;
 800e30a:	4b8f      	ldr	r3, [pc, #572]	; (800e548 <SER_ProcessMessage+0x264>)
 800e30c:	2201      	movs	r2, #1
 800e30e:	701a      	strb	r2, [r3, #0]
		//Check CRC
#ifndef BOOTLOADER
		WRK_ResetAction(); //Cancel the current action in case this is pending as the return message is scrambled.
 800e310:	f7fc fec2 	bl	800b098 <WRK_ResetAction>
#endif
		CalculatedCRC = CalculateCRC8(Message.RxData, Message.Length);
 800e314:	4b8b      	ldr	r3, [pc, #556]	; (800e544 <SER_ProcessMessage+0x260>)
 800e316:	789b      	ldrb	r3, [r3, #2]
 800e318:	4619      	mov	r1, r3
 800e31a:	488c      	ldr	r0, [pc, #560]	; (800e54c <SER_ProcessMessage+0x268>)
 800e31c:	f7fc fff4 	bl	800b308 <CalculateCRC8>
 800e320:	4603      	mov	r3, r0
 800e322:	461a      	mov	r2, r3
 800e324:	4b8a      	ldr	r3, [pc, #552]	; (800e550 <SER_ProcessMessage+0x26c>)
 800e326:	701a      	strb	r2, [r3, #0]
		if (CalculatedCRC != Message.CRCValue) //Invalid CRC.
 800e328:	4b86      	ldr	r3, [pc, #536]	; (800e544 <SER_ProcessMessage+0x260>)
 800e32a:	791a      	ldrb	r2, [r3, #4]
 800e32c:	4b88      	ldr	r3, [pc, #544]	; (800e550 <SER_ProcessMessage+0x26c>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d004      	beq.n	800e33e <SER_ProcessMessage+0x5a>
		{
			SER_SendReturnMessage (10,MStatCRCError);
 800e334:	2111      	movs	r1, #17
 800e336:	200a      	movs	r0, #10
 800e338:	f7ff f94a 	bl	800d5d0 <SER_SendReturnMessage>
		else //Message type is unknown
		{
			SER_SendReturnMessage (10,MStatUnknownType);
		}
	}
}
 800e33c:	e261      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.UARTVersion != UARTVERSION)
 800e33e:	4b81      	ldr	r3, [pc, #516]	; (800e544 <SER_ProcessMessage+0x260>)
 800e340:	785b      	ldrb	r3, [r3, #1]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d004      	beq.n	800e350 <SER_ProcessMessage+0x6c>
			SER_SendReturnMessage (10,MStatUARTVersionError);
 800e346:	2115      	movs	r1, #21
 800e348:	200a      	movs	r0, #10
 800e34a:	f7ff f941 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e34e:	e258      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if ((Message.MType & 0xF0) == 0x00) //Message is a recipe
 800e350:	4b7c      	ldr	r3, [pc, #496]	; (800e544 <SER_ProcessMessage+0x260>)
 800e352:	78db      	ldrb	r3, [r3, #3]
 800e354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d102      	bne.n	800e362 <SER_ProcessMessage+0x7e>
			SER_HandleRecipe();
 800e35c:	f000 fb12 	bl	800e984 <SER_HandleRecipe>
}
 800e360:	e24f      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if ((Message.MType & 0xF0) == 0x10) //Message is a recipe action
 800e362:	4b78      	ldr	r3, [pc, #480]	; (800e544 <SER_ProcessMessage+0x260>)
 800e364:	78db      	ldrb	r3, [r3, #3]
 800e366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e36a:	2b10      	cmp	r3, #16
 800e36c:	d108      	bne.n	800e380 <SER_ProcessMessage+0x9c>
				Message.Counter = 0;
 800e36e:	4b75      	ldr	r3, [pc, #468]	; (800e544 <SER_ProcessMessage+0x260>)
 800e370:	2200      	movs	r2, #0
 800e372:	80da      	strh	r2, [r3, #6]
				WRK_SetAction (Message.MType);
 800e374:	4b73      	ldr	r3, [pc, #460]	; (800e544 <SER_ProcessMessage+0x260>)
 800e376:	78db      	ldrb	r3, [r3, #3]
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fc fe5b 	bl	800b034 <WRK_SetAction>
}
 800e37e:	e240      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetProcessData)
 800e380:	4b70      	ldr	r3, [pc, #448]	; (800e544 <SER_ProcessMessage+0x260>)
 800e382:	78db      	ldrb	r3, [r3, #3]
 800e384:	2b32      	cmp	r3, #50	; 0x32
 800e386:	d110      	bne.n	800e3aa <SER_ProcessMessage+0xc6>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e388:	4b6e      	ldr	r3, [pc, #440]	; (800e544 <SER_ProcessMessage+0x260>)
 800e38a:	78db      	ldrb	r3, [r3, #3]
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	4619      	mov	r1, r3
 800e390:	200a      	movs	r0, #10
 800e392:	f7ff fa93 	bl	800d8bc <SER_FillBuffer>
 800e396:	4603      	mov	r3, r0
 800e398:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e39a:	7dbb      	ldrb	r3, [r7, #22]
 800e39c:	330a      	adds	r3, #10
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	2101      	movs	r1, #1
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7ff f914 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e3a8:	e22b      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetPhysicalData)
 800e3aa:	4b66      	ldr	r3, [pc, #408]	; (800e544 <SER_ProcessMessage+0x260>)
 800e3ac:	78db      	ldrb	r3, [r3, #3]
 800e3ae:	2b33      	cmp	r3, #51	; 0x33
 800e3b0:	d110      	bne.n	800e3d4 <SER_ProcessMessage+0xf0>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e3b2:	4b64      	ldr	r3, [pc, #400]	; (800e544 <SER_ProcessMessage+0x260>)
 800e3b4:	78db      	ldrb	r3, [r3, #3]
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	200a      	movs	r0, #10
 800e3bc:	f7ff fa7e 	bl	800d8bc <SER_FillBuffer>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e3c4:	7dbb      	ldrb	r3, [r7, #22]
 800e3c6:	330a      	adds	r3, #10
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	2101      	movs	r1, #1
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7ff f8ff 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e3d2:	e216      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetDeviceData)
 800e3d4:	4b5b      	ldr	r3, [pc, #364]	; (800e544 <SER_ProcessMessage+0x260>)
 800e3d6:	78db      	ldrb	r3, [r3, #3]
 800e3d8:	2b34      	cmp	r3, #52	; 0x34
 800e3da:	d110      	bne.n	800e3fe <SER_ProcessMessage+0x11a>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e3dc:	4b59      	ldr	r3, [pc, #356]	; (800e544 <SER_ProcessMessage+0x260>)
 800e3de:	78db      	ldrb	r3, [r3, #3]
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	200a      	movs	r0, #10
 800e3e6:	f7ff fa69 	bl	800d8bc <SER_FillBuffer>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e3ee:	7dbb      	ldrb	r3, [r7, #22]
 800e3f0:	330a      	adds	r3, #10
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7ff f8ea 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e3fc:	e201      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetAllData)
 800e3fe:	4b51      	ldr	r3, [pc, #324]	; (800e544 <SER_ProcessMessage+0x260>)
 800e400:	78db      	ldrb	r3, [r3, #3]
 800e402:	2b31      	cmp	r3, #49	; 0x31
 800e404:	d110      	bne.n	800e428 <SER_ProcessMessage+0x144>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e406:	4b4f      	ldr	r3, [pc, #316]	; (800e544 <SER_ProcessMessage+0x260>)
 800e408:	78db      	ldrb	r3, [r3, #3]
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	4619      	mov	r1, r3
 800e40e:	200a      	movs	r0, #10
 800e410:	f7ff fa54 	bl	800d8bc <SER_FillBuffer>
 800e414:	4603      	mov	r3, r0
 800e416:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e418:	7dbb      	ldrb	r3, [r7, #22]
 800e41a:	330a      	adds	r3, #10
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2101      	movs	r1, #1
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff f8d5 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e426:	e1ec      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetDummyMode)
 800e428:	4b46      	ldr	r3, [pc, #280]	; (800e544 <SER_ProcessMessage+0x260>)
 800e42a:	78db      	ldrb	r3, [r3, #3]
 800e42c:	2b35      	cmp	r3, #53	; 0x35
 800e42e:	d110      	bne.n	800e452 <SER_ProcessMessage+0x16e>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e430:	4b44      	ldr	r3, [pc, #272]	; (800e544 <SER_ProcessMessage+0x260>)
 800e432:	78db      	ldrb	r3, [r3, #3]
 800e434:	b29b      	uxth	r3, r3
 800e436:	4619      	mov	r1, r3
 800e438:	200a      	movs	r0, #10
 800e43a:	f7ff fa3f 	bl	800d8bc <SER_FillBuffer>
 800e43e:	4603      	mov	r3, r0
 800e440:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e442:	7dbb      	ldrb	r3, [r7, #22]
 800e444:	330a      	adds	r3, #10
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2101      	movs	r1, #1
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7ff f8c0 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e450:	e1d7      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetMachineParameters)
 800e452:	4b3c      	ldr	r3, [pc, #240]	; (800e544 <SER_ProcessMessage+0x260>)
 800e454:	78db      	ldrb	r3, [r3, #3]
 800e456:	2b38      	cmp	r3, #56	; 0x38
 800e458:	d110      	bne.n	800e47c <SER_ProcessMessage+0x198>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e45a:	4b3a      	ldr	r3, [pc, #232]	; (800e544 <SER_ProcessMessage+0x260>)
 800e45c:	78db      	ldrb	r3, [r3, #3]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	4619      	mov	r1, r3
 800e462:	200a      	movs	r0, #10
 800e464:	f7ff fa2a 	bl	800d8bc <SER_FillBuffer>
 800e468:	4603      	mov	r3, r0
 800e46a:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e46c:	7dbb      	ldrb	r3, [r7, #22]
 800e46e:	330a      	adds	r3, #10
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2101      	movs	r1, #1
 800e474:	4618      	mov	r0, r3
 800e476:	f7ff f8ab 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e47a:	e1c2      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeReboot)
 800e47c:	4b31      	ldr	r3, [pc, #196]	; (800e544 <SER_ProcessMessage+0x260>)
 800e47e:	78db      	ldrb	r3, [r3, #3]
 800e480:	2b51      	cmp	r3, #81	; 0x51
 800e482:	d106      	bne.n	800e492 <SER_ProcessMessage+0x1ae>
			SER_SendReturnMessage (10,MStatSuccess);
 800e484:	2101      	movs	r1, #1
 800e486:	200a      	movs	r0, #10
 800e488:	f7ff f8a2 	bl	800d5d0 <SER_SendReturnMessage>
			HAL_NVIC_SystemReset();
 800e48c:	f001 fb45 	bl	800fb1a <HAL_NVIC_SystemReset>
}
 800e490:	e1b7      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if ((Message.MType & 0xF0) == 0x50)
 800e492:	4b2c      	ldr	r3, [pc, #176]	; (800e544 <SER_ProcessMessage+0x260>)
 800e494:	78db      	ldrb	r3, [r3, #3]
 800e496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e49a:	2b50      	cmp	r3, #80	; 0x50
 800e49c:	d108      	bne.n	800e4b0 <SER_ProcessMessage+0x1cc>
			Message.Counter = 0;
 800e49e:	4b29      	ldr	r3, [pc, #164]	; (800e544 <SER_ProcessMessage+0x260>)
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	80da      	strh	r2, [r3, #6]
			WRK_SetAction (Message.MType);
 800e4a4:	4b27      	ldr	r3, [pc, #156]	; (800e544 <SER_ProcessMessage+0x260>)
 800e4a6:	78db      	ldrb	r3, [r3, #3]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7fc fdc3 	bl	800b034 <WRK_SetAction>
}
 800e4ae:	e1a8      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeSendPartitionBlock) //Application upgrade is being sent
 800e4b0:	4b24      	ldr	r3, [pc, #144]	; (800e544 <SER_ProcessMessage+0x260>)
 800e4b2:	78db      	ldrb	r3, [r3, #3]
 800e4b4:	2b21      	cmp	r3, #33	; 0x21
 800e4b6:	d102      	bne.n	800e4be <SER_ProcessMessage+0x1da>
			FLA_HandleSendPartitionBlock();
 800e4b8:	f7fd f8b0 	bl	800b61c <FLA_HandleSendPartitionBlock>
}
 800e4bc:	e1a1      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeUpgradeApplication)
 800e4be:	4b21      	ldr	r3, [pc, #132]	; (800e544 <SER_ProcessMessage+0x260>)
 800e4c0:	78db      	ldrb	r3, [r3, #3]
 800e4c2:	2b22      	cmp	r3, #34	; 0x22
 800e4c4:	d102      	bne.n	800e4cc <SER_ProcessMessage+0x1e8>
			FLA_HandleUpgradeApplication();
 800e4c6:	f7fd f87f 	bl	800b5c8 <FLA_HandleUpgradeApplication>
}
 800e4ca:	e19a      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeRestorePartition)
 800e4cc:	4b1d      	ldr	r3, [pc, #116]	; (800e544 <SER_ProcessMessage+0x260>)
 800e4ce:	78db      	ldrb	r3, [r3, #3]
 800e4d0:	2b29      	cmp	r3, #41	; 0x29
 800e4d2:	d102      	bne.n	800e4da <SER_ProcessMessage+0x1f6>
			FLA_RestorePartition();
 800e4d4:	f7fd f84c 	bl	800b570 <FLA_RestorePartition>
}
 800e4d8:	e193      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetPartitionInfo) //Get image info in flash
 800e4da:	4b1a      	ldr	r3, [pc, #104]	; (800e544 <SER_ProcessMessage+0x260>)
 800e4dc:	78db      	ldrb	r3, [r3, #3]
 800e4de:	2b23      	cmp	r3, #35	; 0x23
 800e4e0:	d110      	bne.n	800e504 <SER_ProcessMessage+0x220>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e4e2:	4b18      	ldr	r3, [pc, #96]	; (800e544 <SER_ProcessMessage+0x260>)
 800e4e4:	78db      	ldrb	r3, [r3, #3]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	200a      	movs	r0, #10
 800e4ec:	f7ff f9e6 	bl	800d8bc <SER_FillBuffer>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e4f4:	7dbb      	ldrb	r3, [r7, #22]
 800e4f6:	330a      	adds	r3, #10
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	2101      	movs	r1, #1
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7ff f867 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e502:	e17e      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeSetPartitionStatus) //Application upgrade is being sent
 800e504:	4b0f      	ldr	r3, [pc, #60]	; (800e544 <SER_ProcessMessage+0x260>)
 800e506:	78db      	ldrb	r3, [r3, #3]
 800e508:	2b26      	cmp	r3, #38	; 0x26
 800e50a:	d123      	bne.n	800e554 <SER_ProcessMessage+0x270>
			FLA_SetStatus(pUpdate,(enuFLA) SER_GetValue (10,2));
 800e50c:	2102      	movs	r1, #2
 800e50e:	200a      	movs	r0, #10
 800e510:	f7ff f8ee 	bl	800d6f0 <SER_GetValue>
 800e514:	4603      	mov	r3, r0
 800e516:	b2db      	uxtb	r3, r3
 800e518:	4619      	mov	r1, r3
 800e51a:	2002      	movs	r0, #2
 800e51c:	f7fd f988 	bl	800b830 <FLA_SetStatus>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e520:	4b08      	ldr	r3, [pc, #32]	; (800e544 <SER_ProcessMessage+0x260>)
 800e522:	78db      	ldrb	r3, [r3, #3]
 800e524:	b29b      	uxth	r3, r3
 800e526:	4619      	mov	r1, r3
 800e528:	200a      	movs	r0, #10
 800e52a:	f7ff f9c7 	bl	800d8bc <SER_FillBuffer>
 800e52e:	4603      	mov	r3, r0
 800e530:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e532:	7dbb      	ldrb	r3, [r7, #22]
 800e534:	330a      	adds	r3, #10
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2101      	movs	r1, #1
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7ff f848 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e540:	e15f      	b.n	800e802 <SER_ProcessMessage+0x51e>
 800e542:	bf00      	nop
 800e544:	20000d0c 	.word	0x20000d0c
 800e548:	20000e15 	.word	0x20000e15
 800e54c:	20000d15 	.word	0x20000d15
 800e550:	20000d08 	.word	0x20000d08
		else if (Message.MType == MTypeSetLED)
 800e554:	4bad      	ldr	r3, [pc, #692]	; (800e80c <SER_ProcessMessage+0x528>)
 800e556:	78db      	ldrb	r3, [r3, #3]
 800e558:	2b41      	cmp	r3, #65	; 0x41
 800e55a:	d15a      	bne.n	800e612 <SER_ProcessMessage+0x32e>
			LED_Set(SER_GetValue (12,1), SER_GetValue (13,1), SER_GetValue (14,2), SER_GetValue (16,2), SER_GetValue (18,2), SER_GetValue (20,2), SER_GetValue (22,4), SER_GetValue (26,4), SER_GetValue (30,2), SER_GetValue (32,4), SER_GetValue (36,2));
 800e55c:	2101      	movs	r1, #1
 800e55e:	200c      	movs	r0, #12
 800e560:	f7ff f8c6 	bl	800d6f0 <SER_GetValue>
 800e564:	4603      	mov	r3, r0
 800e566:	fa5f f883 	uxtb.w	r8, r3
 800e56a:	2101      	movs	r1, #1
 800e56c:	200d      	movs	r0, #13
 800e56e:	f7ff f8bf 	bl	800d6f0 <SER_GetValue>
 800e572:	4603      	mov	r3, r0
 800e574:	fa5f f983 	uxtb.w	r9, r3
 800e578:	2102      	movs	r1, #2
 800e57a:	200e      	movs	r0, #14
 800e57c:	f7ff f8b8 	bl	800d6f0 <SER_GetValue>
 800e580:	4603      	mov	r3, r0
 800e582:	fa5f fa83 	uxtb.w	sl, r3
 800e586:	2102      	movs	r1, #2
 800e588:	2010      	movs	r0, #16
 800e58a:	f7ff f8b1 	bl	800d6f0 <SER_GetValue>
 800e58e:	4603      	mov	r3, r0
 800e590:	fa5f fb83 	uxtb.w	fp, r3
 800e594:	2102      	movs	r1, #2
 800e596:	2012      	movs	r0, #18
 800e598:	f7ff f8aa 	bl	800d6f0 <SER_GetValue>
 800e59c:	4603      	mov	r3, r0
 800e59e:	b2dc      	uxtb	r4, r3
 800e5a0:	2102      	movs	r1, #2
 800e5a2:	2014      	movs	r0, #20
 800e5a4:	f7ff f8a4 	bl	800d6f0 <SER_GetValue>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	b2dd      	uxtb	r5, r3
 800e5ac:	2104      	movs	r1, #4
 800e5ae:	2016      	movs	r0, #22
 800e5b0:	f7ff f89e 	bl	800d6f0 <SER_GetValue>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	60fb      	str	r3, [r7, #12]
 800e5b8:	2104      	movs	r1, #4
 800e5ba:	201a      	movs	r0, #26
 800e5bc:	f7ff f898 	bl	800d6f0 <SER_GetValue>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	60bb      	str	r3, [r7, #8]
 800e5c4:	2102      	movs	r1, #2
 800e5c6:	201e      	movs	r0, #30
 800e5c8:	f7ff f892 	bl	800d6f0 <SER_GetValue>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	b2de      	uxtb	r6, r3
 800e5d0:	2104      	movs	r1, #4
 800e5d2:	2020      	movs	r0, #32
 800e5d4:	f7ff f88c 	bl	800d6f0 <SER_GetValue>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	607b      	str	r3, [r7, #4]
 800e5dc:	2102      	movs	r1, #2
 800e5de:	2024      	movs	r0, #36	; 0x24
 800e5e0:	f7ff f886 	bl	800d6f0 <SER_GetValue>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	9306      	str	r3, [sp, #24]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	9205      	str	r2, [sp, #20]
 800e5ee:	9604      	str	r6, [sp, #16]
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	9203      	str	r2, [sp, #12]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	9302      	str	r3, [sp, #8]
 800e5f8:	9501      	str	r5, [sp, #4]
 800e5fa:	9400      	str	r4, [sp, #0]
 800e5fc:	465b      	mov	r3, fp
 800e5fe:	4652      	mov	r2, sl
 800e600:	4649      	mov	r1, r9
 800e602:	4640      	mov	r0, r8
 800e604:	f7fd fc32 	bl	800be6c <LED_Set>
			SER_SendReturnMessage (10,MStatSuccess);
 800e608:	2101      	movs	r1, #1
 800e60a:	200a      	movs	r0, #10
 800e60c:	f7fe ffe0 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e610:	e0f7      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetDosingData)
 800e612:	4b7e      	ldr	r3, [pc, #504]	; (800e80c <SER_ProcessMessage+0x528>)
 800e614:	78db      	ldrb	r3, [r3, #3]
 800e616:	2b36      	cmp	r3, #54	; 0x36
 800e618:	d110      	bne.n	800e63c <SER_ProcessMessage+0x358>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e61a:	4b7c      	ldr	r3, [pc, #496]	; (800e80c <SER_ProcessMessage+0x528>)
 800e61c:	78db      	ldrb	r3, [r3, #3]
 800e61e:	b29b      	uxth	r3, r3
 800e620:	4619      	mov	r1, r3
 800e622:	200a      	movs	r0, #10
 800e624:	f7ff f94a 	bl	800d8bc <SER_FillBuffer>
 800e628:	4603      	mov	r3, r0
 800e62a:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e62c:	7dbb      	ldrb	r3, [r7, #22]
 800e62e:	330a      	adds	r3, #10
 800e630:	b2db      	uxtb	r3, r3
 800e632:	2101      	movs	r1, #1
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe ffcb 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e63a:	e0e2      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeSetDosingData)
 800e63c:	4b73      	ldr	r3, [pc, #460]	; (800e80c <SER_ProcessMessage+0x528>)
 800e63e:	78db      	ldrb	r3, [r3, #3]
 800e640:	2b43      	cmp	r3, #67	; 0x43
 800e642:	d14c      	bne.n	800e6de <SER_ProcessMessage+0x3fa>
			HOP_SetParameter(HOP_TIMEMIN, SER_GetValue (12,4));
 800e644:	2104      	movs	r1, #4
 800e646:	200c      	movs	r0, #12
 800e648:	f7ff f852 	bl	800d6f0 <SER_GetValue>
 800e64c:	4603      	mov	r3, r0
 800e64e:	4619      	mov	r1, r3
 800e650:	200a      	movs	r0, #10
 800e652:	f7fa fa97 	bl	8008b84 <HOP_SetParameter>
			HOP_SetParameter(HOP_TIMEMAX, SER_GetValue (16,4));
 800e656:	2104      	movs	r1, #4
 800e658:	2010      	movs	r0, #16
 800e65a:	f7ff f849 	bl	800d6f0 <SER_GetValue>
 800e65e:	4603      	mov	r3, r0
 800e660:	4619      	mov	r1, r3
 800e662:	200b      	movs	r0, #11
 800e664:	f7fa fa8e 	bl	8008b84 <HOP_SetParameter>
			HOP_SetParameter(HOP_DUMPANGLE, SER_GetValue (20,4));
 800e668:	2104      	movs	r1, #4
 800e66a:	2014      	movs	r0, #20
 800e66c:	f7ff f840 	bl	800d6f0 <SER_GetValue>
 800e670:	4603      	mov	r3, r0
 800e672:	4619      	mov	r1, r3
 800e674:	200c      	movs	r0, #12
 800e676:	f7fa fa85 	bl	8008b84 <HOP_SetParameter>
			HOP_SetParameter(HOP_DOSEANGLE, SER_GetValue (24,4));
 800e67a:	2104      	movs	r1, #4
 800e67c:	2018      	movs	r0, #24
 800e67e:	f7ff f837 	bl	800d6f0 <SER_GetValue>
 800e682:	4603      	mov	r3, r0
 800e684:	4619      	mov	r1, r3
 800e686:	200d      	movs	r0, #13
 800e688:	f7fa fa7c 	bl	8008b84 <HOP_SetParameter>
			HOP_SetParameter(HOP_DOSESTEPSMAX, SER_GetValue (28,4));
 800e68c:	2104      	movs	r1, #4
 800e68e:	201c      	movs	r0, #28
 800e690:	f7ff f82e 	bl	800d6f0 <SER_GetValue>
 800e694:	4603      	mov	r3, r0
 800e696:	4619      	mov	r1, r3
 800e698:	200e      	movs	r0, #14
 800e69a:	f7fa fa73 	bl	8008b84 <HOP_SetParameter>
			SCL_SetParameter(SCL_STABLETIME, SER_GetValue (32,4));
 800e69e:	2104      	movs	r1, #4
 800e6a0:	2020      	movs	r0, #32
 800e6a2:	f7ff f825 	bl	800d6f0 <SER_GetValue>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	2014      	movs	r0, #20
 800e6ac:	f7fa feec 	bl	8009488 <SCL_SetParameter>
			HOP_SetParameter(HOP_CLOSEDPULSETIME, SER_GetValue (36,4));
 800e6b0:	2104      	movs	r1, #4
 800e6b2:	2024      	movs	r0, #36	; 0x24
 800e6b4:	f7ff f81c 	bl	800d6f0 <SER_GetValue>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	200f      	movs	r0, #15
 800e6be:	f7fa fa61 	bl	8008b84 <HOP_SetParameter>
			HOP_SetParameter(HOP_OPENEDPULSETIME, SER_GetValue (40,4));
 800e6c2:	2104      	movs	r1, #4
 800e6c4:	2028      	movs	r0, #40	; 0x28
 800e6c6:	f7ff f813 	bl	800d6f0 <SER_GetValue>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	2010      	movs	r0, #16
 800e6d0:	f7fa fa58 	bl	8008b84 <HOP_SetParameter>
			SER_SendReturnMessage (10,MStatSuccess);
 800e6d4:	2101      	movs	r1, #1
 800e6d6:	200a      	movs	r0, #10
 800e6d8:	f7fe ff7a 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e6dc:	e091      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeGetConsumableData)
 800e6de:	4b4b      	ldr	r3, [pc, #300]	; (800e80c <SER_ProcessMessage+0x528>)
 800e6e0:	78db      	ldrb	r3, [r3, #3]
 800e6e2:	2b61      	cmp	r3, #97	; 0x61
 800e6e4:	d110      	bne.n	800e708 <SER_ProcessMessage+0x424>
			DataLength = SER_FillBuffer(10, Message.MType);
 800e6e6:	4b49      	ldr	r3, [pc, #292]	; (800e80c <SER_ProcessMessage+0x528>)
 800e6e8:	78db      	ldrb	r3, [r3, #3]
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	200a      	movs	r0, #10
 800e6f0:	f7ff f8e4 	bl	800d8bc <SER_FillBuffer>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	75bb      	strb	r3, [r7, #22]
			SER_SendReturnMessage (DataLength + 10,MStatSuccess);
 800e6f8:	7dbb      	ldrb	r3, [r7, #22]
 800e6fa:	330a      	adds	r3, #10
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2101      	movs	r1, #1
 800e700:	4618      	mov	r0, r3
 800e702:	f7fe ff65 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e706:	e07c      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeSetConsumableData)
 800e708:	4b40      	ldr	r3, [pc, #256]	; (800e80c <SER_ProcessMessage+0x528>)
 800e70a:	78db      	ldrb	r3, [r3, #3]
 800e70c:	2b62      	cmp	r3, #98	; 0x62
 800e70e:	d11e      	bne.n	800e74e <SER_ProcessMessage+0x46a>
			for (uint8_t i = 0; i < 58; i++)
 800e710:	2300      	movs	r3, #0
 800e712:	75fb      	strb	r3, [r7, #23]
 800e714:	e013      	b.n	800e73e <SER_ProcessMessage+0x45a>
				CON.CardMemory[i] = SER_GetValue (8 + (i * 2),2);
 800e716:	7dfb      	ldrb	r3, [r7, #23]
 800e718:	3304      	adds	r3, #4
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	2102      	movs	r1, #2
 800e722:	4618      	mov	r0, r3
 800e724:	f7fe ffe4 	bl	800d6f0 <SER_GetValue>
 800e728:	4603      	mov	r3, r0
 800e72a:	461a      	mov	r2, r3
 800e72c:	7dfb      	ldrb	r3, [r7, #23]
 800e72e:	b2d1      	uxtb	r1, r2
 800e730:	4a37      	ldr	r2, [pc, #220]	; (800e810 <SER_ProcessMessage+0x52c>)
 800e732:	4413      	add	r3, r2
 800e734:	460a      	mov	r2, r1
 800e736:	705a      	strb	r2, [r3, #1]
			for (uint8_t i = 0; i < 58; i++)
 800e738:	7dfb      	ldrb	r3, [r7, #23]
 800e73a:	3301      	adds	r3, #1
 800e73c:	75fb      	strb	r3, [r7, #23]
 800e73e:	7dfb      	ldrb	r3, [r7, #23]
 800e740:	2b39      	cmp	r3, #57	; 0x39
 800e742:	d9e8      	bls.n	800e716 <SER_ProcessMessage+0x432>
			SER_SendReturnMessage (10,MStatSuccess);
 800e744:	2101      	movs	r1, #1
 800e746:	200a      	movs	r0, #10
 800e748:	f7fe ff42 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e74c:	e059      	b.n	800e802 <SER_ProcessMessage+0x51e>
		else if (Message.MType == MTypeSetDummyMode)
 800e74e:	4b2f      	ldr	r3, [pc, #188]	; (800e80c <SER_ProcessMessage+0x528>)
 800e750:	78db      	ldrb	r3, [r3, #3]
 800e752:	2b42      	cmp	r3, #66	; 0x42
 800e754:	d12d      	bne.n	800e7b2 <SER_ProcessMessage+0x4ce>
			WRK_SetDummyMode(WRK_DUMMYMODEGRINDER,SER_GetValue (12,2));
 800e756:	2102      	movs	r1, #2
 800e758:	200c      	movs	r0, #12
 800e75a:	f7fe ffc9 	bl	800d6f0 <SER_GetValue>
 800e75e:	4603      	mov	r3, r0
 800e760:	b2db      	uxtb	r3, r3
 800e762:	4619      	mov	r1, r3
 800e764:	2000      	movs	r0, #0
 800e766:	f7fb fef7 	bl	800a558 <WRK_SetDummyMode>
			WRK_SetDummyMode(WRK_DUMMYMODEFILTER,SER_GetValue (14,2));
 800e76a:	2102      	movs	r1, #2
 800e76c:	200e      	movs	r0, #14
 800e76e:	f7fe ffbf 	bl	800d6f0 <SER_GetValue>
 800e772:	4603      	mov	r3, r0
 800e774:	b2db      	uxtb	r3, r3
 800e776:	4619      	mov	r1, r3
 800e778:	2001      	movs	r0, #1
 800e77a:	f7fb feed 	bl	800a558 <WRK_SetDummyMode>
			WRK_SetDummyMode(WRK_DUMMYMODERFID,SER_GetValue (16,2));
 800e77e:	2102      	movs	r1, #2
 800e780:	2010      	movs	r0, #16
 800e782:	f7fe ffb5 	bl	800d6f0 <SER_GetValue>
 800e786:	4603      	mov	r3, r0
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	4619      	mov	r1, r3
 800e78c:	2002      	movs	r0, #2
 800e78e:	f7fb fee3 	bl	800a558 <WRK_SetDummyMode>
			WRK_SetDummyMode(WRK_DUMMYMODESCALE,SER_GetValue (18,2));
 800e792:	2102      	movs	r1, #2
 800e794:	2012      	movs	r0, #18
 800e796:	f7fe ffab 	bl	800d6f0 <SER_GetValue>
 800e79a:	4603      	mov	r3, r0
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	4619      	mov	r1, r3
 800e7a0:	2003      	movs	r0, #3
 800e7a2:	f7fb fed9 	bl	800a558 <WRK_SetDummyMode>
			SER_SendReturnMessage (10,MStatSuccess);
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	200a      	movs	r0, #10
 800e7aa:	f7fe ff11 	bl	800d5d0 <SER_SendReturnMessage>
			NVIC_SystemReset();
 800e7ae:	f7fe fed3 	bl	800d558 <__NVIC_SystemReset>
		else if (Message.MType == MTypeSetMachineParameters)
 800e7b2:	4b16      	ldr	r3, [pc, #88]	; (800e80c <SER_ProcessMessage+0x528>)
 800e7b4:	78db      	ldrb	r3, [r3, #3]
 800e7b6:	2b39      	cmp	r3, #57	; 0x39
 800e7b8:	d11f      	bne.n	800e7fa <SER_ProcessMessage+0x516>
			ADJ_SetParameter(ADJ_P,SER_GetValue (12,4));
 800e7ba:	2104      	movs	r1, #4
 800e7bc:	200c      	movs	r0, #12
 800e7be:	f7fe ff97 	bl	800d6f0 <SER_GetValue>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	2029      	movs	r0, #41	; 0x29
 800e7c8:	f7f8 fbc8 	bl	8006f5c <ADJ_SetParameter>
			ADJ_SetParameter(ADJ_I,SER_GetValue (16,4));
 800e7cc:	2104      	movs	r1, #4
 800e7ce:	2010      	movs	r0, #16
 800e7d0:	f7fe ff8e 	bl	800d6f0 <SER_GetValue>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	202a      	movs	r0, #42	; 0x2a
 800e7da:	f7f8 fbbf 	bl	8006f5c <ADJ_SetParameter>
			ADJ_SetParameter(ADJ_D,SER_GetValue (20,4));
 800e7de:	2104      	movs	r1, #4
 800e7e0:	2014      	movs	r0, #20
 800e7e2:	f7fe ff85 	bl	800d6f0 <SER_GetValue>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	202b      	movs	r0, #43	; 0x2b
 800e7ec:	f7f8 fbb6 	bl	8006f5c <ADJ_SetParameter>
			SER_SendReturnMessage (10,MStatSuccess);
 800e7f0:	2101      	movs	r1, #1
 800e7f2:	200a      	movs	r0, #10
 800e7f4:	f7fe feec 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e7f8:	e003      	b.n	800e802 <SER_ProcessMessage+0x51e>
			SER_SendReturnMessage (10,MStatUnknownType);
 800e7fa:	2112      	movs	r1, #18
 800e7fc:	200a      	movs	r0, #10
 800e7fe:	f7fe fee7 	bl	800d5d0 <SER_SendReturnMessage>
}
 800e802:	bf00      	nop
 800e804:	371c      	adds	r7, #28
 800e806:	46bd      	mov	sp, r7
 800e808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e80c:	20000d0c 	.word	0x20000d0c
 800e810:	200001d4 	.word	0x200001d4

0800e814 <HAL_UART_RxCpltCallback>:
//! \details    Resets the buffer counter if 0x1B is received
//! \details    Checks the length of the message and limits to MDataMax
//! \details    Fills the rest of the data buffer until the length of the message is received
//! \param      None
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
	if (SER_Busy) return;
 800e81c:	4b54      	ldr	r3, [pc, #336]	; (800e970 <HAL_UART_RxCpltCallback+0x15c>)
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	f040 80a1 	bne.w	800e968 <HAL_UART_RxCpltCallback+0x154>
	uint8_t CurrentValue;
	if(huart->Instance == USART2)  //Received from debugging interface
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a52      	ldr	r2, [pc, #328]	; (800e974 <HAL_UART_RxCpltCallback+0x160>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d103      	bne.n	800e838 <HAL_UART_RxCpltCallback+0x24>
	{
		UartReturn = 2;
 800e830:	4b51      	ldr	r3, [pc, #324]	; (800e978 <HAL_UART_RxCpltCallback+0x164>)
 800e832:	2202      	movs	r2, #2
 800e834:	701a      	strb	r2, [r3, #0]
 800e836:	e007      	b.n	800e848 <HAL_UART_RxCpltCallback+0x34>
	}
	else if(huart->Instance == USART3)  //Received from linux system
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a4f      	ldr	r2, [pc, #316]	; (800e97c <HAL_UART_RxCpltCallback+0x168>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d102      	bne.n	800e848 <HAL_UART_RxCpltCallback+0x34>
	{
		UartReturn = 3;
 800e842:	4b4d      	ldr	r3, [pc, #308]	; (800e978 <HAL_UART_RxCpltCallback+0x164>)
 800e844:	2203      	movs	r2, #3
 800e846:	701a      	strb	r2, [r3, #0]
	}

	CurrentValue = UTL_Asc2Dec(Message.RxBuffer);
 800e848:	4b4d      	ldr	r3, [pc, #308]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f000 f905 	bl	800ea5c <UTL_Asc2Dec>
 800e852:	4603      	mov	r3, r0
 800e854:	73fb      	strb	r3, [r7, #15]
	Message.RxData[Message.Counter] = Message.RxBuffer;
 800e856:	4b4a      	ldr	r3, [pc, #296]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e858:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e85c:	4619      	mov	r1, r3
 800e85e:	4b48      	ldr	r3, [pc, #288]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e860:	781a      	ldrb	r2, [r3, #0]
 800e862:	4b47      	ldr	r3, [pc, #284]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e864:	440b      	add	r3, r1
 800e866:	725a      	strb	r2, [r3, #9]
	if (Message.RxBuffer == 0x2f) //Start byte. Reset Rx counter
 800e868:	4b45      	ldr	r3, [pc, #276]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	2b2f      	cmp	r3, #47	; 0x2f
 800e86e:	d103      	bne.n	800e878 <HAL_UART_RxCpltCallback+0x64>
	{
		Message.Counter = 1;
 800e870:	4b43      	ldr	r3, [pc, #268]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e872:	2201      	movs	r2, #1
 800e874:	80da      	strh	r2, [r3, #6]
 800e876:	e078      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	}
	else if (Message.Counter == 1) //UART protocol
 800e878:	4b41      	ldr	r3, [pc, #260]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e87a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d106      	bne.n	800e890 <HAL_UART_RxCpltCallback+0x7c>
	{
		Message.UARTVersion = CurrentValue;
 800e882:	4a3f      	ldr	r2, [pc, #252]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e884:	7bfb      	ldrb	r3, [r7, #15]
 800e886:	7053      	strb	r3, [r2, #1]
		Message.Counter = 2;
 800e888:	4b3d      	ldr	r3, [pc, #244]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e88a:	2202      	movs	r2, #2
 800e88c:	80da      	strh	r2, [r3, #6]
 800e88e:	e06c      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	}
	else if (Message.Counter == 2) //Length MSB received
 800e890:	4b3b      	ldr	r3, [pc, #236]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e892:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e896:	2b02      	cmp	r3, #2
 800e898:	d108      	bne.n	800e8ac <HAL_UART_RxCpltCallback+0x98>
	{
		Message.Length = CurrentValue * 16;
 800e89a:	7bfb      	ldrb	r3, [r7, #15]
 800e89c:	011b      	lsls	r3, r3, #4
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	4b37      	ldr	r3, [pc, #220]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8a2:	709a      	strb	r2, [r3, #2]
		Message.Counter = 3;
 800e8a4:	4b36      	ldr	r3, [pc, #216]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8a6:	2203      	movs	r2, #3
 800e8a8:	80da      	strh	r2, [r3, #6]
 800e8aa:	e05e      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	}
	else if (Message.Counter == 3) //Length LSB received
 800e8ac:	4b34      	ldr	r3, [pc, #208]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	d10a      	bne.n	800e8cc <HAL_UART_RxCpltCallback+0xb8>
	{
		Message.Length += CurrentValue;
 800e8b6:	4b32      	ldr	r3, [pc, #200]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8b8:	789a      	ldrb	r2, [r3, #2]
 800e8ba:	7bfb      	ldrb	r3, [r7, #15]
 800e8bc:	4413      	add	r3, r2
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	4b2f      	ldr	r3, [pc, #188]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8c2:	709a      	strb	r2, [r3, #2]
		if (Message.Length > MLengthMax)
			Message.Length = MLengthMax; //Prevent buffer overflow
		Message.Counter = 4;
 800e8c4:	4b2e      	ldr	r3, [pc, #184]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8c6:	2204      	movs	r2, #4
 800e8c8:	80da      	strh	r2, [r3, #6]
 800e8ca:	e04e      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	}
	else if	(Message.Counter == 4) //Message type MSB received
 800e8cc:	4b2c      	ldr	r3, [pc, #176]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e8d2:	2b04      	cmp	r3, #4
 800e8d4:	d108      	bne.n	800e8e8 <HAL_UART_RxCpltCallback+0xd4>
	{
		Message.MType = CurrentValue * 16;
 800e8d6:	7bfb      	ldrb	r3, [r7, #15]
 800e8d8:	011b      	lsls	r3, r3, #4
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	4b28      	ldr	r3, [pc, #160]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8de:	70da      	strb	r2, [r3, #3]
		Message.Counter = 5;
 800e8e0:	4b27      	ldr	r3, [pc, #156]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8e2:	2205      	movs	r2, #5
 800e8e4:	80da      	strh	r2, [r3, #6]
 800e8e6:	e040      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	}
	else if	(Message.Counter == 5) //Message type LSB received
 800e8e8:	4b25      	ldr	r3, [pc, #148]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e8ee:	2b05      	cmp	r3, #5
 800e8f0:	d10a      	bne.n	800e908 <HAL_UART_RxCpltCallback+0xf4>
	{
		Message.MType += CurrentValue;
 800e8f2:	4b23      	ldr	r3, [pc, #140]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8f4:	78da      	ldrb	r2, [r3, #3]
 800e8f6:	7bfb      	ldrb	r3, [r7, #15]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	4b20      	ldr	r3, [pc, #128]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e8fe:	70da      	strb	r2, [r3, #3]
		Message.Counter = 6;
 800e900:	4b1f      	ldr	r3, [pc, #124]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e902:	2206      	movs	r2, #6
 800e904:	80da      	strh	r2, [r3, #6]
 800e906:	e030      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	}
	else if	(Message.Counter == 6) //CRC MSB received
 800e908:	4b1d      	ldr	r3, [pc, #116]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e90a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e90e:	2b06      	cmp	r3, #6
 800e910:	d108      	bne.n	800e924 <HAL_UART_RxCpltCallback+0x110>
	{
		Message.CRCValue = CurrentValue * 16;
 800e912:	7bfb      	ldrb	r3, [r7, #15]
 800e914:	011b      	lsls	r3, r3, #4
 800e916:	b2da      	uxtb	r2, r3
 800e918:	4b19      	ldr	r3, [pc, #100]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e91a:	711a      	strb	r2, [r3, #4]
		Message.Counter = 7;
 800e91c:	4b18      	ldr	r3, [pc, #96]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e91e:	2207      	movs	r2, #7
 800e920:	80da      	strh	r2, [r3, #6]
 800e922:	e022      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	}
	else if	(Message.Counter == 7) //CRC LSB received
 800e924:	4b16      	ldr	r3, [pc, #88]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e926:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e92a:	2b07      	cmp	r3, #7
 800e92c:	d10a      	bne.n	800e944 <HAL_UART_RxCpltCallback+0x130>
	{
		Message.CRCValue += CurrentValue;
 800e92e:	4b14      	ldr	r3, [pc, #80]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e930:	791a      	ldrb	r2, [r3, #4]
 800e932:	7bfb      	ldrb	r3, [r7, #15]
 800e934:	4413      	add	r3, r2
 800e936:	b2da      	uxtb	r2, r3
 800e938:	4b11      	ldr	r3, [pc, #68]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e93a:	711a      	strb	r2, [r3, #4]
		Message.Counter = 8;
 800e93c:	4b10      	ldr	r3, [pc, #64]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e93e:	2208      	movs	r2, #8
 800e940:	80da      	strh	r2, [r3, #6]
 800e942:	e012      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	}
	else if	(Message.Counter < Message.Length) //Any byte received
 800e944:	4b0e      	ldr	r3, [pc, #56]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e946:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e94a:	461a      	mov	r2, r3
 800e94c:	4b0c      	ldr	r3, [pc, #48]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e94e:	789b      	ldrb	r3, [r3, #2]
 800e950:	429a      	cmp	r2, r3
 800e952:	da0a      	bge.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	{
		Message.Counter ++;
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e956:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	3301      	adds	r3, #1
 800e95e:	b29b      	uxth	r3, r3
 800e960:	b21a      	sxth	r2, r3
 800e962:	4b07      	ldr	r3, [pc, #28]	; (800e980 <HAL_UART_RxCpltCallback+0x16c>)
 800e964:	80da      	strh	r2, [r3, #6]
 800e966:	e000      	b.n	800e96a <HAL_UART_RxCpltCallback+0x156>
	if (SER_Busy) return;
 800e968:	bf00      	nop
	}
}
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	20000e15 	.word	0x20000e15
 800e974:	40004400 	.word	0x40004400
 800e978:	20000e14 	.word	0x20000e14
 800e97c:	40004800 	.word	0x40004800
 800e980:	20000d0c 	.word	0x20000d0c

0800e984 <SER_HandleRecipe>:
#ifndef BOOTLOADER
void SER_HandleRecipe (void)
{
 800e984:	b590      	push	{r4, r7, lr}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
	uint16_t NrOfBlocks;
	uint16_t CurrentBlock;

	NrOfBlocks = SER_GetValue (8,2);
 800e98a:	2102      	movs	r1, #2
 800e98c:	2008      	movs	r0, #8
 800e98e:	f7fe feaf 	bl	800d6f0 <SER_GetValue>
 800e992:	4603      	mov	r3, r0
 800e994:	80fb      	strh	r3, [r7, #6]
#ifdef COFFEEMAKER
	gRecipe[Message.MType-1].Blocks = NrOfBlocks;
#endif
#ifdef GRINDER
	gRecipe.Blocks = NrOfBlocks;
 800e996:	88fb      	ldrh	r3, [r7, #6]
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	4b2e      	ldr	r3, [pc, #184]	; (800ea54 <SER_HandleRecipe+0xd0>)
 800e99c:	709a      	strb	r2, [r3, #2]
#endif
	CurrentBlock = SER_GetValue (10,2);
 800e99e:	2102      	movs	r1, #2
 800e9a0:	200a      	movs	r0, #10
 800e9a2:	f7fe fea5 	bl	800d6f0 <SER_GetValue>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	80bb      	strh	r3, [r7, #4]

	if (CurrentBlock < NrOfBlocks)
 800e9aa:	88ba      	ldrh	r2, [r7, #4]
 800e9ac:	88fb      	ldrh	r3, [r7, #6]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d248      	bcs.n	800ea44 <SER_HandleRecipe+0xc0>
	{
#ifdef GRINDER
		if (CurrentBlock == 0) memset(gRecipe.RecipeBlocks, 0, sizeof(gRecipe.RecipeBlocks)); //Clear the current coffee recipe
 800e9b2:	88bb      	ldrh	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d104      	bne.n	800e9c2 <SER_HandleRecipe+0x3e>
 800e9b8:	2240      	movs	r2, #64	; 0x40
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	4826      	ldr	r0, [pc, #152]	; (800ea58 <SER_HandleRecipe+0xd4>)
 800e9be:	f005 fc3b 	bl	8014238 <memset>
		gRecipe.RecipeBlocks[CurrentBlock].GrindWeight = SER_GetValue (12,2);
 800e9c2:	88bc      	ldrh	r4, [r7, #4]
 800e9c4:	2102      	movs	r1, #2
 800e9c6:	200c      	movs	r0, #12
 800e9c8:	f7fe fe92 	bl	800d6f0 <SER_GetValue>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	4a20      	ldr	r2, [pc, #128]	; (800ea54 <SER_HandleRecipe+0xd0>)
 800e9d2:	00e3      	lsls	r3, r4, #3
 800e9d4:	4413      	add	r3, r2
 800e9d6:	460a      	mov	r2, r1
 800e9d8:	809a      	strh	r2, [r3, #4]
		gRecipe.RecipeBlocks[CurrentBlock].GrindSize = SER_GetValue (14,4);
 800e9da:	88bc      	ldrh	r4, [r7, #4]
 800e9dc:	2104      	movs	r1, #4
 800e9de:	200e      	movs	r0, #14
 800e9e0:	f7fe fe86 	bl	800d6f0 <SER_GetValue>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	4a1a      	ldr	r2, [pc, #104]	; (800ea54 <SER_HandleRecipe+0xd0>)
 800e9ea:	00e3      	lsls	r3, r4, #3
 800e9ec:	4413      	add	r3, r2
 800e9ee:	460a      	mov	r2, r1
 800e9f0:	80da      	strh	r2, [r3, #6]
		gRecipe.RecipeBlocks[CurrentBlock].FilterType = SER_GetValue (18,2);
 800e9f2:	88bc      	ldrh	r4, [r7, #4]
 800e9f4:	2102      	movs	r1, #2
 800e9f6:	2012      	movs	r0, #18
 800e9f8:	f7fe fe7a 	bl	800d6f0 <SER_GetValue>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	4619      	mov	r1, r3
 800ea00:	4a14      	ldr	r2, [pc, #80]	; (800ea54 <SER_HandleRecipe+0xd0>)
 800ea02:	00e3      	lsls	r3, r4, #3
 800ea04:	4413      	add	r3, r2
 800ea06:	460a      	mov	r2, r1
 800ea08:	811a      	strh	r2, [r3, #8]
		gRecipe.RecipeBlocks[CurrentBlock].ShutterTime = SER_GetValue (20,4);
 800ea0a:	88bc      	ldrh	r4, [r7, #4]
 800ea0c:	2104      	movs	r1, #4
 800ea0e:	2014      	movs	r0, #20
 800ea10:	f7fe fe6e 	bl	800d6f0 <SER_GetValue>
 800ea14:	4603      	mov	r3, r0
 800ea16:	4619      	mov	r1, r3
 800ea18:	4a0e      	ldr	r2, [pc, #56]	; (800ea54 <SER_HandleRecipe+0xd0>)
 800ea1a:	00e3      	lsls	r3, r4, #3
 800ea1c:	4413      	add	r3, r2
 800ea1e:	460a      	mov	r2, r1
 800ea20:	815a      	strh	r2, [r3, #10]
		if (CurrentBlock == NrOfBlocks - 1)
 800ea22:	88ba      	ldrh	r2, [r7, #4]
 800ea24:	88fb      	ldrh	r3, [r7, #6]
 800ea26:	3b01      	subs	r3, #1
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d103      	bne.n	800ea34 <SER_HandleRecipe+0xb0>
			gRecipe.Valid = 1;
 800ea2c:	4b09      	ldr	r3, [pc, #36]	; (800ea54 <SER_HandleRecipe+0xd0>)
 800ea2e:	2201      	movs	r2, #1
 800ea30:	701a      	strb	r2, [r3, #0]
 800ea32:	e002      	b.n	800ea3a <SER_HandleRecipe+0xb6>
		else
			gRecipe.Valid = 0;
 800ea34:	4b07      	ldr	r3, [pc, #28]	; (800ea54 <SER_HandleRecipe+0xd0>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	701a      	strb	r2, [r3, #0]
			gRecipe[Message.MType-1].Valid = 1;
		else
			gRecipe[Message.MType-1].Valid = 0;
#endif

		SER_SendReturnMessage (10,MStatSuccess);
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	200a      	movs	r0, #10
 800ea3e:	f7fe fdc7 	bl	800d5d0 <SER_SendReturnMessage>
	}
	else
	{
		SER_SendReturnMessage (10,MStatBlockNrError);
	}
}
 800ea42:	e003      	b.n	800ea4c <SER_HandleRecipe+0xc8>
		SER_SendReturnMessage (10,MStatBlockNrError);
 800ea44:	2114      	movs	r1, #20
 800ea46:	200a      	movs	r0, #10
 800ea48:	f7fe fdc2 	bl	800d5d0 <SER_SendReturnMessage>
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd90      	pop	{r4, r7, pc}
 800ea54:	20000598 	.word	0x20000598
 800ea58:	2000059c 	.word	0x2000059c

0800ea5c <UTL_Asc2Dec>:
//! \brief      Returns the integer value of a hex string
//! \details    converts the hex string to an integer
//! \param[in]  uint8_t newValue		Hex string [1 byte]
//! \param[out]	uint8_t ReturnValue
uint8_t UTL_Asc2Dec (uint8_t newValue)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	4603      	mov	r3, r0
 800ea64:	71fb      	strb	r3, [r7, #7]
	if (newValue >= '0' && newValue <= '9') return newValue - '0';
 800ea66:	79fb      	ldrb	r3, [r7, #7]
 800ea68:	2b2f      	cmp	r3, #47	; 0x2f
 800ea6a:	d906      	bls.n	800ea7a <UTL_Asc2Dec+0x1e>
 800ea6c:	79fb      	ldrb	r3, [r7, #7]
 800ea6e:	2b39      	cmp	r3, #57	; 0x39
 800ea70:	d803      	bhi.n	800ea7a <UTL_Asc2Dec+0x1e>
 800ea72:	79fb      	ldrb	r3, [r7, #7]
 800ea74:	3b30      	subs	r3, #48	; 0x30
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	e014      	b.n	800eaa4 <UTL_Asc2Dec+0x48>
	if (newValue >= 'A' && newValue <= 'F') return newValue - ('A' - 10);
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	2b40      	cmp	r3, #64	; 0x40
 800ea7e:	d906      	bls.n	800ea8e <UTL_Asc2Dec+0x32>
 800ea80:	79fb      	ldrb	r3, [r7, #7]
 800ea82:	2b46      	cmp	r3, #70	; 0x46
 800ea84:	d803      	bhi.n	800ea8e <UTL_Asc2Dec+0x32>
 800ea86:	79fb      	ldrb	r3, [r7, #7]
 800ea88:	3b37      	subs	r3, #55	; 0x37
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	e00a      	b.n	800eaa4 <UTL_Asc2Dec+0x48>
	if (newValue >= 'a' && newValue <= 'f') return newValue - ('a' - 10);
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	2b60      	cmp	r3, #96	; 0x60
 800ea92:	d906      	bls.n	800eaa2 <UTL_Asc2Dec+0x46>
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	2b66      	cmp	r3, #102	; 0x66
 800ea98:	d803      	bhi.n	800eaa2 <UTL_Asc2Dec+0x46>
 800ea9a:	79fb      	ldrb	r3, [r7, #7]
 800ea9c:	3b57      	subs	r3, #87	; 0x57
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	e000      	b.n	800eaa4 <UTL_Asc2Dec+0x48>
	return 0xFF;
 800eaa2:	23ff      	movs	r3, #255	; 0xff
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bc80      	pop	{r7}
 800eaac:	4770      	bx	lr

0800eaae <UTL_Dec2Asc>:
//! \brief      Returns the ascii code of an integer
//! \details    converts an integer to a ascii character
//! \param[in]  uint8_t newValue
//! \param[out] uint8_t returnValue
uint8_t UTL_Dec2Asc (uint8_t newValue)
{
 800eaae:	b480      	push	{r7}
 800eab0:	b085      	sub	sp, #20
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	4603      	mov	r3, r0
 800eab6:	71fb      	strb	r3, [r7, #7]
	uint8_t returnValue = newValue + 48;
 800eab8:	79fb      	ldrb	r3, [r7, #7]
 800eaba:	3330      	adds	r3, #48	; 0x30
 800eabc:	73fb      	strb	r3, [r7, #15]
	if (returnValue > 57) //More than 9, so A,B,C,D,E or F
 800eabe:	7bfb      	ldrb	r3, [r7, #15]
 800eac0:	2b39      	cmp	r3, #57	; 0x39
 800eac2:	d902      	bls.n	800eaca <UTL_Dec2Asc+0x1c>
		returnValue += 7;
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
 800eac6:	3307      	adds	r3, #7
 800eac8:	73fb      	strb	r3, [r7, #15]
	return returnValue;
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bc80      	pop	{r7}
 800ead4:	4770      	bx	lr
	...

0800ead8 <WS2812_Set>:
//! \details    Calculates and sets the color
//! \param[in]  uint8_t num		number of the LED in the array
//! \param[in]  uint32_t RGB	Color number
//! \param[in]  uint8_t intensity	Intensity of the LED (0 - 255)
void WS2812_Set( uint8_t num, uint32_t RGB, uint8_t intensity )
{
 800ead8:	b490      	push	{r4, r7}
 800eada:	b09c      	sub	sp, #112	; 0x70
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	6039      	str	r1, [r7, #0]
 800eae2:	71fb      	strb	r3, [r7, #7]
 800eae4:	4613      	mov	r3, r2
 800eae6:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    uint16_t R = ((RGB >> 16) & 0xff) * intensity / 255;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	0c1b      	lsrs	r3, r3, #16
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	79ba      	ldrb	r2, [r7, #6]
 800eaf0:	fb02 f303 	mul.w	r3, r2, r3
 800eaf4:	4a8b      	ldr	r2, [pc, #556]	; (800ed24 <WS2812_Set+0x24c>)
 800eaf6:	fba2 2303 	umull	r2, r3, r2, r3
 800eafa:	09db      	lsrs	r3, r3, #7
 800eafc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    uint16_t G = ((RGB >> 8) & 0xff) * intensity / 255;
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	0a1b      	lsrs	r3, r3, #8
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	79ba      	ldrb	r2, [r7, #6]
 800eb08:	fb02 f303 	mul.w	r3, r2, r3
 800eb0c:	4a85      	ldr	r2, [pc, #532]	; (800ed24 <WS2812_Set+0x24c>)
 800eb0e:	fba2 2303 	umull	r2, r3, r2, r3
 800eb12:	09db      	lsrs	r3, r3, #7
 800eb14:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    uint16_t B = ((uint8_t) RGB) * intensity / 255;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	79bb      	ldrb	r3, [r7, #6]
 800eb20:	fb02 f303 	mul.w	r3, r2, r3
 800eb24:	4a7f      	ldr	r2, [pc, #508]	; (800ed24 <WS2812_Set+0x24c>)
 800eb26:	fb82 1203 	smull	r1, r2, r2, r3
 800eb2a:	441a      	add	r2, r3
 800eb2c:	11d2      	asrs	r2, r2, #7
 800eb2e:	17db      	asrs	r3, r3, #31
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    uint32_t TempR[8], TempG[8], TempB[8];
    BB = B;
 800eb36:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800eb3a:	b2da      	uxtb	r2, r3
 800eb3c:	4b7a      	ldr	r3, [pc, #488]	; (800ed28 <WS2812_Set+0x250>)
 800eb3e:	701a      	strb	r2, [r3, #0]
    RGB = R << 16 | G << 8 | B; //Colors corrected for intensity
 800eb40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eb44:	041a      	lsls	r2, r3, #16
 800eb46:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800eb4a:	021b      	lsls	r3, r3, #8
 800eb4c:	431a      	orrs	r2, r3
 800eb4e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800eb52:	4313      	orrs	r3, r2
 800eb54:	603b      	str	r3, [r7, #0]
    //MSB First
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800eb56:	2300      	movs	r3, #0
 800eb58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800eb5c:	e058      	b.n	800ec10 <WS2812_Set+0x138>
	{
		(RGB & 0x00010000) != 0 ? (TempR[7-i] = WS2812_HIG) : (TempR[7-i] = WS2812_LOW);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00a      	beq.n	800eb7e <WS2812_Set+0xa6>
 800eb68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eb6c:	f1c3 0307 	rsb	r3, r3, #7
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	3370      	adds	r3, #112	; 0x70
 800eb74:	443b      	add	r3, r7
 800eb76:	4a6d      	ldr	r2, [pc, #436]	; (800ed2c <WS2812_Set+0x254>)
 800eb78:	f843 2c28 	str.w	r2, [r3, #-40]
 800eb7c:	e00a      	b.n	800eb94 <WS2812_Set+0xbc>
 800eb7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eb82:	f1c3 0307 	rsb	r3, r3, #7
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	3370      	adds	r3, #112	; 0x70
 800eb8a:	443b      	add	r3, r7
 800eb8c:	f44f 027e 	mov.w	r2, #16646144	; 0xfe0000
 800eb90:	f843 2c28 	str.w	r2, [r3, #-40]
		(RGB & 0x00000100) != 0 ? (TempG[7-i] = WS2812_HIG) : (TempG[7-i] = WS2812_LOW);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d00a      	beq.n	800ebb4 <WS2812_Set+0xdc>
 800eb9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eba2:	f1c3 0307 	rsb	r3, r3, #7
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	3370      	adds	r3, #112	; 0x70
 800ebaa:	443b      	add	r3, r7
 800ebac:	4a5f      	ldr	r2, [pc, #380]	; (800ed2c <WS2812_Set+0x254>)
 800ebae:	f843 2c48 	str.w	r2, [r3, #-72]
 800ebb2:	e00a      	b.n	800ebca <WS2812_Set+0xf2>
 800ebb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ebb8:	f1c3 0307 	rsb	r3, r3, #7
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	3370      	adds	r3, #112	; 0x70
 800ebc0:	443b      	add	r3, r7
 800ebc2:	f44f 027e 	mov.w	r2, #16646144	; 0xfe0000
 800ebc6:	f843 2c48 	str.w	r2, [r3, #-72]
		(RGB & 0x00000001) != 0 ? (TempB[7-i] = WS2812_HIG) : (TempB[7-i] = WS2812_LOW);
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	f003 0301 	and.w	r3, r3, #1
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00a      	beq.n	800ebea <WS2812_Set+0x112>
 800ebd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ebd8:	f1c3 0307 	rsb	r3, r3, #7
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	3370      	adds	r3, #112	; 0x70
 800ebe0:	443b      	add	r3, r7
 800ebe2:	4a52      	ldr	r2, [pc, #328]	; (800ed2c <WS2812_Set+0x254>)
 800ebe4:	f843 2c68 	str.w	r2, [r3, #-104]
 800ebe8:	e00a      	b.n	800ec00 <WS2812_Set+0x128>
 800ebea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ebee:	f1c3 0307 	rsb	r3, r3, #7
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	3370      	adds	r3, #112	; 0x70
 800ebf6:	443b      	add	r3, r7
 800ebf8:	f44f 027e 	mov.w	r2, #16646144	; 0xfe0000
 800ebfc:	f843 2c68 	str.w	r2, [r3, #-104]
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800ec00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec04:	3301      	adds	r3, #1
 800ec06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	085b      	lsrs	r3, r3, #1
 800ec0e:	603b      	str	r3, [r7, #0]
 800ec10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec14:	2b07      	cmp	r3, #7
 800ec16:	d9a2      	bls.n	800eb5e <WS2812_Set+0x86>
	}

	for (uint8_t j = 0; j<8;j++)
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800ec1e:	e077      	b.n	800ed10 <WS2812_Set+0x238>
	{
		for (i = 0; i < 3; i++)
 800ec20:	2300      	movs	r3, #0
 800ec22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ec26:	e06a      	b.n	800ecfe <WS2812_Set+0x226>
		{
			g_ws2812.Col[num].RGB.R[i + (j * 3)] = TempR[j] >> (16-8*i);
 800ec28:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	3370      	adds	r3, #112	; 0x70
 800ec30:	443b      	add	r3, r7
 800ec32:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800ec36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec3a:	f1c3 0302 	rsb	r3, r3, #2
 800ec3e:	00db      	lsls	r3, r3, #3
 800ec40:	fa22 f403 	lsr.w	r4, r2, r3
 800ec44:	79fa      	ldrb	r2, [r7, #7]
 800ec46:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 800ec4a:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800ec4e:	460b      	mov	r3, r1
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	440b      	add	r3, r1
 800ec54:	18c1      	adds	r1, r0, r3
 800ec56:	b2e4      	uxtb	r4, r4
 800ec58:	4835      	ldr	r0, [pc, #212]	; (800ed30 <WS2812_Set+0x258>)
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	00db      	lsls	r3, r3, #3
 800ec5e:	4413      	add	r3, r2
 800ec60:	00db      	lsls	r3, r3, #3
 800ec62:	4403      	add	r3, r0
 800ec64:	440b      	add	r3, r1
 800ec66:	331c      	adds	r3, #28
 800ec68:	4622      	mov	r2, r4
 800ec6a:	701a      	strb	r2, [r3, #0]
			g_ws2812.Col[num].RGB.G[i + (j * 3)] = TempG[j] >> (16-8*i);
 800ec6c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	3370      	adds	r3, #112	; 0x70
 800ec74:	443b      	add	r3, r7
 800ec76:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800ec7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ec7e:	f1c3 0302 	rsb	r3, r3, #2
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	fa22 f403 	lsr.w	r4, r2, r3
 800ec88:	79fa      	ldrb	r2, [r7, #7]
 800ec8a:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 800ec8e:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800ec92:	460b      	mov	r3, r1
 800ec94:	005b      	lsls	r3, r3, #1
 800ec96:	440b      	add	r3, r1
 800ec98:	18c1      	adds	r1, r0, r3
 800ec9a:	b2e4      	uxtb	r4, r4
 800ec9c:	4824      	ldr	r0, [pc, #144]	; (800ed30 <WS2812_Set+0x258>)
 800ec9e:	4613      	mov	r3, r2
 800eca0:	00db      	lsls	r3, r3, #3
 800eca2:	4413      	add	r3, r2
 800eca4:	00db      	lsls	r3, r3, #3
 800eca6:	4403      	add	r3, r0
 800eca8:	440b      	add	r3, r1
 800ecaa:	3304      	adds	r3, #4
 800ecac:	4622      	mov	r2, r4
 800ecae:	701a      	strb	r2, [r3, #0]
			g_ws2812.Col[num].RGB.B[i + (j * 3)] = TempB[j] >> (16-8*i);
 800ecb0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	3370      	adds	r3, #112	; 0x70
 800ecb8:	443b      	add	r3, r7
 800ecba:	f853 2c68 	ldr.w	r2, [r3, #-104]
 800ecbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ecc2:	f1c3 0302 	rsb	r3, r3, #2
 800ecc6:	00db      	lsls	r3, r3, #3
 800ecc8:	fa22 f403 	lsr.w	r4, r2, r3
 800eccc:	79fa      	ldrb	r2, [r7, #7]
 800ecce:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 800ecd2:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	005b      	lsls	r3, r3, #1
 800ecda:	440b      	add	r3, r1
 800ecdc:	18c1      	adds	r1, r0, r3
 800ecde:	b2e4      	uxtb	r4, r4
 800ece0:	4813      	ldr	r0, [pc, #76]	; (800ed30 <WS2812_Set+0x258>)
 800ece2:	4613      	mov	r3, r2
 800ece4:	00db      	lsls	r3, r3, #3
 800ece6:	4413      	add	r3, r2
 800ece8:	00db      	lsls	r3, r3, #3
 800ecea:	4403      	add	r3, r0
 800ecec:	440b      	add	r3, r1
 800ecee:	3334      	adds	r3, #52	; 0x34
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 800ecf4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ecfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	d990      	bls.n	800ec28 <WS2812_Set+0x150>
	for (uint8_t j = 0; j<8;j++)
 800ed06:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800ed10:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800ed14:	2b07      	cmp	r3, #7
 800ed16:	d983      	bls.n	800ec20 <WS2812_Set+0x148>
		}
	}
}
 800ed18:	bf00      	nop
 800ed1a:	bf00      	nop
 800ed1c:	3770      	adds	r7, #112	; 0x70
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bc90      	pop	{r4, r7}
 800ed22:	4770      	bx	lr
 800ed24:	80808081 	.word	0x80808081
 800ed28:	20000f84 	.word	0x20000f84
 800ed2c:	00fffc00 	.word	0x00fffc00
 800ed30:	20000e18 	.word	0x20000e18

0800ed34 <WS2812_OneSet>:
//! \brief      Sets an LED in the array to a certain value
//! \details    Calculates and sets the color
//! \param[in]  uint8_t num		number of the LED in the array
//! \param[in]  uint32_t RGB	Color number
void WS2812_OneSet( uint8_t num, uint32_t RGB )
{
 800ed34:	b490      	push	{r4, r7}
 800ed36:	b09c      	sub	sp, #112	; 0x70
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	6039      	str	r1, [r7, #0]
 800ed3e:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint32_t TempR[8], TempG[8], TempB[8];

    //MSB First
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800ed40:	2300      	movs	r3, #0
 800ed42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ed46:	e04c      	b.n	800ede2 <WS2812_OneSet+0xae>
    {
        (RGB & 0x00010000) != 0 ? (TempR[i] = WS2812_HIG) : (TempR[i] = WS2812_LOW);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d008      	beq.n	800ed64 <WS2812_OneSet+0x30>
 800ed52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	3370      	adds	r3, #112	; 0x70
 800ed5a:	443b      	add	r3, r7
 800ed5c:	4a66      	ldr	r2, [pc, #408]	; (800eef8 <WS2812_OneSet+0x1c4>)
 800ed5e:	f843 2c24 	str.w	r2, [r3, #-36]
 800ed62:	e008      	b.n	800ed76 <WS2812_OneSet+0x42>
 800ed64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	3370      	adds	r3, #112	; 0x70
 800ed6c:	443b      	add	r3, r7
 800ed6e:	f44f 027e 	mov.w	r2, #16646144	; 0xfe0000
 800ed72:	f843 2c24 	str.w	r2, [r3, #-36]
        (RGB & 0x00000100) != 0 ? (TempG[i] = WS2812_HIG) : (TempG[i] = WS2812_LOW);
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d008      	beq.n	800ed92 <WS2812_OneSet+0x5e>
 800ed80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	3370      	adds	r3, #112	; 0x70
 800ed88:	443b      	add	r3, r7
 800ed8a:	4a5b      	ldr	r2, [pc, #364]	; (800eef8 <WS2812_OneSet+0x1c4>)
 800ed8c:	f843 2c44 	str.w	r2, [r3, #-68]
 800ed90:	e008      	b.n	800eda4 <WS2812_OneSet+0x70>
 800ed92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	3370      	adds	r3, #112	; 0x70
 800ed9a:	443b      	add	r3, r7
 800ed9c:	f44f 027e 	mov.w	r2, #16646144	; 0xfe0000
 800eda0:	f843 2c44 	str.w	r2, [r3, #-68]
        (RGB & 0x00000001) != 0 ? (TempB[i] = WS2812_HIG) : (TempB[i] = WS2812_LOW);
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	f003 0301 	and.w	r3, r3, #1
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d008      	beq.n	800edc0 <WS2812_OneSet+0x8c>
 800edae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	3370      	adds	r3, #112	; 0x70
 800edb6:	443b      	add	r3, r7
 800edb8:	4a4f      	ldr	r2, [pc, #316]	; (800eef8 <WS2812_OneSet+0x1c4>)
 800edba:	f843 2c64 	str.w	r2, [r3, #-100]
 800edbe:	e008      	b.n	800edd2 <WS2812_OneSet+0x9e>
 800edc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	3370      	adds	r3, #112	; 0x70
 800edc8:	443b      	add	r3, r7
 800edca:	f44f 027e 	mov.w	r2, #16646144	; 0xfe0000
 800edce:	f843 2c64 	str.w	r2, [r3, #-100]
    for( i = 0; i < 8; ++i,RGB>>=1 )
 800edd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800edd6:	3301      	adds	r3, #1
 800edd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	085b      	lsrs	r3, r3, #1
 800ede0:	603b      	str	r3, [r7, #0]
 800ede2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ede6:	2b07      	cmp	r3, #7
 800ede8:	d9ae      	bls.n	800ed48 <WS2812_OneSet+0x14>
    }

	for (uint8_t j = 0; j<8;j++)
 800edea:	2300      	movs	r3, #0
 800edec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800edf0:	e077      	b.n	800eee2 <WS2812_OneSet+0x1ae>
	{
		for (i = 0; i < 3; i++)
 800edf2:	2300      	movs	r3, #0
 800edf4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800edf8:	e06a      	b.n	800eed0 <WS2812_OneSet+0x19c>
		{
			g_ws2812.Col[num].RGB.R[i + (j * 3)] = TempR[i] >> (16-8*i);
 800edfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	3370      	adds	r3, #112	; 0x70
 800ee02:	443b      	add	r3, r7
 800ee04:	f853 2c24 	ldr.w	r2, [r3, #-36]
 800ee08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee0c:	f1c3 0302 	rsb	r3, r3, #2
 800ee10:	00db      	lsls	r3, r3, #3
 800ee12:	fa22 f403 	lsr.w	r4, r2, r3
 800ee16:	79fa      	ldrb	r2, [r7, #7]
 800ee18:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 800ee1c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800ee20:	460b      	mov	r3, r1
 800ee22:	005b      	lsls	r3, r3, #1
 800ee24:	440b      	add	r3, r1
 800ee26:	18c1      	adds	r1, r0, r3
 800ee28:	b2e4      	uxtb	r4, r4
 800ee2a:	4834      	ldr	r0, [pc, #208]	; (800eefc <WS2812_OneSet+0x1c8>)
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	00db      	lsls	r3, r3, #3
 800ee30:	4413      	add	r3, r2
 800ee32:	00db      	lsls	r3, r3, #3
 800ee34:	4403      	add	r3, r0
 800ee36:	440b      	add	r3, r1
 800ee38:	331c      	adds	r3, #28
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	701a      	strb	r2, [r3, #0]
			g_ws2812.Col[num].RGB.G[i + (j * 3)] = TempG[i] >> (16-8*i);
 800ee3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	3370      	adds	r3, #112	; 0x70
 800ee46:	443b      	add	r3, r7
 800ee48:	f853 2c44 	ldr.w	r2, [r3, #-68]
 800ee4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee50:	f1c3 0302 	rsb	r3, r3, #2
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	fa22 f403 	lsr.w	r4, r2, r3
 800ee5a:	79fa      	ldrb	r2, [r7, #7]
 800ee5c:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 800ee60:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800ee64:	460b      	mov	r3, r1
 800ee66:	005b      	lsls	r3, r3, #1
 800ee68:	440b      	add	r3, r1
 800ee6a:	18c1      	adds	r1, r0, r3
 800ee6c:	b2e4      	uxtb	r4, r4
 800ee6e:	4823      	ldr	r0, [pc, #140]	; (800eefc <WS2812_OneSet+0x1c8>)
 800ee70:	4613      	mov	r3, r2
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	4413      	add	r3, r2
 800ee76:	00db      	lsls	r3, r3, #3
 800ee78:	4403      	add	r3, r0
 800ee7a:	440b      	add	r3, r1
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	4622      	mov	r2, r4
 800ee80:	701a      	strb	r2, [r3, #0]
			g_ws2812.Col[num].RGB.B[i + (j * 3)] = TempB[i] >> (16-8*i);
 800ee82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	3370      	adds	r3, #112	; 0x70
 800ee8a:	443b      	add	r3, r7
 800ee8c:	f853 2c64 	ldr.w	r2, [r3, #-100]
 800ee90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ee94:	f1c3 0302 	rsb	r3, r3, #2
 800ee98:	00db      	lsls	r3, r3, #3
 800ee9a:	fa22 f403 	lsr.w	r4, r2, r3
 800ee9e:	79fa      	ldrb	r2, [r7, #7]
 800eea0:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 800eea4:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800eea8:	460b      	mov	r3, r1
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	440b      	add	r3, r1
 800eeae:	18c1      	adds	r1, r0, r3
 800eeb0:	b2e4      	uxtb	r4, r4
 800eeb2:	4812      	ldr	r0, [pc, #72]	; (800eefc <WS2812_OneSet+0x1c8>)
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	4413      	add	r3, r2
 800eeba:	00db      	lsls	r3, r3, #3
 800eebc:	4403      	add	r3, r0
 800eebe:	440b      	add	r3, r1
 800eec0:	3334      	adds	r3, #52	; 0x34
 800eec2:	4622      	mov	r2, r4
 800eec4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 800eec6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eeca:	3301      	adds	r3, #1
 800eecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800eed0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800eed4:	2b02      	cmp	r3, #2
 800eed6:	d990      	bls.n	800edfa <WS2812_OneSet+0xc6>
	for (uint8_t j = 0; j<8;j++)
 800eed8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800eedc:	3301      	adds	r3, #1
 800eede:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800eee2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800eee6:	2b07      	cmp	r3, #7
 800eee8:	d983      	bls.n	800edf2 <WS2812_OneSet+0xbe>
		}
	}
}
 800eeea:	bf00      	nop
 800eeec:	bf00      	nop
 800eeee:	3770      	adds	r7, #112	; 0x70
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bc90      	pop	{r4, r7}
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	00fffc00 	.word	0x00fffc00
 800eefc:	20000e18 	.word	0x20000e18

0800ef00 <WS2812_Show>:


void WS2812_Show(void)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	af00      	add	r7, sp, #0
#if (LED_SPI == 2)
    HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)&g_ws2812.Col[0].Buff, 72*WS2812_NUM);
#elif (LED_SPI == 1)
    HAL_SPI_Transmit_IT(&hspi1, (uint8_t*)&g_ws2812.Col[0].Buff, 72);
 800ef04:	2248      	movs	r2, #72	; 0x48
 800ef06:	4903      	ldr	r1, [pc, #12]	; (800ef14 <WS2812_Show+0x14>)
 800ef08:	4803      	ldr	r0, [pc, #12]	; (800ef18 <WS2812_Show+0x18>)
 800ef0a:	f002 ff43 	bl	8011d94 <HAL_SPI_Transmit_IT>
#endif
}
 800ef0e:	bf00      	nop
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	20000e1c 	.word	0x20000e1c
 800ef18:	20000618 	.word	0x20000618

0800ef1c <WS2812_CloseAll>:

void WS2812_CloseAll(void)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
    uint16_t i;

    for (i = 0; i < WS2812_NUM; ++i)
 800ef22:	2300      	movs	r3, #0
 800ef24:	80fb      	strh	r3, [r7, #6]
 800ef26:	e008      	b.n	800ef3a <WS2812_CloseAll+0x1e>
    {
        WS2812_OneSet(i, 0);
 800ef28:	88fb      	ldrh	r3, [r7, #6]
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7ff ff00 	bl	800ed34 <WS2812_OneSet>
    for (i = 0; i < WS2812_NUM; ++i)
 800ef34:	88fb      	ldrh	r3, [r7, #6]
 800ef36:	3301      	adds	r3, #1
 800ef38:	80fb      	strh	r3, [r7, #6]
 800ef3a:	88fb      	ldrh	r3, [r7, #6]
 800ef3c:	2b04      	cmp	r3, #4
 800ef3e:	d9f3      	bls.n	800ef28 <WS2812_CloseAll+0xc>
    }
    WS2812_Show();
 800ef40:	f7ff ffde 	bl	800ef00 <WS2812_Show>
}
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ef52:	2300      	movs	r3, #0
 800ef54:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ef56:	2003      	movs	r0, #3
 800ef58:	f000 fd9c 	bl	800fa94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ef5c:	200f      	movs	r0, #15
 800ef5e:	f000 f80d 	bl	800ef7c <HAL_InitTick>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d002      	beq.n	800ef6e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	71fb      	strb	r3, [r7, #7]
 800ef6c:	e001      	b.n	800ef72 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ef6e:	f7fa fd21 	bl	80099b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ef72:	79fb      	ldrb	r3, [r7, #7]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800ef88:	4b16      	ldr	r3, [pc, #88]	; (800efe4 <HAL_InitTick+0x68>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d022      	beq.n	800efd6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800ef90:	4b15      	ldr	r3, [pc, #84]	; (800efe8 <HAL_InitTick+0x6c>)
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	4b13      	ldr	r3, [pc, #76]	; (800efe4 <HAL_InitTick+0x68>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ef9c:	fbb1 f3f3 	udiv	r3, r1, r3
 800efa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800efa4:	4618      	mov	r0, r3
 800efa6:	f000 fdbc 	bl	800fb22 <HAL_SYSTICK_Config>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10f      	bne.n	800efd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b0f      	cmp	r3, #15
 800efb4:	d809      	bhi.n	800efca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800efb6:	2200      	movs	r2, #0
 800efb8:	6879      	ldr	r1, [r7, #4]
 800efba:	f04f 30ff 	mov.w	r0, #4294967295
 800efbe:	f000 fd74 	bl	800faaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800efc2:	4a0a      	ldr	r2, [pc, #40]	; (800efec <HAL_InitTick+0x70>)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6013      	str	r3, [r2, #0]
 800efc8:	e007      	b.n	800efda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	73fb      	strb	r3, [r7, #15]
 800efce:	e004      	b.n	800efda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800efd0:	2301      	movs	r3, #1
 800efd2:	73fb      	strb	r3, [r7, #15]
 800efd4:	e001      	b.n	800efda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800efda:	7bfb      	ldrb	r3, [r7, #15]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	2000000c 	.word	0x2000000c
 800efe8:	20000000 	.word	0x20000000
 800efec:	20000008 	.word	0x20000008

0800eff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800eff0:	b480      	push	{r7}
 800eff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800eff4:	4b05      	ldr	r3, [pc, #20]	; (800f00c <HAL_IncTick+0x1c>)
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	4b05      	ldr	r3, [pc, #20]	; (800f010 <HAL_IncTick+0x20>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4413      	add	r3, r2
 800effe:	4a03      	ldr	r2, [pc, #12]	; (800f00c <HAL_IncTick+0x1c>)
 800f000:	6013      	str	r3, [r2, #0]
}
 800f002:	bf00      	nop
 800f004:	46bd      	mov	sp, r7
 800f006:	bc80      	pop	{r7}
 800f008:	4770      	bx	lr
 800f00a:	bf00      	nop
 800f00c:	20000f88 	.word	0x20000f88
 800f010:	2000000c 	.word	0x2000000c

0800f014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f014:	b480      	push	{r7}
 800f016:	af00      	add	r7, sp, #0
  return uwTick;
 800f018:	4b02      	ldr	r3, [pc, #8]	; (800f024 <HAL_GetTick+0x10>)
 800f01a:	681b      	ldr	r3, [r3, #0]
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	46bd      	mov	sp, r7
 800f020:	bc80      	pop	{r7}
 800f022:	4770      	bx	lr
 800f024:	20000f88 	.word	0x20000f88

0800f028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f030:	f7ff fff0 	bl	800f014 <HAL_GetTick>
 800f034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f040:	d004      	beq.n	800f04c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800f042:	4b09      	ldr	r3, [pc, #36]	; (800f068 <HAL_Delay+0x40>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	4413      	add	r3, r2
 800f04a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f04c:	bf00      	nop
 800f04e:	f7ff ffe1 	bl	800f014 <HAL_GetTick>
 800f052:	4602      	mov	r2, r0
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d8f7      	bhi.n	800f04e <HAL_Delay+0x26>
  {
  }
}
 800f05e:	bf00      	nop
 800f060:	bf00      	nop
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	2000000c 	.word	0x2000000c

0800f06c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b08e      	sub	sp, #56	; 0x38
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800f07e:	2300      	movs	r3, #0
 800f080:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d101      	bne.n	800f08c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800f088:	2301      	movs	r3, #1
 800f08a:	e127      	b.n	800f2dc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f096:	2b00      	cmp	r3, #0
 800f098:	d115      	bne.n	800f0c6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f0a8:	4b8e      	ldr	r3, [pc, #568]	; (800f2e4 <HAL_ADC_Init+0x278>)
 800f0aa:	6a1b      	ldr	r3, [r3, #32]
 800f0ac:	4a8d      	ldr	r2, [pc, #564]	; (800f2e4 <HAL_ADC_Init+0x278>)
 800f0ae:	f043 0301 	orr.w	r3, r3, #1
 800f0b2:	6213      	str	r3, [r2, #32]
 800f0b4:	4b8b      	ldr	r3, [pc, #556]	; (800f2e4 <HAL_ADC_Init+0x278>)
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	60bb      	str	r3, [r7, #8]
 800f0be:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f7f7 fe9f 	bl	8006e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0ca:	f003 0310 	and.w	r3, r3, #16
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f040 80ff 	bne.w	800f2d2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f0dc:	f023 0302 	bic.w	r3, r3, #2
 800f0e0:	f043 0202 	orr.w	r2, r3, #2
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800f0e8:	4b7f      	ldr	r3, [pc, #508]	; (800f2e8 <HAL_ADC_Init+0x27c>)
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	497c      	ldr	r1, [pc, #496]	; (800f2e8 <HAL_ADC_Init+0x27c>)
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800f102:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f10a:	4619      	mov	r1, r3
 800f10c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f110:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f112:	6a3b      	ldr	r3, [r7, #32]
 800f114:	fa93 f3a3 	rbit	r3, r3
 800f118:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	fab3 f383 	clz	r3, r3
 800f120:	b2db      	uxtb	r3, r3
 800f122:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800f126:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f12c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f134:	4619      	mov	r1, r3
 800f136:	2302      	movs	r3, #2
 800f138:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13c:	fa93 f3a3 	rbit	r3, r3
 800f140:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800f142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f144:	fab3 f383 	clz	r3, r3
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800f14e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800f150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f152:	4313      	orrs	r3, r2
 800f154:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f15a:	2b10      	cmp	r3, #16
 800f15c:	d007      	beq.n	800f16e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800f166:	4313      	orrs	r3, r2
 800f168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f16a:	4313      	orrs	r3, r2
 800f16c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f178:	2b40      	cmp	r3, #64	; 0x40
 800f17a:	d04f      	beq.n	800f21c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	699b      	ldr	r3, [r3, #24]
 800f180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f182:	4313      	orrs	r3, r2
 800f184:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800f18e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	6912      	ldr	r2, [r2, #16]
 800f194:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f198:	d003      	beq.n	800f1a2 <HAL_ADC_Init+0x136>
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	6912      	ldr	r2, [r2, #16]
 800f19e:	2a01      	cmp	r2, #1
 800f1a0:	d102      	bne.n	800f1a8 <HAL_ADC_Init+0x13c>
 800f1a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f1a6:	e000      	b.n	800f1aa <HAL_ADC_Init+0x13e>
 800f1a8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800f1aa:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800f1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d125      	bne.n	800f208 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d114      	bne.n	800f1f0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800f1d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1d2:	69ba      	ldr	r2, [r7, #24]
 800f1d4:	fa92 f2a2 	rbit	r2, r2
 800f1d8:	617a      	str	r2, [r7, #20]
  return result;
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	fab2 f282 	clz	r2, r2
 800f1e0:	b2d2      	uxtb	r2, r2
 800f1e2:	4093      	lsls	r3, r2
 800f1e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	633b      	str	r3, [r7, #48]	; 0x30
 800f1ee:	e00b      	b.n	800f208 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1f4:	f043 0220 	orr.w	r2, r3, #32
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f200:	f043 0201 	orr.w	r2, r3, #1
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	4b37      	ldr	r3, [pc, #220]	; (800f2ec <HAL_ADC_Init+0x280>)
 800f210:	4013      	ands	r3, r2
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	6812      	ldr	r2, [r2, #0]
 800f216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f218:	430b      	orrs	r3, r1
 800f21a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	689a      	ldr	r2, [r3, #8]
 800f222:	4b33      	ldr	r3, [pc, #204]	; (800f2f0 <HAL_ADC_Init+0x284>)
 800f224:	4013      	ands	r3, r2
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	6812      	ldr	r2, [r2, #0]
 800f22a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f22c:	430b      	orrs	r3, r1
 800f22e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	691b      	ldr	r3, [r3, #16]
 800f234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f238:	d003      	beq.n	800f242 <HAL_ADC_Init+0x1d6>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	691b      	ldr	r3, [r3, #16]
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d119      	bne.n	800f276 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f248:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f250:	3b01      	subs	r3, #1
 800f252:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800f256:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	fa92 f2a2 	rbit	r2, r2
 800f25e:	60fa      	str	r2, [r7, #12]
  return result;
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	fab2 f282 	clz	r2, r2
 800f266:	b2d2      	uxtb	r2, r2
 800f268:	fa03 f202 	lsl.w	r2, r3, r2
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	430a      	orrs	r2, r1
 800f272:	631a      	str	r2, [r3, #48]	; 0x30
 800f274:	e007      	b.n	800f286 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800f284:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	689a      	ldr	r2, [r3, #8]
 800f28c:	4b19      	ldr	r3, [pc, #100]	; (800f2f4 <HAL_ADC_Init+0x288>)
 800f28e:	4013      	ands	r3, r2
 800f290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f292:	429a      	cmp	r2, r3
 800f294:	d10b      	bne.n	800f2ae <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2200      	movs	r2, #0
 800f29a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2a0:	f023 0303 	bic.w	r3, r3, #3
 800f2a4:	f043 0201 	orr.w	r2, r3, #1
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	64da      	str	r2, [r3, #76]	; 0x4c
 800f2ac:	e014      	b.n	800f2d8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2b2:	f023 0312 	bic.w	r3, r3, #18
 800f2b6:	f043 0210 	orr.w	r2, r3, #16
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2c2:	f043 0201 	orr.w	r2, r3, #1
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f2d0:	e002      	b.n	800f2d8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800f2d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3738      	adds	r7, #56	; 0x38
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}
 800f2e4:	40023800 	.word	0x40023800
 800f2e8:	40012700 	.word	0x40012700
 800f2ec:	fcfc16ff 	.word	0xfcfc16ff
 800f2f0:	c0fff189 	.word	0xc0fff189
 800f2f4:	bf80fffe 	.word	0xbf80fffe

0800f2f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b086      	sub	sp, #24
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f304:	2300      	movs	r3, #0
 800f306:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d101      	bne.n	800f316 <HAL_ADC_Start_DMA+0x1e>
 800f312:	2302      	movs	r3, #2
 800f314:	e074      	b.n	800f400 <HAL_ADC_Start_DMA+0x108>
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2201      	movs	r2, #1
 800f31a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f000 f9da 	bl	800f6d8 <ADC_Enable>
 800f324:	4603      	mov	r3, r0
 800f326:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800f328:	7dfb      	ldrb	r3, [r7, #23]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d167      	bne.n	800f3fe <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f332:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f336:	f023 0301 	bic.w	r3, r3, #1
 800f33a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d007      	beq.n	800f360 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f354:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f358:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f36c:	d106      	bne.n	800f37c <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f372:	f023 0206 	bic.w	r2, r3, #6
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	651a      	str	r2, [r3, #80]	; 0x50
 800f37a:	e002      	b.n	800f382 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2200      	movs	r2, #0
 800f380:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f38e:	4a1e      	ldr	r2, [pc, #120]	; (800f408 <HAL_ADC_Start_DMA+0x110>)
 800f390:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f396:	4a1d      	ldr	r2, [pc, #116]	; (800f40c <HAL_ADC_Start_DMA+0x114>)
 800f398:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f39e:	4a1c      	ldr	r2, [pc, #112]	; (800f410 <HAL_ADC_Start_DMA+0x118>)
 800f3a0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f3aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f3ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	689a      	ldr	r2, [r3, #8]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f3ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	3358      	adds	r3, #88	; 0x58
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f000 fc90 	bl	800fd00 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d107      	bne.n	800f3fe <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	689a      	ldr	r2, [r3, #8]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f3fc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800f3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	0800f791 	.word	0x0800f791
 800f40c:	0800f839 	.word	0x0800f839
 800f410:	0800f855 	.word	0x0800f855

0800f414 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800f41c:	bf00      	nop
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	bc80      	pop	{r7}
 800f424:	4770      	bx	lr

0800f426 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800f426:	b480      	push	{r7}
 800f428:	b083      	sub	sp, #12
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800f42e:	bf00      	nop
 800f430:	370c      	adds	r7, #12
 800f432:	46bd      	mov	sp, r7
 800f434:	bc80      	pop	{r7}
 800f436:	4770      	bx	lr

0800f438 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800f446:	2300      	movs	r3, #0
 800f448:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f450:	2b01      	cmp	r3, #1
 800f452:	d101      	bne.n	800f458 <HAL_ADC_ConfigChannel+0x20>
 800f454:	2302      	movs	r3, #2
 800f456:	e134      	b.n	800f6c2 <HAL_ADC_ConfigChannel+0x28a>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2201      	movs	r2, #1
 800f45c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	2b06      	cmp	r3, #6
 800f466:	d81c      	bhi.n	800f4a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	685a      	ldr	r2, [r3, #4]
 800f472:	4613      	mov	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	4413      	add	r3, r2
 800f478:	3b05      	subs	r3, #5
 800f47a:	221f      	movs	r2, #31
 800f47c:	fa02 f303 	lsl.w	r3, r2, r3
 800f480:	43db      	mvns	r3, r3
 800f482:	4019      	ands	r1, r3
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	6818      	ldr	r0, [r3, #0]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	4613      	mov	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	3b05      	subs	r3, #5
 800f494:	fa00 f203 	lsl.w	r2, r0, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	430a      	orrs	r2, r1
 800f49e:	641a      	str	r2, [r3, #64]	; 0x40
 800f4a0:	e07e      	b.n	800f5a0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	2b0c      	cmp	r3, #12
 800f4a8:	d81c      	bhi.n	800f4e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	4613      	mov	r3, r2
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	4413      	add	r3, r2
 800f4ba:	3b23      	subs	r3, #35	; 0x23
 800f4bc:	221f      	movs	r2, #31
 800f4be:	fa02 f303 	lsl.w	r3, r2, r3
 800f4c2:	43db      	mvns	r3, r3
 800f4c4:	4019      	ands	r1, r3
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	6818      	ldr	r0, [r3, #0]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	685a      	ldr	r2, [r3, #4]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4413      	add	r3, r2
 800f4d4:	3b23      	subs	r3, #35	; 0x23
 800f4d6:	fa00 f203 	lsl.w	r2, r0, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	430a      	orrs	r2, r1
 800f4e0:	63da      	str	r2, [r3, #60]	; 0x3c
 800f4e2:	e05d      	b.n	800f5a0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	2b12      	cmp	r3, #18
 800f4ea:	d81c      	bhi.n	800f526 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	685a      	ldr	r2, [r3, #4]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	4413      	add	r3, r2
 800f4fc:	3b41      	subs	r3, #65	; 0x41
 800f4fe:	221f      	movs	r2, #31
 800f500:	fa02 f303 	lsl.w	r3, r2, r3
 800f504:	43db      	mvns	r3, r3
 800f506:	4019      	ands	r1, r3
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	6818      	ldr	r0, [r3, #0]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	685a      	ldr	r2, [r3, #4]
 800f510:	4613      	mov	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4413      	add	r3, r2
 800f516:	3b41      	subs	r3, #65	; 0x41
 800f518:	fa00 f203 	lsl.w	r2, r0, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	430a      	orrs	r2, r1
 800f522:	639a      	str	r2, [r3, #56]	; 0x38
 800f524:	e03c      	b.n	800f5a0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	2b18      	cmp	r3, #24
 800f52c:	d81c      	bhi.n	800f568 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	685a      	ldr	r2, [r3, #4]
 800f538:	4613      	mov	r3, r2
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	4413      	add	r3, r2
 800f53e:	3b5f      	subs	r3, #95	; 0x5f
 800f540:	221f      	movs	r2, #31
 800f542:	fa02 f303 	lsl.w	r3, r2, r3
 800f546:	43db      	mvns	r3, r3
 800f548:	4019      	ands	r1, r3
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	6818      	ldr	r0, [r3, #0]
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	685a      	ldr	r2, [r3, #4]
 800f552:	4613      	mov	r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	4413      	add	r3, r2
 800f558:	3b5f      	subs	r3, #95	; 0x5f
 800f55a:	fa00 f203 	lsl.w	r2, r0, r3
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	430a      	orrs	r2, r1
 800f564:	635a      	str	r2, [r3, #52]	; 0x34
 800f566:	e01b      	b.n	800f5a0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	685a      	ldr	r2, [r3, #4]
 800f572:	4613      	mov	r3, r2
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	4413      	add	r3, r2
 800f578:	3b7d      	subs	r3, #125	; 0x7d
 800f57a:	221f      	movs	r2, #31
 800f57c:	fa02 f303 	lsl.w	r3, r2, r3
 800f580:	43db      	mvns	r3, r3
 800f582:	4019      	ands	r1, r3
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	685a      	ldr	r2, [r3, #4]
 800f58c:	4613      	mov	r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4413      	add	r3, r2
 800f592:	3b7d      	subs	r3, #125	; 0x7d
 800f594:	fa00 f203 	lsl.w	r2, r0, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	430a      	orrs	r2, r1
 800f59e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b09      	cmp	r3, #9
 800f5a6:	d81a      	bhi.n	800f5de <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	6959      	ldr	r1, [r3, #20]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	4413      	add	r3, r2
 800f5b8:	2207      	movs	r2, #7
 800f5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f5be:	43db      	mvns	r3, r3
 800f5c0:	4019      	ands	r1, r3
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	6898      	ldr	r0, [r3, #8]
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	005b      	lsls	r3, r3, #1
 800f5ce:	4413      	add	r3, r2
 800f5d0:	fa00 f203 	lsl.w	r2, r0, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	430a      	orrs	r2, r1
 800f5da:	615a      	str	r2, [r3, #20]
 800f5dc:	e042      	b.n	800f664 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b13      	cmp	r3, #19
 800f5e4:	d81c      	bhi.n	800f620 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	6919      	ldr	r1, [r3, #16]
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	4413      	add	r3, r2
 800f5f6:	3b1e      	subs	r3, #30
 800f5f8:	2207      	movs	r2, #7
 800f5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f5fe:	43db      	mvns	r3, r3
 800f600:	4019      	ands	r1, r3
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	6898      	ldr	r0, [r3, #8]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	681a      	ldr	r2, [r3, #0]
 800f60a:	4613      	mov	r3, r2
 800f60c:	005b      	lsls	r3, r3, #1
 800f60e:	4413      	add	r3, r2
 800f610:	3b1e      	subs	r3, #30
 800f612:	fa00 f203 	lsl.w	r2, r0, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	430a      	orrs	r2, r1
 800f61c:	611a      	str	r2, [r3, #16]
 800f61e:	e021      	b.n	800f664 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b1a      	cmp	r3, #26
 800f626:	d81c      	bhi.n	800f662 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68d9      	ldr	r1, [r3, #12]
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	4613      	mov	r3, r2
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	4413      	add	r3, r2
 800f638:	3b3c      	subs	r3, #60	; 0x3c
 800f63a:	2207      	movs	r2, #7
 800f63c:	fa02 f303 	lsl.w	r3, r2, r3
 800f640:	43db      	mvns	r3, r3
 800f642:	4019      	ands	r1, r3
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	6898      	ldr	r0, [r3, #8]
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	4613      	mov	r3, r2
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	4413      	add	r3, r2
 800f652:	3b3c      	subs	r3, #60	; 0x3c
 800f654:	fa00 f203 	lsl.w	r2, r0, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	430a      	orrs	r2, r1
 800f65e:	60da      	str	r2, [r3, #12]
 800f660:	e000      	b.n	800f664 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800f662:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2b10      	cmp	r3, #16
 800f66a:	d003      	beq.n	800f674 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800f670:	2b11      	cmp	r3, #17
 800f672:	d121      	bne.n	800f6b8 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800f674:	4b15      	ldr	r3, [pc, #84]	; (800f6cc <HAL_ADC_ConfigChannel+0x294>)
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d11b      	bne.n	800f6b8 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800f680:	4b12      	ldr	r3, [pc, #72]	; (800f6cc <HAL_ADC_ConfigChannel+0x294>)
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	4a11      	ldr	r2, [pc, #68]	; (800f6cc <HAL_ADC_ConfigChannel+0x294>)
 800f686:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f68a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b10      	cmp	r3, #16
 800f692:	d111      	bne.n	800f6b8 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800f694:	4b0e      	ldr	r3, [pc, #56]	; (800f6d0 <HAL_ADC_ConfigChannel+0x298>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a0e      	ldr	r2, [pc, #56]	; (800f6d4 <HAL_ADC_ConfigChannel+0x29c>)
 800f69a:	fba2 2303 	umull	r2, r3, r2, r3
 800f69e:	0c9a      	lsrs	r2, r3, #18
 800f6a0:	4613      	mov	r3, r2
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	4413      	add	r3, r2
 800f6a6:	005b      	lsls	r3, r3, #1
 800f6a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800f6aa:	e002      	b.n	800f6b2 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d1f9      	bne.n	800f6ac <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3714      	adds	r7, #20
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bc80      	pop	{r7}
 800f6ca:	4770      	bx	lr
 800f6cc:	40012700 	.word	0x40012700
 800f6d0:	20000000 	.word	0x20000000
 800f6d4:	431bde83 	.word	0x431bde83

0800f6d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6f2:	2b40      	cmp	r3, #64	; 0x40
 800f6f4:	d043      	beq.n	800f77e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	689a      	ldr	r2, [r3, #8]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f042 0201 	orr.w	r2, r2, #1
 800f704:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f706:	4b20      	ldr	r3, [pc, #128]	; (800f788 <ADC_Enable+0xb0>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a20      	ldr	r2, [pc, #128]	; (800f78c <ADC_Enable+0xb4>)
 800f70c:	fba2 2303 	umull	r2, r3, r2, r3
 800f710:	0c9a      	lsrs	r2, r3, #18
 800f712:	4613      	mov	r3, r2
 800f714:	005b      	lsls	r3, r3, #1
 800f716:	4413      	add	r3, r2
 800f718:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800f71a:	e002      	b.n	800f722 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	3b01      	subs	r3, #1
 800f720:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1f9      	bne.n	800f71c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800f728:	f7ff fc74 	bl	800f014 <HAL_GetTick>
 800f72c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800f72e:	e01f      	b.n	800f770 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800f730:	f7ff fc70 	bl	800f014 <HAL_GetTick>
 800f734:	4602      	mov	r2, r0
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	1ad3      	subs	r3, r2, r3
 800f73a:	2b02      	cmp	r3, #2
 800f73c:	d918      	bls.n	800f770 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f748:	2b40      	cmp	r3, #64	; 0x40
 800f74a:	d011      	beq.n	800f770 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f750:	f043 0210 	orr.w	r2, r3, #16
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f75c:	f043 0201 	orr.w	r2, r3, #1
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e007      	b.n	800f780 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f77a:	2b40      	cmp	r3, #64	; 0x40
 800f77c:	d1d8      	bne.n	800f730 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3710      	adds	r7, #16
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	20000000 	.word	0x20000000
 800f78c:	431bde83 	.word	0x431bde83

0800f790 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d13d      	bne.n	800f826 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d12c      	bne.n	800f81e <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d127      	bne.n	800f81e <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d006      	beq.n	800f7ea <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d119      	bne.n	800f81e <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	685a      	ldr	r2, [r3, #4]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f022 0220 	bic.w	r2, r2, #32
 800f7f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f80a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d105      	bne.n	800f81e <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f816:	f043 0201 	orr.w	r2, r3, #1
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7f8 f856 	bl	80078d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800f824:	e004      	b.n	800f830 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	4798      	blx	r3
}
 800f830:	bf00      	nop
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f844:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f7ff fde4 	bl	800f414 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f84c:	bf00      	nop
 800f84e:	3710      	adds	r7, #16
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f860:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f866:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f872:	f043 0204 	orr.w	r2, r3, #4
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f7ff fdd3 	bl	800f426 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f880:	bf00      	nop
 800f882:	3710      	adds	r7, #16
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <__NVIC_SetPriorityGrouping>:
{
 800f888:	b480      	push	{r7}
 800f88a:	b085      	sub	sp, #20
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f003 0307 	and.w	r3, r3, #7
 800f896:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f898:	4b0c      	ldr	r3, [pc, #48]	; (800f8cc <__NVIC_SetPriorityGrouping+0x44>)
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f8b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f8b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f8ba:	4a04      	ldr	r2, [pc, #16]	; (800f8cc <__NVIC_SetPriorityGrouping+0x44>)
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	60d3      	str	r3, [r2, #12]
}
 800f8c0:	bf00      	nop
 800f8c2:	3714      	adds	r7, #20
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bc80      	pop	{r7}
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	e000ed00 	.word	0xe000ed00

0800f8d0 <__NVIC_GetPriorityGrouping>:
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f8d4:	4b04      	ldr	r3, [pc, #16]	; (800f8e8 <__NVIC_GetPriorityGrouping+0x18>)
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	0a1b      	lsrs	r3, r3, #8
 800f8da:	f003 0307 	and.w	r3, r3, #7
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bc80      	pop	{r7}
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	e000ed00 	.word	0xe000ed00

0800f8ec <__NVIC_EnableIRQ>:
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f8f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	db0b      	blt.n	800f916 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f8fe:	79fb      	ldrb	r3, [r7, #7]
 800f900:	f003 021f 	and.w	r2, r3, #31
 800f904:	4906      	ldr	r1, [pc, #24]	; (800f920 <__NVIC_EnableIRQ+0x34>)
 800f906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f90a:	095b      	lsrs	r3, r3, #5
 800f90c:	2001      	movs	r0, #1
 800f90e:	fa00 f202 	lsl.w	r2, r0, r2
 800f912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f916:	bf00      	nop
 800f918:	370c      	adds	r7, #12
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bc80      	pop	{r7}
 800f91e:	4770      	bx	lr
 800f920:	e000e100 	.word	0xe000e100

0800f924 <__NVIC_DisableIRQ>:
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	4603      	mov	r3, r0
 800f92c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f92e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f932:	2b00      	cmp	r3, #0
 800f934:	db12      	blt.n	800f95c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	f003 021f 	and.w	r2, r3, #31
 800f93c:	490a      	ldr	r1, [pc, #40]	; (800f968 <__NVIC_DisableIRQ+0x44>)
 800f93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f942:	095b      	lsrs	r3, r3, #5
 800f944:	2001      	movs	r0, #1
 800f946:	fa00 f202 	lsl.w	r2, r0, r2
 800f94a:	3320      	adds	r3, #32
 800f94c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f950:	f3bf 8f4f 	dsb	sy
}
 800f954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f956:	f3bf 8f6f 	isb	sy
}
 800f95a:	bf00      	nop
}
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	bc80      	pop	{r7}
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	e000e100 	.word	0xe000e100

0800f96c <__NVIC_SetPriority>:
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	4603      	mov	r3, r0
 800f974:	6039      	str	r1, [r7, #0]
 800f976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	db0a      	blt.n	800f996 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	b2da      	uxtb	r2, r3
 800f984:	490c      	ldr	r1, [pc, #48]	; (800f9b8 <__NVIC_SetPriority+0x4c>)
 800f986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f98a:	0112      	lsls	r2, r2, #4
 800f98c:	b2d2      	uxtb	r2, r2
 800f98e:	440b      	add	r3, r1
 800f990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f994:	e00a      	b.n	800f9ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	b2da      	uxtb	r2, r3
 800f99a:	4908      	ldr	r1, [pc, #32]	; (800f9bc <__NVIC_SetPriority+0x50>)
 800f99c:	79fb      	ldrb	r3, [r7, #7]
 800f99e:	f003 030f 	and.w	r3, r3, #15
 800f9a2:	3b04      	subs	r3, #4
 800f9a4:	0112      	lsls	r2, r2, #4
 800f9a6:	b2d2      	uxtb	r2, r2
 800f9a8:	440b      	add	r3, r1
 800f9aa:	761a      	strb	r2, [r3, #24]
}
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bc80      	pop	{r7}
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop
 800f9b8:	e000e100 	.word	0xe000e100
 800f9bc:	e000ed00 	.word	0xe000ed00

0800f9c0 <NVIC_EncodePriority>:
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b089      	sub	sp, #36	; 0x24
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f003 0307 	and.w	r3, r3, #7
 800f9d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	f1c3 0307 	rsb	r3, r3, #7
 800f9da:	2b04      	cmp	r3, #4
 800f9dc:	bf28      	it	cs
 800f9de:	2304      	movcs	r3, #4
 800f9e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	3304      	adds	r3, #4
 800f9e6:	2b06      	cmp	r3, #6
 800f9e8:	d902      	bls.n	800f9f0 <NVIC_EncodePriority+0x30>
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	3b03      	subs	r3, #3
 800f9ee:	e000      	b.n	800f9f2 <NVIC_EncodePriority+0x32>
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f9fe:	43da      	mvns	r2, r3
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	401a      	ands	r2, r3
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800fa08:	f04f 31ff 	mov.w	r1, #4294967295
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	fa01 f303 	lsl.w	r3, r1, r3
 800fa12:	43d9      	mvns	r1, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800fa18:	4313      	orrs	r3, r2
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3724      	adds	r7, #36	; 0x24
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bc80      	pop	{r7}
 800fa22:	4770      	bx	lr

0800fa24 <__NVIC_SystemReset>:
{
 800fa24:	b480      	push	{r7}
 800fa26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800fa28:	f3bf 8f4f 	dsb	sy
}
 800fa2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800fa2e:	4b06      	ldr	r3, [pc, #24]	; (800fa48 <__NVIC_SystemReset+0x24>)
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800fa36:	4904      	ldr	r1, [pc, #16]	; (800fa48 <__NVIC_SystemReset+0x24>)
 800fa38:	4b04      	ldr	r3, [pc, #16]	; (800fa4c <__NVIC_SystemReset+0x28>)
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fa3e:	f3bf 8f4f 	dsb	sy
}
 800fa42:	bf00      	nop
    __NOP();
 800fa44:	bf00      	nop
 800fa46:	e7fd      	b.n	800fa44 <__NVIC_SystemReset+0x20>
 800fa48:	e000ed00 	.word	0xe000ed00
 800fa4c:	05fa0004 	.word	0x05fa0004

0800fa50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fa60:	d301      	bcc.n	800fa66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fa62:	2301      	movs	r3, #1
 800fa64:	e00f      	b.n	800fa86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fa66:	4a0a      	ldr	r2, [pc, #40]	; (800fa90 <SysTick_Config+0x40>)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fa6e:	210f      	movs	r1, #15
 800fa70:	f04f 30ff 	mov.w	r0, #4294967295
 800fa74:	f7ff ff7a 	bl	800f96c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fa78:	4b05      	ldr	r3, [pc, #20]	; (800fa90 <SysTick_Config+0x40>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fa7e:	4b04      	ldr	r3, [pc, #16]	; (800fa90 <SysTick_Config+0x40>)
 800fa80:	2207      	movs	r2, #7
 800fa82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3708      	adds	r7, #8
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	e000e010 	.word	0xe000e010

0800fa94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff fef3 	bl	800f888 <__NVIC_SetPriorityGrouping>
}
 800faa2:	bf00      	nop
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b086      	sub	sp, #24
 800faae:	af00      	add	r7, sp, #0
 800fab0:	4603      	mov	r3, r0
 800fab2:	60b9      	str	r1, [r7, #8]
 800fab4:	607a      	str	r2, [r7, #4]
 800fab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800fab8:	2300      	movs	r3, #0
 800faba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800fabc:	f7ff ff08 	bl	800f8d0 <__NVIC_GetPriorityGrouping>
 800fac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	68b9      	ldr	r1, [r7, #8]
 800fac6:	6978      	ldr	r0, [r7, #20]
 800fac8:	f7ff ff7a 	bl	800f9c0 <NVIC_EncodePriority>
 800facc:	4602      	mov	r2, r0
 800face:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fad2:	4611      	mov	r1, r2
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7ff ff49 	bl	800f96c <__NVIC_SetPriority>
}
 800fada:	bf00      	nop
 800fadc:	3718      	adds	r7, #24
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b082      	sub	sp, #8
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	4603      	mov	r3, r0
 800faea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800faec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7ff fefb 	bl	800f8ec <__NVIC_EnableIRQ>
}
 800faf6:	bf00      	nop
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b082      	sub	sp, #8
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	4603      	mov	r3, r0
 800fb06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800fb08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff ff09 	bl	800f924 <__NVIC_DisableIRQ>
}
 800fb12:	bf00      	nop
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800fb1e:	f7ff ff81 	bl	800fa24 <__NVIC_SystemReset>

0800fb22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b082      	sub	sp, #8
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7ff ff90 	bl	800fa50 <SysTick_Config>
 800fb30:	4603      	mov	r3, r0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
	...

0800fb3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d101      	bne.n	800fb4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	e059      	b.n	800fc02 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	461a      	mov	r2, r3
 800fb54:	4b2d      	ldr	r3, [pc, #180]	; (800fc0c <HAL_DMA_Init+0xd0>)
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d80f      	bhi.n	800fb7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	461a      	mov	r2, r3
 800fb60:	4b2b      	ldr	r3, [pc, #172]	; (800fc10 <HAL_DMA_Init+0xd4>)
 800fb62:	4413      	add	r3, r2
 800fb64:	4a2b      	ldr	r2, [pc, #172]	; (800fc14 <HAL_DMA_Init+0xd8>)
 800fb66:	fba2 2303 	umull	r2, r3, r2, r3
 800fb6a:	091b      	lsrs	r3, r3, #4
 800fb6c:	009a      	lsls	r2, r3, #2
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4a28      	ldr	r2, [pc, #160]	; (800fc18 <HAL_DMA_Init+0xdc>)
 800fb76:	63da      	str	r2, [r3, #60]	; 0x3c
 800fb78:	e00e      	b.n	800fb98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	4b26      	ldr	r3, [pc, #152]	; (800fc1c <HAL_DMA_Init+0xe0>)
 800fb82:	4413      	add	r3, r2
 800fb84:	4a23      	ldr	r2, [pc, #140]	; (800fc14 <HAL_DMA_Init+0xd8>)
 800fb86:	fba2 2303 	umull	r2, r3, r2, r3
 800fb8a:	091b      	lsrs	r3, r3, #4
 800fb8c:	009a      	lsls	r2, r3, #2
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4a22      	ldr	r2, [pc, #136]	; (800fc20 <HAL_DMA_Init+0xe4>)
 800fb96:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800fbae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800fbbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fbc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	695b      	ldr	r3, [r3, #20]
 800fbce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fbd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	69db      	ldr	r3, [r3, #28]
 800fbda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3714      	adds	r7, #20
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bc80      	pop	{r7}
 800fc0a:	4770      	bx	lr
 800fc0c:	40026407 	.word	0x40026407
 800fc10:	bffd9ff8 	.word	0xbffd9ff8
 800fc14:	cccccccd 	.word	0xcccccccd
 800fc18:	40026000 	.word	0x40026000
 800fc1c:	bffd9bf8 	.word	0xbffd9bf8
 800fc20:	40026400 	.word	0x40026400

0800fc24 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d101      	bne.n	800fc36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800fc32:	2301      	movs	r3, #1
 800fc34:	e052      	b.n	800fcdc <HAL_DMA_DeInit+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f022 0201 	bic.w	r2, r2, #1
 800fc44:	601a      	str	r2, [r3, #0]

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	4b26      	ldr	r3, [pc, #152]	; (800fce8 <HAL_DMA_DeInit+0xc4>)
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d80f      	bhi.n	800fc72 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	461a      	mov	r2, r3
 800fc58:	4b24      	ldr	r3, [pc, #144]	; (800fcec <HAL_DMA_DeInit+0xc8>)
 800fc5a:	4413      	add	r3, r2
 800fc5c:	4a24      	ldr	r2, [pc, #144]	; (800fcf0 <HAL_DMA_DeInit+0xcc>)
 800fc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc62:	091b      	lsrs	r3, r3, #4
 800fc64:	009a      	lsls	r2, r3, #2
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4a21      	ldr	r2, [pc, #132]	; (800fcf4 <HAL_DMA_DeInit+0xd0>)
 800fc6e:	63da      	str	r2, [r3, #60]	; 0x3c
 800fc70:	e00e      	b.n	800fc90 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	461a      	mov	r2, r3
 800fc78:	4b1f      	ldr	r3, [pc, #124]	; (800fcf8 <HAL_DMA_DeInit+0xd4>)
 800fc7a:	4413      	add	r3, r2
 800fc7c:	4a1c      	ldr	r2, [pc, #112]	; (800fcf0 <HAL_DMA_DeInit+0xcc>)
 800fc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc82:	091b      	lsrs	r3, r3, #4
 800fc84:	009a      	lsls	r2, r3, #2
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a1b      	ldr	r2, [pc, #108]	; (800fcfc <HAL_DMA_DeInit+0xd8>)
 800fc8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2200      	movs	r2, #0
 800fc96:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc9c:	f003 021c 	and.w	r2, r3, #28
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fca4:	2101      	movs	r1, #1
 800fca6:	fa01 f202 	lsl.w	r2, r1, r2
 800fcaa:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2200      	movs	r2, #0
 800fcce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800fcda:	2300      	movs	r3, #0
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bc80      	pop	{r7}
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
 800fce8:	40026407 	.word	0x40026407
 800fcec:	bffd9ff8 	.word	0xbffd9ff8
 800fcf0:	cccccccd 	.word	0xcccccccd
 800fcf4:	40026000 	.word	0x40026000
 800fcf8:	bffd9bf8 	.word	0xbffd9bf8
 800fcfc:	40026400 	.word	0x40026400

0800fd00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b086      	sub	sp, #24
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	607a      	str	r2, [r7, #4]
 800fd0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d101      	bne.n	800fd20 <HAL_DMA_Start_IT+0x20>
 800fd1c:	2302      	movs	r3, #2
 800fd1e:	e04b      	b.n	800fdb8 <HAL_DMA_Start_IT+0xb8>
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d13a      	bne.n	800fdaa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2202      	movs	r2, #2
 800fd38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f022 0201 	bic.w	r2, r2, #1
 800fd50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	68b9      	ldr	r1, [r7, #8]
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f000 f95e 	bl	801001a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d008      	beq.n	800fd78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f042 020e 	orr.w	r2, r2, #14
 800fd74:	601a      	str	r2, [r3, #0]
 800fd76:	e00f      	b.n	800fd98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f022 0204 	bic.w	r2, r2, #4
 800fd86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f042 020a 	orr.w	r2, r2, #10
 800fd96:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f042 0201 	orr.w	r2, r2, #1
 800fda6:	601a      	str	r2, [r3, #0]
 800fda8:	e005      	b.n	800fdb6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800fdb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	d008      	beq.n	800fdea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2204      	movs	r2, #4
 800fddc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800fde6:	2301      	movs	r3, #1
 800fde8:	e022      	b.n	800fe30 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f022 020e 	bic.w	r2, r2, #14
 800fdf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f022 0201 	bic.w	r2, r2, #1
 800fe08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe0e:	f003 021c 	and.w	r2, r3, #28
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe16:	2101      	movs	r1, #1
 800fe18:	fa01 f202 	lsl.w	r2, r1, r2
 800fe1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2201      	movs	r2, #1
 800fe22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800fe2e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	3714      	adds	r7, #20
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bc80      	pop	{r7}
 800fe38:	4770      	bx	lr

0800fe3a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe42:	2300      	movs	r3, #0
 800fe44:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d005      	beq.n	800fe5e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2204      	movs	r2, #4
 800fe56:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	73fb      	strb	r3, [r7, #15]
 800fe5c:	e029      	b.n	800feb2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f022 020e 	bic.w	r2, r2, #14
 800fe6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f022 0201 	bic.w	r2, r2, #1
 800fe7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe82:	f003 021c 	and.w	r2, r3, #28
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe8a:	2101      	movs	r1, #1
 800fe8c:	fa01 f202 	lsl.w	r2, r1, r2
 800fe90:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2201      	movs	r2, #1
 800fe96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d003      	beq.n	800feb2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	4798      	blx	r3
    }
  }
  return status;
 800feb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3710      	adds	r7, #16
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fed8:	f003 031c 	and.w	r3, r3, #28
 800fedc:	2204      	movs	r2, #4
 800fede:	409a      	lsls	r2, r3
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	4013      	ands	r3, r2
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d026      	beq.n	800ff36 <HAL_DMA_IRQHandler+0x7a>
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	f003 0304 	and.w	r3, r3, #4
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d021      	beq.n	800ff36 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f003 0320 	and.w	r3, r3, #32
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d107      	bne.n	800ff10 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f022 0204 	bic.w	r2, r2, #4
 800ff0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff14:	f003 021c 	and.w	r2, r3, #28
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff1c:	2104      	movs	r1, #4
 800ff1e:	fa01 f202 	lsl.w	r2, r1, r2
 800ff22:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d071      	beq.n	8010010 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800ff34:	e06c      	b.n	8010010 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff3a:	f003 031c 	and.w	r3, r3, #28
 800ff3e:	2202      	movs	r2, #2
 800ff40:	409a      	lsls	r2, r3
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	4013      	ands	r3, r2
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d02e      	beq.n	800ffa8 <HAL_DMA_IRQHandler+0xec>
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	f003 0302 	and.w	r3, r3, #2
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d029      	beq.n	800ffa8 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f003 0320 	and.w	r3, r3, #32
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d10b      	bne.n	800ff7a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f022 020a 	bic.w	r2, r2, #10
 800ff70:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2201      	movs	r2, #1
 800ff76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff7e:	f003 021c 	and.w	r2, r3, #28
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff86:	2102      	movs	r1, #2
 800ff88:	fa01 f202 	lsl.w	r2, r1, r2
 800ff8c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d038      	beq.n	8010010 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800ffa6:	e033      	b.n	8010010 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffac:	f003 031c 	and.w	r3, r3, #28
 800ffb0:	2208      	movs	r2, #8
 800ffb2:	409a      	lsls	r2, r3
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	4013      	ands	r3, r2
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d02a      	beq.n	8010012 <HAL_DMA_IRQHandler+0x156>
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	f003 0308 	and.w	r3, r3, #8
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d025      	beq.n	8010012 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f022 020e 	bic.w	r2, r2, #14
 800ffd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffda:	f003 021c 	and.w	r2, r3, #28
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffe2:	2101      	movs	r1, #1
 800ffe4:	fa01 f202 	lsl.w	r2, r1, r2
 800ffe8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2201      	movs	r2, #1
 800ffee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2201      	movs	r2, #1
 800fff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010004:	2b00      	cmp	r3, #0
 8010006:	d004      	beq.n	8010012 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8010010:	bf00      	nop
 8010012:	bf00      	nop
}
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801001a:	b480      	push	{r7}
 801001c:	b085      	sub	sp, #20
 801001e:	af00      	add	r7, sp, #0
 8010020:	60f8      	str	r0, [r7, #12]
 8010022:	60b9      	str	r1, [r7, #8]
 8010024:	607a      	str	r2, [r7, #4]
 8010026:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801002c:	f003 021c 	and.w	r2, r3, #28
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010034:	2101      	movs	r1, #1
 8010036:	fa01 f202 	lsl.w	r2, r1, r2
 801003a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	683a      	ldr	r2, [r7, #0]
 8010042:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	2b10      	cmp	r3, #16
 801004a:	d108      	bne.n	801005e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	68ba      	ldr	r2, [r7, #8]
 801005a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801005c:	e007      	b.n	801006e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	60da      	str	r2, [r3, #12]
}
 801006e:	bf00      	nop
 8010070:	3714      	adds	r7, #20
 8010072:	46bd      	mov	sp, r7
 8010074:	bc80      	pop	{r7}
 8010076:	4770      	bx	lr

08010078 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b086      	sub	sp, #24
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010084:	2301      	movs	r3, #1
 8010086:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010088:	4b12      	ldr	r3, [pc, #72]	; (80100d4 <HAL_FLASH_Program+0x5c>)
 801008a:	7c1b      	ldrb	r3, [r3, #16]
 801008c:	2b01      	cmp	r3, #1
 801008e:	d101      	bne.n	8010094 <HAL_FLASH_Program+0x1c>
 8010090:	2302      	movs	r3, #2
 8010092:	e01b      	b.n	80100cc <HAL_FLASH_Program+0x54>
 8010094:	4b0f      	ldr	r3, [pc, #60]	; (80100d4 <HAL_FLASH_Program+0x5c>)
 8010096:	2201      	movs	r2, #1
 8010098:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801009a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801009e:	f000 f865 	bl	801016c <FLASH_WaitForLastOperation>
 80100a2:	4603      	mov	r3, r0
 80100a4:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10b      	bne.n	80100c4 <HAL_FLASH_Program+0x4c>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80100ac:	4b09      	ldr	r3, [pc, #36]	; (80100d4 <HAL_FLASH_Program+0x5c>)
 80100ae:	2200      	movs	r2, #0
 80100b0:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80100b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80100bc:	f000 f856 	bl	801016c <FLASH_WaitForLastOperation>
 80100c0:	4603      	mov	r3, r0
 80100c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80100c4:	4b03      	ldr	r3, [pc, #12]	; (80100d4 <HAL_FLASH_Program+0x5c>)
 80100c6:	2200      	movs	r2, #0
 80100c8:	741a      	strb	r2, [r3, #16]

  return status;
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3718      	adds	r7, #24
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	20000f8c 	.word	0x20000f8c

080100d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80100d8:	b480      	push	{r7}
 80100da:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80100dc:	4b16      	ldr	r3, [pc, #88]	; (8010138 <HAL_FLASH_Unlock+0x60>)
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	f003 0302 	and.w	r3, r3, #2
 80100e4:	2b02      	cmp	r3, #2
 80100e6:	d121      	bne.n	801012c <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80100e8:	4b13      	ldr	r3, [pc, #76]	; (8010138 <HAL_FLASH_Unlock+0x60>)
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	f003 0301 	and.w	r3, r3, #1
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	d10d      	bne.n	8010110 <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80100f4:	4b10      	ldr	r3, [pc, #64]	; (8010138 <HAL_FLASH_Unlock+0x60>)
 80100f6:	4a11      	ldr	r2, [pc, #68]	; (801013c <HAL_FLASH_Unlock+0x64>)
 80100f8:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80100fa:	4b0f      	ldr	r3, [pc, #60]	; (8010138 <HAL_FLASH_Unlock+0x60>)
 80100fc:	4a10      	ldr	r2, [pc, #64]	; (8010140 <HAL_FLASH_Unlock+0x68>)
 80100fe:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8010100:	4b0d      	ldr	r3, [pc, #52]	; (8010138 <HAL_FLASH_Unlock+0x60>)
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	f003 0301 	and.w	r3, r3, #1
 8010108:	2b01      	cmp	r3, #1
 801010a:	d101      	bne.n	8010110 <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 801010c:	2301      	movs	r3, #1
 801010e:	e00e      	b.n	801012e <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8010110:	4b09      	ldr	r3, [pc, #36]	; (8010138 <HAL_FLASH_Unlock+0x60>)
 8010112:	4a0c      	ldr	r2, [pc, #48]	; (8010144 <HAL_FLASH_Unlock+0x6c>)
 8010114:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8010116:	4b08      	ldr	r3, [pc, #32]	; (8010138 <HAL_FLASH_Unlock+0x60>)
 8010118:	4a0b      	ldr	r2, [pc, #44]	; (8010148 <HAL_FLASH_Unlock+0x70>)
 801011a:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 801011c:	4b06      	ldr	r3, [pc, #24]	; (8010138 <HAL_FLASH_Unlock+0x60>)
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	f003 0302 	and.w	r3, r3, #2
 8010124:	2b02      	cmp	r3, #2
 8010126:	d101      	bne.n	801012c <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 8010128:	2301      	movs	r3, #1
 801012a:	e000      	b.n	801012e <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	46bd      	mov	sp, r7
 8010132:	bc80      	pop	{r7}
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop
 8010138:	40023c00 	.word	0x40023c00
 801013c:	89abcdef 	.word	0x89abcdef
 8010140:	02030405 	.word	0x02030405
 8010144:	8c9daebf 	.word	0x8c9daebf
 8010148:	13141516 	.word	0x13141516

0801014c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801014c:	b480      	push	{r7}
 801014e:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8010150:	4b05      	ldr	r3, [pc, #20]	; (8010168 <HAL_FLASH_Lock+0x1c>)
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	4a04      	ldr	r2, [pc, #16]	; (8010168 <HAL_FLASH_Lock+0x1c>)
 8010156:	f043 0302 	orr.w	r3, r3, #2
 801015a:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 801015c:	2300      	movs	r3, #0
}
 801015e:	4618      	mov	r0, r3
 8010160:	46bd      	mov	sp, r7
 8010162:	bc80      	pop	{r7}
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	40023c00 	.word	0x40023c00

0801016c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8010174:	f7fe ff4e 	bl	800f014 <HAL_GetTick>
 8010178:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801017a:	e010      	b.n	801019e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010182:	d00c      	beq.n	801019e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d007      	beq.n	801019a <FLASH_WaitForLastOperation+0x2e>
 801018a:	f7fe ff43 	bl	800f014 <HAL_GetTick>
 801018e:	4602      	mov	r2, r0
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	429a      	cmp	r2, r3
 8010198:	d201      	bcs.n	801019e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 801019a:	2303      	movs	r3, #3
 801019c:	e03d      	b.n	801021a <FLASH_WaitForLastOperation+0xae>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801019e:	4b21      	ldr	r3, [pc, #132]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 80101a0:	699b      	ldr	r3, [r3, #24]
 80101a2:	f003 0301 	and.w	r3, r3, #1
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d0e8      	beq.n	801017c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80101aa:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 80101ac:	699b      	ldr	r3, [r3, #24]
 80101ae:	f003 0302 	and.w	r3, r3, #2
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	d102      	bne.n	80101bc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80101b6:	4b1b      	ldr	r3, [pc, #108]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 80101b8:	2202      	movs	r2, #2
 80101ba:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80101bc:	4b19      	ldr	r3, [pc, #100]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 80101be:	699b      	ldr	r3, [r3, #24]
 80101c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101c8:	d022      	beq.n	8010210 <FLASH_WaitForLastOperation+0xa4>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80101ca:	4b16      	ldr	r3, [pc, #88]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 80101cc:	699b      	ldr	r3, [r3, #24]
 80101ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80101d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80101d6:	d01b      	beq.n	8010210 <FLASH_WaitForLastOperation+0xa4>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 80101d8:	4b12      	ldr	r3, [pc, #72]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 80101da:	699b      	ldr	r3, [r3, #24]
 80101dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80101e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101e4:	d014      	beq.n	8010210 <FLASH_WaitForLastOperation+0xa4>
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 80101e6:	4b0f      	ldr	r3, [pc, #60]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 80101e8:	699b      	ldr	r3, [r3, #24]
 80101ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 80101ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101f2:	d00d      	beq.n	8010210 <FLASH_WaitForLastOperation+0xa4>
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80101f4:	4b0b      	ldr	r3, [pc, #44]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 80101f6:	699b      	ldr	r3, [r3, #24]
 80101f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 80101fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010200:	d006      	beq.n	8010210 <FLASH_WaitForLastOperation+0xa4>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8010202:	4b08      	ldr	r3, [pc, #32]	; (8010224 <FLASH_WaitForLastOperation+0xb8>)
 8010204:	699b      	ldr	r3, [r3, #24]
 8010206:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 801020a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801020e:	d103      	bne.n	8010218 <FLASH_WaitForLastOperation+0xac>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8010210:	f000 f80a 	bl	8010228 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010214:	2301      	movs	r3, #1
 8010216:	e000      	b.n	801021a <FLASH_WaitForLastOperation+0xae>
  }

  /* There is no error flag set */
  return HAL_OK;
 8010218:	2300      	movs	r3, #0
}
 801021a:	4618      	mov	r0, r3
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	40023c00 	.word	0x40023c00

08010228 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 801022e:	2300      	movs	r3, #0
 8010230:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010232:	4b37      	ldr	r3, [pc, #220]	; (8010310 <FLASH_SetErrorCode+0xe8>)
 8010234:	699b      	ldr	r3, [r3, #24]
 8010236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801023a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801023e:	d109      	bne.n	8010254 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010240:	4b34      	ldr	r3, [pc, #208]	; (8010314 <FLASH_SetErrorCode+0xec>)
 8010242:	695b      	ldr	r3, [r3, #20]
 8010244:	f043 0302 	orr.w	r3, r3, #2
 8010248:	4a32      	ldr	r2, [pc, #200]	; (8010314 <FLASH_SetErrorCode+0xec>)
 801024a:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010252:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8010254:	4b2e      	ldr	r3, [pc, #184]	; (8010310 <FLASH_SetErrorCode+0xe8>)
 8010256:	699b      	ldr	r3, [r3, #24]
 8010258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801025c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010260:	d109      	bne.n	8010276 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010262:	4b2c      	ldr	r3, [pc, #176]	; (8010314 <FLASH_SetErrorCode+0xec>)
 8010264:	695b      	ldr	r3, [r3, #20]
 8010266:	f043 0301 	orr.w	r3, r3, #1
 801026a:	4a2a      	ldr	r2, [pc, #168]	; (8010314 <FLASH_SetErrorCode+0xec>)
 801026c:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010274:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8010276:	4b26      	ldr	r3, [pc, #152]	; (8010310 <FLASH_SetErrorCode+0xe8>)
 8010278:	699b      	ldr	r3, [r3, #24]
 801027a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801027e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010282:	d109      	bne.n	8010298 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8010284:	4b23      	ldr	r3, [pc, #140]	; (8010314 <FLASH_SetErrorCode+0xec>)
 8010286:	695b      	ldr	r3, [r3, #20]
 8010288:	f043 0304 	orr.w	r3, r3, #4
 801028c:	4a21      	ldr	r2, [pc, #132]	; (8010314 <FLASH_SetErrorCode+0xec>)
 801028e:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010296:	607b      	str	r3, [r7, #4]
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8010298:	4b1d      	ldr	r3, [pc, #116]	; (8010310 <FLASH_SetErrorCode+0xe8>)
 801029a:	699b      	ldr	r3, [r3, #24]
 801029c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80102a4:	d109      	bne.n	80102ba <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80102a6:	4b1b      	ldr	r3, [pc, #108]	; (8010314 <FLASH_SetErrorCode+0xec>)
 80102a8:	695b      	ldr	r3, [r3, #20]
 80102aa:	f043 0310 	orr.w	r3, r3, #16
 80102ae:	4a19      	ldr	r2, [pc, #100]	; (8010314 <FLASH_SetErrorCode+0xec>)
 80102b0:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_RDERR;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80102b8:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 80102ba:	4b15      	ldr	r3, [pc, #84]	; (8010310 <FLASH_SetErrorCode+0xe8>)
 80102bc:	699b      	ldr	r3, [r3, #24]
 80102be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80102c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102c6:	d109      	bne.n	80102dc <FLASH_SetErrorCode+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 80102c8:	4b12      	ldr	r3, [pc, #72]	; (8010314 <FLASH_SetErrorCode+0xec>)
 80102ca:	695b      	ldr	r3, [r3, #20]
 80102cc:	f043 0320 	orr.w	r3, r3, #32
 80102d0:	4a10      	ldr	r2, [pc, #64]	; (8010314 <FLASH_SetErrorCode+0xec>)
 80102d2:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80102da:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80102dc:	4b0c      	ldr	r3, [pc, #48]	; (8010310 <FLASH_SetErrorCode+0xe8>)
 80102de:	699b      	ldr	r3, [r3, #24]
 80102e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80102e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102e8:	d109      	bne.n	80102fe <FLASH_SetErrorCode+0xd6>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80102ea:	4b0a      	ldr	r3, [pc, #40]	; (8010314 <FLASH_SetErrorCode+0xec>)
 80102ec:	695b      	ldr	r3, [r3, #20]
 80102ee:	f043 0308 	orr.w	r3, r3, #8
 80102f2:	4a08      	ldr	r2, [pc, #32]	; (8010314 <FLASH_SetErrorCode+0xec>)
 80102f4:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80102fc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80102fe:	4a04      	ldr	r2, [pc, #16]	; (8010310 <FLASH_SetErrorCode+0xe8>)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6193      	str	r3, [r2, #24]
}
 8010304:	bf00      	nop
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	bc80      	pop	{r7}
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop
 8010310:	40023c00 	.word	0x40023c00
 8010314:	20000f8c 	.word	0x20000f8c

08010318 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010322:	2301      	movs	r3, #1
 8010324:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8010326:	2300      	movs	r3, #0
 8010328:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801032a:	4b25      	ldr	r3, [pc, #148]	; (80103c0 <HAL_FLASHEx_Erase+0xa8>)
 801032c:	7c1b      	ldrb	r3, [r3, #16]
 801032e:	2b01      	cmp	r3, #1
 8010330:	d101      	bne.n	8010336 <HAL_FLASHEx_Erase+0x1e>
 8010332:	2302      	movs	r3, #2
 8010334:	e040      	b.n	80103b8 <HAL_FLASHEx_Erase+0xa0>
 8010336:	4b22      	ldr	r3, [pc, #136]	; (80103c0 <HAL_FLASHEx_Erase+0xa8>)
 8010338:	2201      	movs	r2, #1
 801033a:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801033c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010340:	f7ff ff14 	bl	801016c <FLASH_WaitForLastOperation>
 8010344:	4603      	mov	r3, r0
 8010346:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8010348:	7bfb      	ldrb	r3, [r7, #15]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d130      	bne.n	80103b0 <HAL_FLASHEx_Erase+0x98>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	f04f 32ff 	mov.w	r2, #4294967295
 8010354:	601a      	str	r2, [r3, #0]
      }
    }
#endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	60bb      	str	r3, [r7, #8]
 801035c:	e01f      	b.n	801039e <HAL_FLASHEx_Erase+0x86>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 801035e:	68b8      	ldr	r0, [r7, #8]
 8010360:	f000 f9d0 	bl	8010704 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010368:	f7ff ff00 	bl	801016c <FLASH_WaitForLastOperation>
 801036c:	4603      	mov	r3, r0
 801036e:	73fb      	strb	r3, [r7, #15]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8010370:	4b14      	ldr	r3, [pc, #80]	; (80103c4 <HAL_FLASHEx_Erase+0xac>)
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	4a13      	ldr	r2, [pc, #76]	; (80103c4 <HAL_FLASHEx_Erase+0xac>)
 8010376:	f023 0308 	bic.w	r3, r3, #8
 801037a:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 801037c:	4b11      	ldr	r3, [pc, #68]	; (80103c4 <HAL_FLASHEx_Erase+0xac>)
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	4a10      	ldr	r2, [pc, #64]	; (80103c4 <HAL_FLASHEx_Erase+0xac>)
 8010382:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010386:	6053      	str	r3, [r2, #4]

      if (status != HAL_OK)
 8010388:	7bfb      	ldrb	r3, [r7, #15]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d003      	beq.n	8010396 <HAL_FLASHEx_Erase+0x7e>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	601a      	str	r2, [r3, #0]
        break;
 8010394:	e00c      	b.n	80103b0 <HAL_FLASHEx_Erase+0x98>
        address += FLASH_PAGE_SIZE)
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801039c:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	021a      	lsls	r2, r3, #8
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	4413      	add	r3, r2
    for(address = pEraseInit->PageAddress;
 80103aa:	68ba      	ldr	r2, [r7, #8]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d3d6      	bcc.n	801035e <HAL_FLASHEx_Erase+0x46>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80103b0:	4b03      	ldr	r3, [pc, #12]	; (80103c0 <HAL_FLASHEx_Erase+0xa8>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	741a      	strb	r2, [r3, #16]

  return status;
 80103b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3710      	adds	r7, #16
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	20000f8c 	.word	0x20000f8c
 80103c4:	40023c00 	.word	0x40023c00

080103c8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80103c8:	b480      	push	{r7}
 80103ca:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80103cc:	4b09      	ldr	r3, [pc, #36]	; (80103f4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	f003 0301 	and.w	r3, r3, #1
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d007      	beq.n	80103e8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80103d8:	4b06      	ldr	r3, [pc, #24]	; (80103f4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80103da:	4a07      	ldr	r2, [pc, #28]	; (80103f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80103dc:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80103de:	4b05      	ldr	r3, [pc, #20]	; (80103f4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80103e0:	4a06      	ldr	r2, [pc, #24]	; (80103fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 80103e2:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 80103e4:	2300      	movs	r3, #0
 80103e6:	e000      	b.n	80103ea <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 80103e8:	2301      	movs	r3, #1
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bc80      	pop	{r7}
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	40023c00 	.word	0x40023c00
 80103f8:	89abcdef 	.word	0x89abcdef
 80103fc:	02030405 	.word	0x02030405

08010400 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8010400:	b480      	push	{r7}
 8010402:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8010404:	4b05      	ldr	r3, [pc, #20]	; (801041c <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	4a04      	ldr	r2, [pc, #16]	; (801041c <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 801040a:	f043 0301 	orr.w	r3, r3, #1
 801040e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010410:	2300      	movs	r3, #0
}
 8010412:	4618      	mov	r0, r3
 8010414:	46bd      	mov	sp, r7
 8010416:	bc80      	pop	{r7}
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop
 801041c:	40023c00 	.word	0x40023c00

08010420 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801042a:	2300      	movs	r3, #0
 801042c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801042e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010432:	f7ff fe9b 	bl	801016c <FLASH_WaitForLastOperation>
 8010436:	4603      	mov	r3, r0
 8010438:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d11a      	bne.n	8010476 <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010440:	4b0f      	ldr	r3, [pc, #60]	; (8010480 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 8010442:	2200      	movs	r2, #0
 8010444:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2b02      	cmp	r3, #2
 801044a:	d102      	bne.n	8010452 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	2200      	movs	r2, #0
 8010450:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d102      	bne.n	801045e <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2200      	movs	r2, #0
 801045c:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d102      	bne.n	801046a <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	2200      	movs	r2, #0
 8010468:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801046a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801046e:	f7ff fe7d 	bl	801016c <FLASH_WaitForLastOperation>
 8010472:	4603      	mov	r3, r0
 8010474:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 8010476:	7bfb      	ldrb	r3, [r7, #15]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	20000f8c 	.word	0x20000f8c

08010484 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b086      	sub	sp, #24
 8010488:	af00      	add	r7, sp, #0
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010490:	2301      	movs	r3, #1
 8010492:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010494:	4b31      	ldr	r3, [pc, #196]	; (801055c <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8010496:	7c1b      	ldrb	r3, [r3, #16]
 8010498:	2b01      	cmp	r3, #1
 801049a:	d101      	bne.n	80104a0 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 801049c:	2302      	movs	r3, #2
 801049e:	e058      	b.n	8010552 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 80104a0:	4b2e      	ldr	r3, [pc, #184]	; (801055c <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80104a2:	2201      	movs	r2, #1
 80104a4:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80104a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80104aa:	f7ff fe5f 	bl	801016c <FLASH_WaitForLastOperation>
 80104ae:	4603      	mov	r3, r0
 80104b0:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80104b2:	7dfb      	ldrb	r3, [r7, #23]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d148      	bne.n	801054a <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80104b8:	4b28      	ldr	r3, [pc, #160]	; (801055c <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2b02      	cmp	r3, #2
 80104c2:	d106      	bne.n	80104d2 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 80104c4:	6879      	ldr	r1, [r7, #4]
 80104c6:	68b8      	ldr	r0, [r7, #8]
 80104c8:	f000 f8fe 	bl	80106c8 <FLASH_DATAEEPROM_ProgramWord>
 80104cc:	4603      	mov	r3, r0
 80104ce:	75fb      	strb	r3, [r7, #23]
 80104d0:	e03b      	b.n	801054a <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d108      	bne.n	80104ea <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	4619      	mov	r1, r3
 80104de:	68b8      	ldr	r0, [r7, #8]
 80104e0:	f000 f8d3 	bl	801068a <FLASH_DATAEEPROM_ProgramHalfWord>
 80104e4:	4603      	mov	r3, r0
 80104e6:	75fb      	strb	r3, [r7, #23]
 80104e8:	e02f      	b.n	801054a <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d108      	bne.n	8010502 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	4619      	mov	r1, r3
 80104f6:	68b8      	ldr	r0, [r7, #8]
 80104f8:	f000 f8a8 	bl	801064c <FLASH_DATAEEPROM_ProgramByte>
 80104fc:	4603      	mov	r3, r0
 80104fe:	75fb      	strb	r3, [r7, #23]
 8010500:	e023      	b.n	801054a <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2b04      	cmp	r3, #4
 8010506:	d108      	bne.n	801051a <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	b2db      	uxtb	r3, r3
 801050c:	4619      	mov	r1, r3
 801050e:	68b8      	ldr	r0, [r7, #8]
 8010510:	f000 f826 	bl	8010560 <FLASH_DATAEEPROM_FastProgramByte>
 8010514:	4603      	mov	r3, r0
 8010516:	75fb      	strb	r3, [r7, #23]
 8010518:	e017      	b.n	801054a <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2b08      	cmp	r3, #8
 801051e:	d108      	bne.n	8010532 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	b29b      	uxth	r3, r3
 8010524:	4619      	mov	r1, r3
 8010526:	68b8      	ldr	r0, [r7, #8]
 8010528:	f000 f842 	bl	80105b0 <FLASH_DATAEEPROM_FastProgramHalfWord>
 801052c:	4603      	mov	r3, r0
 801052e:	75fb      	strb	r3, [r7, #23]
 8010530:	e00b      	b.n	801054a <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2b10      	cmp	r3, #16
 8010536:	d106      	bne.n	8010546 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8010538:	6879      	ldr	r1, [r7, #4]
 801053a:	68b8      	ldr	r0, [r7, #8]
 801053c:	f000 f860 	bl	8010600 <FLASH_DATAEEPROM_FastProgramWord>
 8010540:	4603      	mov	r3, r0
 8010542:	75fb      	strb	r3, [r7, #23]
 8010544:	e001      	b.n	801054a <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 8010546:	2301      	movs	r3, #1
 8010548:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801054a:	4b04      	ldr	r3, [pc, #16]	; (801055c <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 801054c:	2200      	movs	r2, #0
 801054e:	741a      	strb	r2, [r3, #16]

  return status;
 8010550:	7dfb      	ldrb	r3, [r7, #23]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3718      	adds	r7, #24
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20000f8c 	.word	0x20000f8c

08010560 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	460b      	mov	r3, r1
 801056a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010570:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010574:	f7ff fdfa 	bl	801016c <FLASH_WaitForLastOperation>
 8010578:	4603      	mov	r3, r0
 801057a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d10e      	bne.n	80105a0 <FLASH_DATAEEPROM_FastProgramByte+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8010582:	4b0a      	ldr	r3, [pc, #40]	; (80105ac <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	4a09      	ldr	r2, [pc, #36]	; (80105ac <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 8010588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801058c:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /*!Cat1*/
    /* If the previous operation is completed, proceed to write the new Data */
    *(__IO uint8_t *)Address = Data;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	78fa      	ldrb	r2, [r7, #3]
 8010592:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010594:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010598:	f7ff fde8 	bl	801016c <FLASH_WaitForLastOperation>
 801059c:	4603      	mov	r3, r0
 801059e:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80105a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	40023c00 	.word	0x40023c00

080105b0 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80105bc:	2300      	movs	r3, #0
 80105be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80105c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80105c4:	f7ff fdd2 	bl	801016c <FLASH_WaitForLastOperation>
 80105c8:	4603      	mov	r3, r0
 80105ca:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80105cc:	7bfb      	ldrb	r3, [r7, #15]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d10e      	bne.n	80105f0 <FLASH_DATAEEPROM_FastProgramHalfWord+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80105d2:	4b0a      	ldr	r3, [pc, #40]	; (80105fc <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	4a09      	ldr	r2, [pc, #36]	; (80105fc <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 80105d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105dc:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* !Cat1 */
    /* If the previous operation is completed, proceed to write the new data */
    *(__IO uint16_t *)Address = Data;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	887a      	ldrh	r2, [r7, #2]
 80105e2:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80105e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80105e8:	f7ff fdc0 	bl	801016c <FLASH_WaitForLastOperation>
 80105ec:	4603      	mov	r3, r0
 80105ee:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80105f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	40023c00 	.word	0x40023c00

08010600 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b084      	sub	sp, #16
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801060a:	2300      	movs	r3, #0
 801060c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801060e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010612:	f7ff fdab 	bl	801016c <FLASH_WaitForLastOperation>
 8010616:	4603      	mov	r3, r0
 8010618:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801061a:	7bfb      	ldrb	r3, [r7, #15]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10e      	bne.n	801063e <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8010620:	4b09      	ldr	r3, [pc, #36]	; (8010648 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	4a08      	ldr	r2, [pc, #32]	; (8010648 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8010626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801062a:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	683a      	ldr	r2, [r7, #0]
 8010630:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010632:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010636:	f7ff fd99 	bl	801016c <FLASH_WaitForLastOperation>
 801063a:	4603      	mov	r3, r0
 801063c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 801063e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3710      	adds	r7, #16
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	40023c00 	.word	0x40023c00

0801064c <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	460b      	mov	r3, r1
 8010656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8010658:	2300      	movs	r3, #0
 801065a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801065c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010660:	f7ff fd84 	bl	801016c <FLASH_WaitForLastOperation>
 8010664:	4603      	mov	r3, r0
 8010666:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8010668:	7bfb      	ldrb	r3, [r7, #15]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d108      	bne.n	8010680 <FLASH_DATAEEPROM_ProgramByte+0x34>
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint8_t *)Address = Data;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	78fa      	ldrb	r2, [r7, #3]
 8010672:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010674:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010678:	f7ff fd78 	bl	801016c <FLASH_WaitForLastOperation>
 801067c:	4603      	mov	r3, r0
 801067e:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8010680:	7bfb      	ldrb	r3, [r7, #15]
}
 8010682:	4618      	mov	r0, r3
 8010684:	3710      	adds	r7, #16
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 801068a:	b580      	push	{r7, lr}
 801068c:	b084      	sub	sp, #16
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
 8010692:	460b      	mov	r3, r1
 8010694:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8010696:	2300      	movs	r3, #0
 8010698:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801069a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801069e:	f7ff fd65 	bl	801016c <FLASH_WaitForLastOperation>
 80106a2:	4603      	mov	r3, r0
 80106a4:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d108      	bne.n	80106be <FLASH_DATAEEPROM_ProgramHalfWord+0x34>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint16_t *)Address = Data;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	887a      	ldrh	r2, [r7, #2]
 80106b0:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80106b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80106b6:	f7ff fd59 	bl	801016c <FLASH_WaitForLastOperation>
 80106ba:	4603      	mov	r3, r0
 80106bc:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80106be:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3710      	adds	r7, #16
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80106d2:	2300      	movs	r3, #0
 80106d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80106d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80106da:	f7ff fd47 	bl	801016c <FLASH_WaitForLastOperation>
 80106de:	4603      	mov	r3, r0
 80106e0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80106e2:	7bfb      	ldrb	r3, [r7, #15]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d108      	bne.n	80106fa <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	683a      	ldr	r2, [r7, #0]
 80106ec:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80106ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80106f2:	f7ff fd3b 	bl	801016c <FLASH_WaitForLastOperation>
 80106f6:	4603      	mov	r3, r0
 80106f8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3710      	adds	r7, #16
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801070c:	4b0c      	ldr	r3, [pc, #48]	; (8010740 <FLASH_PageErase+0x3c>)
 801070e:	2200      	movs	r2, #0
 8010710:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8010712:	4b0c      	ldr	r3, [pc, #48]	; (8010744 <FLASH_PageErase+0x40>)
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	4a0b      	ldr	r2, [pc, #44]	; (8010744 <FLASH_PageErase+0x40>)
 8010718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801071c:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 801071e:	4b09      	ldr	r3, [pc, #36]	; (8010744 <FLASH_PageErase+0x40>)
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	4a08      	ldr	r2, [pc, #32]	; (8010744 <FLASH_PageErase+0x40>)
 8010724:	f043 0308 	orr.w	r3, r3, #8
 8010728:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010730:	461a      	mov	r2, r3
 8010732:	2300      	movs	r3, #0
 8010734:	6013      	str	r3, [r2, #0]
}
 8010736:	bf00      	nop
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	bc80      	pop	{r7}
 801073e:	4770      	bx	lr
 8010740:	20000f8c 	.word	0x20000f8c
 8010744:	40023c00 	.word	0x40023c00

08010748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010748:	b480      	push	{r7}
 801074a:	b087      	sub	sp, #28
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8010752:	2300      	movs	r3, #0
 8010754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8010756:	2300      	movs	r3, #0
 8010758:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 801075a:	2300      	movs	r3, #0
 801075c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801075e:	e154      	b.n	8010a0a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	2101      	movs	r1, #1
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	fa01 f303 	lsl.w	r3, r1, r3
 801076c:	4013      	ands	r3, r2
 801076e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2b00      	cmp	r3, #0
 8010774:	f000 8146 	beq.w	8010a04 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	f003 0303 	and.w	r3, r3, #3
 8010780:	2b01      	cmp	r3, #1
 8010782:	d005      	beq.n	8010790 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801078c:	2b02      	cmp	r3, #2
 801078e:	d130      	bne.n	80107f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	689b      	ldr	r3, [r3, #8]
 8010794:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	005b      	lsls	r3, r3, #1
 801079a:	2203      	movs	r2, #3
 801079c:	fa02 f303 	lsl.w	r3, r2, r3
 80107a0:	43db      	mvns	r3, r3
 80107a2:	693a      	ldr	r2, [r7, #16]
 80107a4:	4013      	ands	r3, r2
 80107a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	68da      	ldr	r2, [r3, #12]
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	005b      	lsls	r3, r3, #1
 80107b0:	fa02 f303 	lsl.w	r3, r2, r3
 80107b4:	693a      	ldr	r2, [r7, #16]
 80107b6:	4313      	orrs	r3, r2
 80107b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	693a      	ldr	r2, [r7, #16]
 80107be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80107c6:	2201      	movs	r2, #1
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	fa02 f303 	lsl.w	r3, r2, r3
 80107ce:	43db      	mvns	r3, r3
 80107d0:	693a      	ldr	r2, [r7, #16]
 80107d2:	4013      	ands	r3, r2
 80107d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	091b      	lsrs	r3, r3, #4
 80107dc:	f003 0201 	and.w	r2, r3, #1
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	fa02 f303 	lsl.w	r3, r2, r3
 80107e6:	693a      	ldr	r2, [r7, #16]
 80107e8:	4313      	orrs	r3, r2
 80107ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	693a      	ldr	r2, [r7, #16]
 80107f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	f003 0303 	and.w	r3, r3, #3
 80107fa:	2b03      	cmp	r3, #3
 80107fc:	d017      	beq.n	801082e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	2203      	movs	r2, #3
 801080a:	fa02 f303 	lsl.w	r3, r2, r3
 801080e:	43db      	mvns	r3, r3
 8010810:	693a      	ldr	r2, [r7, #16]
 8010812:	4013      	ands	r3, r2
 8010814:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	689a      	ldr	r2, [r3, #8]
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	005b      	lsls	r3, r3, #1
 801081e:	fa02 f303 	lsl.w	r3, r2, r3
 8010822:	693a      	ldr	r2, [r7, #16]
 8010824:	4313      	orrs	r3, r2
 8010826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	693a      	ldr	r2, [r7, #16]
 801082c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	f003 0303 	and.w	r3, r3, #3
 8010836:	2b02      	cmp	r3, #2
 8010838:	d123      	bne.n	8010882 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	08da      	lsrs	r2, r3, #3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	3208      	adds	r2, #8
 8010842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010846:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	f003 0307 	and.w	r3, r3, #7
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	220f      	movs	r2, #15
 8010852:	fa02 f303 	lsl.w	r3, r2, r3
 8010856:	43db      	mvns	r3, r3
 8010858:	693a      	ldr	r2, [r7, #16]
 801085a:	4013      	ands	r3, r2
 801085c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	691a      	ldr	r2, [r3, #16]
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	f003 0307 	and.w	r3, r3, #7
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	fa02 f303 	lsl.w	r3, r2, r3
 801086e:	693a      	ldr	r2, [r7, #16]
 8010870:	4313      	orrs	r3, r2
 8010872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	08da      	lsrs	r2, r3, #3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	3208      	adds	r2, #8
 801087c:	6939      	ldr	r1, [r7, #16]
 801087e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	005b      	lsls	r3, r3, #1
 801088c:	2203      	movs	r2, #3
 801088e:	fa02 f303 	lsl.w	r3, r2, r3
 8010892:	43db      	mvns	r3, r3
 8010894:	693a      	ldr	r2, [r7, #16]
 8010896:	4013      	ands	r3, r2
 8010898:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	f003 0203 	and.w	r2, r3, #3
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	005b      	lsls	r3, r3, #1
 80108a6:	fa02 f303 	lsl.w	r3, r2, r3
 80108aa:	693a      	ldr	r2, [r7, #16]
 80108ac:	4313      	orrs	r3, r2
 80108ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	693a      	ldr	r2, [r7, #16]
 80108b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f000 80a0 	beq.w	8010a04 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80108c4:	4b58      	ldr	r3, [pc, #352]	; (8010a28 <HAL_GPIO_Init+0x2e0>)
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	4a57      	ldr	r2, [pc, #348]	; (8010a28 <HAL_GPIO_Init+0x2e0>)
 80108ca:	f043 0301 	orr.w	r3, r3, #1
 80108ce:	6213      	str	r3, [r2, #32]
 80108d0:	4b55      	ldr	r3, [pc, #340]	; (8010a28 <HAL_GPIO_Init+0x2e0>)
 80108d2:	6a1b      	ldr	r3, [r3, #32]
 80108d4:	f003 0301 	and.w	r3, r3, #1
 80108d8:	60bb      	str	r3, [r7, #8]
 80108da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80108dc:	4a53      	ldr	r2, [pc, #332]	; (8010a2c <HAL_GPIO_Init+0x2e4>)
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	089b      	lsrs	r3, r3, #2
 80108e2:	3302      	adds	r3, #2
 80108e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	f003 0303 	and.w	r3, r3, #3
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	220f      	movs	r2, #15
 80108f4:	fa02 f303 	lsl.w	r3, r2, r3
 80108f8:	43db      	mvns	r3, r3
 80108fa:	693a      	ldr	r2, [r7, #16]
 80108fc:	4013      	ands	r3, r2
 80108fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4a4b      	ldr	r2, [pc, #300]	; (8010a30 <HAL_GPIO_Init+0x2e8>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d019      	beq.n	801093c <HAL_GPIO_Init+0x1f4>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4a4a      	ldr	r2, [pc, #296]	; (8010a34 <HAL_GPIO_Init+0x2ec>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d013      	beq.n	8010938 <HAL_GPIO_Init+0x1f0>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4a49      	ldr	r2, [pc, #292]	; (8010a38 <HAL_GPIO_Init+0x2f0>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d00d      	beq.n	8010934 <HAL_GPIO_Init+0x1ec>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	4a48      	ldr	r2, [pc, #288]	; (8010a3c <HAL_GPIO_Init+0x2f4>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d007      	beq.n	8010930 <HAL_GPIO_Init+0x1e8>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	4a47      	ldr	r2, [pc, #284]	; (8010a40 <HAL_GPIO_Init+0x2f8>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d101      	bne.n	801092c <HAL_GPIO_Init+0x1e4>
 8010928:	2304      	movs	r3, #4
 801092a:	e008      	b.n	801093e <HAL_GPIO_Init+0x1f6>
 801092c:	2305      	movs	r3, #5
 801092e:	e006      	b.n	801093e <HAL_GPIO_Init+0x1f6>
 8010930:	2303      	movs	r3, #3
 8010932:	e004      	b.n	801093e <HAL_GPIO_Init+0x1f6>
 8010934:	2302      	movs	r3, #2
 8010936:	e002      	b.n	801093e <HAL_GPIO_Init+0x1f6>
 8010938:	2301      	movs	r3, #1
 801093a:	e000      	b.n	801093e <HAL_GPIO_Init+0x1f6>
 801093c:	2300      	movs	r3, #0
 801093e:	697a      	ldr	r2, [r7, #20]
 8010940:	f002 0203 	and.w	r2, r2, #3
 8010944:	0092      	lsls	r2, r2, #2
 8010946:	4093      	lsls	r3, r2
 8010948:	693a      	ldr	r2, [r7, #16]
 801094a:	4313      	orrs	r3, r2
 801094c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 801094e:	4937      	ldr	r1, [pc, #220]	; (8010a2c <HAL_GPIO_Init+0x2e4>)
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	089b      	lsrs	r3, r3, #2
 8010954:	3302      	adds	r3, #2
 8010956:	693a      	ldr	r2, [r7, #16]
 8010958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801095c:	4b39      	ldr	r3, [pc, #228]	; (8010a44 <HAL_GPIO_Init+0x2fc>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	43db      	mvns	r3, r3
 8010966:	693a      	ldr	r2, [r7, #16]
 8010968:	4013      	ands	r3, r2
 801096a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010974:	2b00      	cmp	r3, #0
 8010976:	d003      	beq.n	8010980 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8010978:	693a      	ldr	r2, [r7, #16]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	4313      	orrs	r3, r2
 801097e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010980:	4a30      	ldr	r2, [pc, #192]	; (8010a44 <HAL_GPIO_Init+0x2fc>)
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010986:	4b2f      	ldr	r3, [pc, #188]	; (8010a44 <HAL_GPIO_Init+0x2fc>)
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	43db      	mvns	r3, r3
 8010990:	693a      	ldr	r2, [r7, #16]
 8010992:	4013      	ands	r3, r2
 8010994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d003      	beq.n	80109aa <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80109a2:	693a      	ldr	r2, [r7, #16]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	4313      	orrs	r3, r2
 80109a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80109aa:	4a26      	ldr	r2, [pc, #152]	; (8010a44 <HAL_GPIO_Init+0x2fc>)
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80109b0:	4b24      	ldr	r3, [pc, #144]	; (8010a44 <HAL_GPIO_Init+0x2fc>)
 80109b2:	689b      	ldr	r3, [r3, #8]
 80109b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	43db      	mvns	r3, r3
 80109ba:	693a      	ldr	r2, [r7, #16]
 80109bc:	4013      	ands	r3, r2
 80109be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d003      	beq.n	80109d4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80109cc:	693a      	ldr	r2, [r7, #16]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	4313      	orrs	r3, r2
 80109d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80109d4:	4a1b      	ldr	r2, [pc, #108]	; (8010a44 <HAL_GPIO_Init+0x2fc>)
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80109da:	4b1a      	ldr	r3, [pc, #104]	; (8010a44 <HAL_GPIO_Init+0x2fc>)
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	43db      	mvns	r3, r3
 80109e4:	693a      	ldr	r2, [r7, #16]
 80109e6:	4013      	ands	r3, r2
 80109e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d003      	beq.n	80109fe <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	4313      	orrs	r3, r2
 80109fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80109fe:	4a11      	ldr	r2, [pc, #68]	; (8010a44 <HAL_GPIO_Init+0x2fc>)
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	3301      	adds	r3, #1
 8010a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	fa22 f303 	lsr.w	r3, r2, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f47f aea3 	bne.w	8010760 <HAL_GPIO_Init+0x18>
  }
}
 8010a1a:	bf00      	nop
 8010a1c:	bf00      	nop
 8010a1e:	371c      	adds	r7, #28
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bc80      	pop	{r7}
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	40023800 	.word	0x40023800
 8010a2c:	40010000 	.word	0x40010000
 8010a30:	40020000 	.word	0x40020000
 8010a34:	40020400 	.word	0x40020400
 8010a38:	40020800 	.word	0x40020800
 8010a3c:	40020c00 	.word	0x40020c00
 8010a40:	40021000 	.word	0x40021000
 8010a44:	40010400 	.word	0x40010400

08010a48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b087      	sub	sp, #28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8010a52:	2300      	movs	r3, #0
 8010a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8010a56:	2300      	movs	r3, #0
 8010a58:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8010a5e:	e0b8      	b.n	8010bd2 <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8010a60:	2201      	movs	r2, #1
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	fa02 f303 	lsl.w	r3, r2, r3
 8010a68:	683a      	ldr	r2, [r7, #0]
 8010a6a:	4013      	ands	r3, r2
 8010a6c:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f000 80ab 	beq.w	8010bcc <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8010a76:	4a5d      	ldr	r2, [pc, #372]	; (8010bec <HAL_GPIO_DeInit+0x1a4>)
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	089b      	lsrs	r3, r3, #2
 8010a7c:	3302      	adds	r3, #2
 8010a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a82:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	f003 0303 	and.w	r3, r3, #3
 8010a8a:	009b      	lsls	r3, r3, #2
 8010a8c:	220f      	movs	r2, #15
 8010a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8010a92:	68fa      	ldr	r2, [r7, #12]
 8010a94:	4013      	ands	r3, r2
 8010a96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	4a55      	ldr	r2, [pc, #340]	; (8010bf0 <HAL_GPIO_DeInit+0x1a8>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d019      	beq.n	8010ad4 <HAL_GPIO_DeInit+0x8c>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4a54      	ldr	r2, [pc, #336]	; (8010bf4 <HAL_GPIO_DeInit+0x1ac>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d013      	beq.n	8010ad0 <HAL_GPIO_DeInit+0x88>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4a53      	ldr	r2, [pc, #332]	; (8010bf8 <HAL_GPIO_DeInit+0x1b0>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d00d      	beq.n	8010acc <HAL_GPIO_DeInit+0x84>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4a52      	ldr	r2, [pc, #328]	; (8010bfc <HAL_GPIO_DeInit+0x1b4>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d007      	beq.n	8010ac8 <HAL_GPIO_DeInit+0x80>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4a51      	ldr	r2, [pc, #324]	; (8010c00 <HAL_GPIO_DeInit+0x1b8>)
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d101      	bne.n	8010ac4 <HAL_GPIO_DeInit+0x7c>
 8010ac0:	2304      	movs	r3, #4
 8010ac2:	e008      	b.n	8010ad6 <HAL_GPIO_DeInit+0x8e>
 8010ac4:	2305      	movs	r3, #5
 8010ac6:	e006      	b.n	8010ad6 <HAL_GPIO_DeInit+0x8e>
 8010ac8:	2303      	movs	r3, #3
 8010aca:	e004      	b.n	8010ad6 <HAL_GPIO_DeInit+0x8e>
 8010acc:	2302      	movs	r3, #2
 8010ace:	e002      	b.n	8010ad6 <HAL_GPIO_DeInit+0x8e>
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e000      	b.n	8010ad6 <HAL_GPIO_DeInit+0x8e>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	697a      	ldr	r2, [r7, #20]
 8010ad8:	f002 0203 	and.w	r2, r2, #3
 8010adc:	0092      	lsls	r2, r2, #2
 8010ade:	4093      	lsls	r3, r2
 8010ae0:	68fa      	ldr	r2, [r7, #12]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d132      	bne.n	8010b4c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010ae6:	4b47      	ldr	r3, [pc, #284]	; (8010c04 <HAL_GPIO_DeInit+0x1bc>)
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	43db      	mvns	r3, r3
 8010aee:	4945      	ldr	r1, [pc, #276]	; (8010c04 <HAL_GPIO_DeInit+0x1bc>)
 8010af0:	4013      	ands	r3, r2
 8010af2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010af4:	4b43      	ldr	r3, [pc, #268]	; (8010c04 <HAL_GPIO_DeInit+0x1bc>)
 8010af6:	685a      	ldr	r2, [r3, #4]
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	43db      	mvns	r3, r3
 8010afc:	4941      	ldr	r1, [pc, #260]	; (8010c04 <HAL_GPIO_DeInit+0x1bc>)
 8010afe:	4013      	ands	r3, r2
 8010b00:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010b02:	4b40      	ldr	r3, [pc, #256]	; (8010c04 <HAL_GPIO_DeInit+0x1bc>)
 8010b04:	689a      	ldr	r2, [r3, #8]
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	43db      	mvns	r3, r3
 8010b0a:	493e      	ldr	r1, [pc, #248]	; (8010c04 <HAL_GPIO_DeInit+0x1bc>)
 8010b0c:	4013      	ands	r3, r2
 8010b0e:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010b10:	4b3c      	ldr	r3, [pc, #240]	; (8010c04 <HAL_GPIO_DeInit+0x1bc>)
 8010b12:	68da      	ldr	r2, [r3, #12]
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	43db      	mvns	r3, r3
 8010b18:	493a      	ldr	r1, [pc, #232]	; (8010c04 <HAL_GPIO_DeInit+0x1bc>)
 8010b1a:	4013      	ands	r3, r2
 8010b1c:	60cb      	str	r3, [r1, #12]

        tmp = (0x0FU) << (4 * (position & 0x03));
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	f003 0303 	and.w	r3, r3, #3
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	220f      	movs	r2, #15
 8010b28:	fa02 f303 	lsl.w	r3, r2, r3
 8010b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010b2e:	4a2f      	ldr	r2, [pc, #188]	; (8010bec <HAL_GPIO_DeInit+0x1a4>)
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	089b      	lsrs	r3, r3, #2
 8010b34:	3302      	adds	r3, #2
 8010b36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	43da      	mvns	r2, r3
 8010b3e:	482b      	ldr	r0, [pc, #172]	; (8010bec <HAL_GPIO_DeInit+0x1a4>)
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	089b      	lsrs	r3, r3, #2
 8010b44:	400a      	ands	r2, r1
 8010b46:	3302      	adds	r3, #2
 8010b48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	005b      	lsls	r3, r3, #1
 8010b54:	2103      	movs	r1, #3
 8010b56:	fa01 f303 	lsl.w	r3, r1, r3
 8010b5a:	43db      	mvns	r3, r3
 8010b5c:	401a      	ands	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	08da      	lsrs	r2, r3, #3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	3208      	adds	r2, #8
 8010b6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	f003 0307 	and.w	r3, r3, #7
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	220f      	movs	r2, #15
 8010b78:	fa02 f303 	lsl.w	r3, r2, r3
 8010b7c:	43db      	mvns	r3, r3
 8010b7e:	697a      	ldr	r2, [r7, #20]
 8010b80:	08d2      	lsrs	r2, r2, #3
 8010b82:	4019      	ands	r1, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	3208      	adds	r2, #8
 8010b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	68da      	ldr	r2, [r3, #12]
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	005b      	lsls	r3, r3, #1
 8010b94:	2103      	movs	r1, #3
 8010b96:	fa01 f303 	lsl.w	r3, r1, r3
 8010b9a:	43db      	mvns	r3, r3
 8010b9c:	401a      	ands	r2, r3
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	685a      	ldr	r2, [r3, #4]
 8010ba6:	2101      	movs	r1, #1
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	fa01 f303 	lsl.w	r3, r1, r3
 8010bae:	43db      	mvns	r3, r3
 8010bb0:	401a      	ands	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	689a      	ldr	r2, [r3, #8]
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	005b      	lsls	r3, r3, #1
 8010bbe:	2103      	movs	r1, #3
 8010bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8010bc4:	43db      	mvns	r3, r3
 8010bc6:	401a      	ands	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	609a      	str	r2, [r3, #8]
    }

    position++;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	3301      	adds	r3, #1
 8010bd0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8010bd2:	683a      	ldr	r2, [r7, #0]
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f47f af40 	bne.w	8010a60 <HAL_GPIO_DeInit+0x18>
  }
}
 8010be0:	bf00      	nop
 8010be2:	bf00      	nop
 8010be4:	371c      	adds	r7, #28
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bc80      	pop	{r7}
 8010bea:	4770      	bx	lr
 8010bec:	40010000 	.word	0x40010000
 8010bf0:	40020000 	.word	0x40020000
 8010bf4:	40020400 	.word	0x40020400
 8010bf8:	40020800 	.word	0x40020800
 8010bfc:	40020c00 	.word	0x40020c00
 8010c00:	40021000 	.word	0x40021000
 8010c04:	40010400 	.word	0x40010400

08010c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b085      	sub	sp, #20
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	460b      	mov	r3, r1
 8010c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	691a      	ldr	r2, [r3, #16]
 8010c18:	887b      	ldrh	r3, [r7, #2]
 8010c1a:	4013      	ands	r3, r2
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d002      	beq.n	8010c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010c20:	2301      	movs	r3, #1
 8010c22:	73fb      	strb	r3, [r7, #15]
 8010c24:	e001      	b.n	8010c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010c26:	2300      	movs	r3, #0
 8010c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3714      	adds	r7, #20
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bc80      	pop	{r7}
 8010c34:	4770      	bx	lr

08010c36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010c36:	b480      	push	{r7}
 8010c38:	b083      	sub	sp, #12
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
 8010c3e:	460b      	mov	r3, r1
 8010c40:	807b      	strh	r3, [r7, #2]
 8010c42:	4613      	mov	r3, r2
 8010c44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010c46:	787b      	ldrb	r3, [r7, #1]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d003      	beq.n	8010c54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010c4c:	887a      	ldrh	r2, [r7, #2]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8010c52:	e003      	b.n	8010c5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8010c54:	887b      	ldrh	r3, [r7, #2]
 8010c56:	041a      	lsls	r2, r3, #16
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	619a      	str	r2, [r3, #24]
}
 8010c5c:	bf00      	nop
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bc80      	pop	{r7}
 8010c64:	4770      	bx	lr
	...

08010c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	4603      	mov	r3, r0
 8010c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010c72:	4b08      	ldr	r3, [pc, #32]	; (8010c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010c74:	695a      	ldr	r2, [r3, #20]
 8010c76:	88fb      	ldrh	r3, [r7, #6]
 8010c78:	4013      	ands	r3, r2
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d006      	beq.n	8010c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010c7e:	4a05      	ldr	r2, [pc, #20]	; (8010c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010c80:	88fb      	ldrh	r3, [r7, #6]
 8010c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010c84:	88fb      	ldrh	r3, [r7, #6]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f000 f806 	bl	8010c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8010c8c:	bf00      	nop
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	40010400 	.word	0x40010400

08010c98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8010ca2:	bf00      	nop
 8010ca4:	370c      	adds	r7, #12
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bc80      	pop	{r7}
 8010caa:	4770      	bx	lr

08010cac <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d101      	bne.n	8010cbe <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e034      	b.n	8010d28 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8010cc6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f245 5255 	movw	r2, #21845	; 0x5555
 8010cd0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	6852      	ldr	r2, [r2, #4]
 8010cda:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	6892      	ldr	r2, [r2, #8]
 8010ce4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8010ce6:	f7fe f995 	bl	800f014 <HAL_GetTick>
 8010cea:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010cec:	e00f      	b.n	8010d0e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8010cee:	f7fe f991 	bl	800f014 <HAL_GetTick>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	1ad3      	subs	r3, r2, r3
 8010cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8010cfa:	d908      	bls.n	8010d0e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	f003 0303 	and.w	r3, r3, #3
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d001      	beq.n	8010d0e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8010d0a:	2303      	movs	r3, #3
 8010d0c:	e00c      	b.n	8010d28 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	f003 0303 	and.w	r3, r3, #3
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d1e8      	bne.n	8010cee <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8010d24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010d26:	2300      	movs	r3, #0
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3710      	adds	r7, #16
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b083      	sub	sp, #12
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8010d40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bc80      	pop	{r7}
 8010d4c:	4770      	bx	lr
	...

08010d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b088      	sub	sp, #32
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d101      	bne.n	8010d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e31d      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010d62:	4b94      	ldr	r3, [pc, #592]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010d64:	689b      	ldr	r3, [r3, #8]
 8010d66:	f003 030c 	and.w	r3, r3, #12
 8010d6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010d6c:	4b91      	ldr	r3, [pc, #580]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010d6e:	689b      	ldr	r3, [r3, #8]
 8010d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d74:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	f003 0301 	and.w	r3, r3, #1
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d07b      	beq.n	8010e7a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010d82:	69bb      	ldr	r3, [r7, #24]
 8010d84:	2b08      	cmp	r3, #8
 8010d86:	d006      	beq.n	8010d96 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	2b0c      	cmp	r3, #12
 8010d8c:	d10f      	bne.n	8010dae <HAL_RCC_OscConfig+0x5e>
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d94:	d10b      	bne.n	8010dae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d96:	4b87      	ldr	r3, [pc, #540]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d06a      	beq.n	8010e78 <HAL_RCC_OscConfig+0x128>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d166      	bne.n	8010e78 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8010daa:	2301      	movs	r3, #1
 8010dac:	e2f7      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d106      	bne.n	8010dc4 <HAL_RCC_OscConfig+0x74>
 8010db6:	4b7f      	ldr	r3, [pc, #508]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	4a7e      	ldr	r2, [pc, #504]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010dc0:	6013      	str	r3, [r2, #0]
 8010dc2:	e02d      	b.n	8010e20 <HAL_RCC_OscConfig+0xd0>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10c      	bne.n	8010de6 <HAL_RCC_OscConfig+0x96>
 8010dcc:	4b79      	ldr	r3, [pc, #484]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a78      	ldr	r2, [pc, #480]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010dd6:	6013      	str	r3, [r2, #0]
 8010dd8:	4b76      	ldr	r3, [pc, #472]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a75      	ldr	r2, [pc, #468]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010de2:	6013      	str	r3, [r2, #0]
 8010de4:	e01c      	b.n	8010e20 <HAL_RCC_OscConfig+0xd0>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	2b05      	cmp	r3, #5
 8010dec:	d10c      	bne.n	8010e08 <HAL_RCC_OscConfig+0xb8>
 8010dee:	4b71      	ldr	r3, [pc, #452]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	4a70      	ldr	r2, [pc, #448]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010df8:	6013      	str	r3, [r2, #0]
 8010dfa:	4b6e      	ldr	r3, [pc, #440]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4a6d      	ldr	r2, [pc, #436]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e04:	6013      	str	r3, [r2, #0]
 8010e06:	e00b      	b.n	8010e20 <HAL_RCC_OscConfig+0xd0>
 8010e08:	4b6a      	ldr	r3, [pc, #424]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a69      	ldr	r2, [pc, #420]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e12:	6013      	str	r3, [r2, #0]
 8010e14:	4b67      	ldr	r3, [pc, #412]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4a66      	ldr	r2, [pc, #408]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d013      	beq.n	8010e50 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e28:	f7fe f8f4 	bl	800f014 <HAL_GetTick>
 8010e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010e2e:	e008      	b.n	8010e42 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010e30:	f7fe f8f0 	bl	800f014 <HAL_GetTick>
 8010e34:	4602      	mov	r2, r0
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	2b64      	cmp	r3, #100	; 0x64
 8010e3c:	d901      	bls.n	8010e42 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8010e3e:	2303      	movs	r3, #3
 8010e40:	e2ad      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010e42:	4b5c      	ldr	r3, [pc, #368]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d0f0      	beq.n	8010e30 <HAL_RCC_OscConfig+0xe0>
 8010e4e:	e014      	b.n	8010e7a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e50:	f7fe f8e0 	bl	800f014 <HAL_GetTick>
 8010e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010e56:	e008      	b.n	8010e6a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010e58:	f7fe f8dc 	bl	800f014 <HAL_GetTick>
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	1ad3      	subs	r3, r2, r3
 8010e62:	2b64      	cmp	r3, #100	; 0x64
 8010e64:	d901      	bls.n	8010e6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8010e66:	2303      	movs	r3, #3
 8010e68:	e299      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010e6a:	4b52      	ldr	r3, [pc, #328]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d1f0      	bne.n	8010e58 <HAL_RCC_OscConfig+0x108>
 8010e76:	e000      	b.n	8010e7a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f003 0302 	and.w	r3, r3, #2
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d05a      	beq.n	8010f3c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	2b04      	cmp	r3, #4
 8010e8a:	d005      	beq.n	8010e98 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010e8c:	69bb      	ldr	r3, [r7, #24]
 8010e8e:	2b0c      	cmp	r3, #12
 8010e90:	d119      	bne.n	8010ec6 <HAL_RCC_OscConfig+0x176>
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d116      	bne.n	8010ec6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010e98:	4b46      	ldr	r3, [pc, #280]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f003 0302 	and.w	r3, r3, #2
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d005      	beq.n	8010eb0 <HAL_RCC_OscConfig+0x160>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d001      	beq.n	8010eb0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8010eac:	2301      	movs	r3, #1
 8010eae:	e276      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010eb0:	4b40      	ldr	r3, [pc, #256]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	691b      	ldr	r3, [r3, #16]
 8010ebc:	021b      	lsls	r3, r3, #8
 8010ebe:	493d      	ldr	r1, [pc, #244]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010ec0:	4313      	orrs	r3, r2
 8010ec2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010ec4:	e03a      	b.n	8010f3c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d020      	beq.n	8010f10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010ece:	4b3a      	ldr	r3, [pc, #232]	; (8010fb8 <HAL_RCC_OscConfig+0x268>)
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010ed4:	f7fe f89e 	bl	800f014 <HAL_GetTick>
 8010ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010eda:	e008      	b.n	8010eee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010edc:	f7fe f89a 	bl	800f014 <HAL_GetTick>
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	2b02      	cmp	r3, #2
 8010ee8:	d901      	bls.n	8010eee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8010eea:	2303      	movs	r3, #3
 8010eec:	e257      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010eee:	4b31      	ldr	r3, [pc, #196]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f003 0302 	and.w	r3, r3, #2
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d0f0      	beq.n	8010edc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010efa:	4b2e      	ldr	r3, [pc, #184]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	021b      	lsls	r3, r3, #8
 8010f08:	492a      	ldr	r1, [pc, #168]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	604b      	str	r3, [r1, #4]
 8010f0e:	e015      	b.n	8010f3c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010f10:	4b29      	ldr	r3, [pc, #164]	; (8010fb8 <HAL_RCC_OscConfig+0x268>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010f16:	f7fe f87d 	bl	800f014 <HAL_GetTick>
 8010f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010f1c:	e008      	b.n	8010f30 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010f1e:	f7fe f879 	bl	800f014 <HAL_GetTick>
 8010f22:	4602      	mov	r2, r0
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	1ad3      	subs	r3, r2, r3
 8010f28:	2b02      	cmp	r3, #2
 8010f2a:	d901      	bls.n	8010f30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8010f2c:	2303      	movs	r3, #3
 8010f2e:	e236      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010f30:	4b20      	ldr	r3, [pc, #128]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f003 0302 	and.w	r3, r3, #2
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d1f0      	bne.n	8010f1e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f003 0310 	and.w	r3, r3, #16
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f000 80b8 	beq.w	80110ba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010f4a:	69bb      	ldr	r3, [r7, #24]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d170      	bne.n	8011032 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010f50:	4b18      	ldr	r3, [pc, #96]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d005      	beq.n	8010f68 <HAL_RCC_OscConfig+0x218>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	699b      	ldr	r3, [r3, #24]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d101      	bne.n	8010f68 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8010f64:	2301      	movs	r3, #1
 8010f66:	e21a      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6a1a      	ldr	r2, [r3, #32]
 8010f6c:	4b11      	ldr	r3, [pc, #68]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d921      	bls.n	8010fbc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6a1b      	ldr	r3, [r3, #32]
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f000 fc7d 	bl	801187c <RCC_SetFlashLatencyFromMSIRange>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e208      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010f8c:	4b09      	ldr	r3, [pc, #36]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6a1b      	ldr	r3, [r3, #32]
 8010f98:	4906      	ldr	r1, [pc, #24]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010f9e:	4b05      	ldr	r3, [pc, #20]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	69db      	ldr	r3, [r3, #28]
 8010faa:	061b      	lsls	r3, r3, #24
 8010fac:	4901      	ldr	r1, [pc, #4]	; (8010fb4 <HAL_RCC_OscConfig+0x264>)
 8010fae:	4313      	orrs	r3, r2
 8010fb0:	604b      	str	r3, [r1, #4]
 8010fb2:	e020      	b.n	8010ff6 <HAL_RCC_OscConfig+0x2a6>
 8010fb4:	40023800 	.word	0x40023800
 8010fb8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010fbc:	4b99      	ldr	r3, [pc, #612]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6a1b      	ldr	r3, [r3, #32]
 8010fc8:	4996      	ldr	r1, [pc, #600]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010fce:	4b95      	ldr	r3, [pc, #596]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	69db      	ldr	r3, [r3, #28]
 8010fda:	061b      	lsls	r3, r3, #24
 8010fdc:	4991      	ldr	r1, [pc, #580]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6a1b      	ldr	r3, [r3, #32]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f000 fc48 	bl	801187c <RCC_SetFlashLatencyFromMSIRange>
 8010fec:	4603      	mov	r3, r0
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	e1d3      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6a1b      	ldr	r3, [r3, #32]
 8010ffa:	0b5b      	lsrs	r3, r3, #13
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011002:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8011006:	4a87      	ldr	r2, [pc, #540]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8011008:	6892      	ldr	r2, [r2, #8]
 801100a:	0912      	lsrs	r2, r2, #4
 801100c:	f002 020f 	and.w	r2, r2, #15
 8011010:	4985      	ldr	r1, [pc, #532]	; (8011228 <HAL_RCC_OscConfig+0x4d8>)
 8011012:	5c8a      	ldrb	r2, [r1, r2]
 8011014:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8011016:	4a85      	ldr	r2, [pc, #532]	; (801122c <HAL_RCC_OscConfig+0x4dc>)
 8011018:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801101a:	4b85      	ldr	r3, [pc, #532]	; (8011230 <HAL_RCC_OscConfig+0x4e0>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4618      	mov	r0, r3
 8011020:	f7fd ffac 	bl	800ef7c <HAL_InitTick>
 8011024:	4603      	mov	r3, r0
 8011026:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8011028:	7bfb      	ldrb	r3, [r7, #15]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d045      	beq.n	80110ba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 801102e:	7bfb      	ldrb	r3, [r7, #15]
 8011030:	e1b5      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	699b      	ldr	r3, [r3, #24]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d029      	beq.n	801108e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801103a:	4b7e      	ldr	r3, [pc, #504]	; (8011234 <HAL_RCC_OscConfig+0x4e4>)
 801103c:	2201      	movs	r2, #1
 801103e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011040:	f7fd ffe8 	bl	800f014 <HAL_GetTick>
 8011044:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011046:	e008      	b.n	801105a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011048:	f7fd ffe4 	bl	800f014 <HAL_GetTick>
 801104c:	4602      	mov	r2, r0
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	2b02      	cmp	r3, #2
 8011054:	d901      	bls.n	801105a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8011056:	2303      	movs	r3, #3
 8011058:	e1a1      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801105a:	4b72      	ldr	r3, [pc, #456]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011062:	2b00      	cmp	r3, #0
 8011064:	d0f0      	beq.n	8011048 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011066:	4b6f      	ldr	r3, [pc, #444]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a1b      	ldr	r3, [r3, #32]
 8011072:	496c      	ldr	r1, [pc, #432]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8011074:	4313      	orrs	r3, r2
 8011076:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011078:	4b6a      	ldr	r3, [pc, #424]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	69db      	ldr	r3, [r3, #28]
 8011084:	061b      	lsls	r3, r3, #24
 8011086:	4967      	ldr	r1, [pc, #412]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8011088:	4313      	orrs	r3, r2
 801108a:	604b      	str	r3, [r1, #4]
 801108c:	e015      	b.n	80110ba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801108e:	4b69      	ldr	r3, [pc, #420]	; (8011234 <HAL_RCC_OscConfig+0x4e4>)
 8011090:	2200      	movs	r2, #0
 8011092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011094:	f7fd ffbe 	bl	800f014 <HAL_GetTick>
 8011098:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801109a:	e008      	b.n	80110ae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801109c:	f7fd ffba 	bl	800f014 <HAL_GetTick>
 80110a0:	4602      	mov	r2, r0
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	1ad3      	subs	r3, r2, r3
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d901      	bls.n	80110ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80110aa:	2303      	movs	r3, #3
 80110ac:	e177      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80110ae:	4b5d      	ldr	r3, [pc, #372]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1f0      	bne.n	801109c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	f003 0308 	and.w	r3, r3, #8
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d030      	beq.n	8011128 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	695b      	ldr	r3, [r3, #20]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d016      	beq.n	80110fc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80110ce:	4b5a      	ldr	r3, [pc, #360]	; (8011238 <HAL_RCC_OscConfig+0x4e8>)
 80110d0:	2201      	movs	r2, #1
 80110d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80110d4:	f7fd ff9e 	bl	800f014 <HAL_GetTick>
 80110d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80110da:	e008      	b.n	80110ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80110dc:	f7fd ff9a 	bl	800f014 <HAL_GetTick>
 80110e0:	4602      	mov	r2, r0
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	1ad3      	subs	r3, r2, r3
 80110e6:	2b02      	cmp	r3, #2
 80110e8:	d901      	bls.n	80110ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80110ea:	2303      	movs	r3, #3
 80110ec:	e157      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80110ee:	4b4d      	ldr	r3, [pc, #308]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80110f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f2:	f003 0302 	and.w	r3, r3, #2
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d0f0      	beq.n	80110dc <HAL_RCC_OscConfig+0x38c>
 80110fa:	e015      	b.n	8011128 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80110fc:	4b4e      	ldr	r3, [pc, #312]	; (8011238 <HAL_RCC_OscConfig+0x4e8>)
 80110fe:	2200      	movs	r2, #0
 8011100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011102:	f7fd ff87 	bl	800f014 <HAL_GetTick>
 8011106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011108:	e008      	b.n	801111c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801110a:	f7fd ff83 	bl	800f014 <HAL_GetTick>
 801110e:	4602      	mov	r2, r0
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	2b02      	cmp	r3, #2
 8011116:	d901      	bls.n	801111c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8011118:	2303      	movs	r3, #3
 801111a:	e140      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801111c:	4b41      	ldr	r3, [pc, #260]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 801111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011120:	f003 0302 	and.w	r3, r3, #2
 8011124:	2b00      	cmp	r3, #0
 8011126:	d1f0      	bne.n	801110a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f003 0304 	and.w	r3, r3, #4
 8011130:	2b00      	cmp	r3, #0
 8011132:	f000 80b5 	beq.w	80112a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011136:	2300      	movs	r3, #0
 8011138:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801113a:	4b3a      	ldr	r3, [pc, #232]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 801113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011142:	2b00      	cmp	r3, #0
 8011144:	d10d      	bne.n	8011162 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011146:	4b37      	ldr	r3, [pc, #220]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8011148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801114a:	4a36      	ldr	r2, [pc, #216]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 801114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011150:	6253      	str	r3, [r2, #36]	; 0x24
 8011152:	4b34      	ldr	r3, [pc, #208]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8011154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801115a:	60bb      	str	r3, [r7, #8]
 801115c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801115e:	2301      	movs	r3, #1
 8011160:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011162:	4b36      	ldr	r3, [pc, #216]	; (801123c <HAL_RCC_OscConfig+0x4ec>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801116a:	2b00      	cmp	r3, #0
 801116c:	d118      	bne.n	80111a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801116e:	4b33      	ldr	r3, [pc, #204]	; (801123c <HAL_RCC_OscConfig+0x4ec>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a32      	ldr	r2, [pc, #200]	; (801123c <HAL_RCC_OscConfig+0x4ec>)
 8011174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801117a:	f7fd ff4b 	bl	800f014 <HAL_GetTick>
 801117e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011180:	e008      	b.n	8011194 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011182:	f7fd ff47 	bl	800f014 <HAL_GetTick>
 8011186:	4602      	mov	r2, r0
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	1ad3      	subs	r3, r2, r3
 801118c:	2b64      	cmp	r3, #100	; 0x64
 801118e:	d901      	bls.n	8011194 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8011190:	2303      	movs	r3, #3
 8011192:	e104      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011194:	4b29      	ldr	r3, [pc, #164]	; (801123c <HAL_RCC_OscConfig+0x4ec>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801119c:	2b00      	cmp	r3, #0
 801119e:	d0f0      	beq.n	8011182 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d106      	bne.n	80111b6 <HAL_RCC_OscConfig+0x466>
 80111a8:	4b1e      	ldr	r3, [pc, #120]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ac:	4a1d      	ldr	r2, [pc, #116]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111b2:	6353      	str	r3, [r2, #52]	; 0x34
 80111b4:	e02d      	b.n	8011212 <HAL_RCC_OscConfig+0x4c2>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	689b      	ldr	r3, [r3, #8]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d10c      	bne.n	80111d8 <HAL_RCC_OscConfig+0x488>
 80111be:	4b19      	ldr	r3, [pc, #100]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111c2:	4a18      	ldr	r2, [pc, #96]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111c8:	6353      	str	r3, [r2, #52]	; 0x34
 80111ca:	4b16      	ldr	r3, [pc, #88]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ce:	4a15      	ldr	r2, [pc, #84]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80111d4:	6353      	str	r3, [r2, #52]	; 0x34
 80111d6:	e01c      	b.n	8011212 <HAL_RCC_OscConfig+0x4c2>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	689b      	ldr	r3, [r3, #8]
 80111dc:	2b05      	cmp	r3, #5
 80111de:	d10c      	bne.n	80111fa <HAL_RCC_OscConfig+0x4aa>
 80111e0:	4b10      	ldr	r3, [pc, #64]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e4:	4a0f      	ldr	r2, [pc, #60]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80111ea:	6353      	str	r3, [r2, #52]	; 0x34
 80111ec:	4b0d      	ldr	r3, [pc, #52]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111f0:	4a0c      	ldr	r2, [pc, #48]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111f6:	6353      	str	r3, [r2, #52]	; 0x34
 80111f8:	e00b      	b.n	8011212 <HAL_RCC_OscConfig+0x4c2>
 80111fa:	4b0a      	ldr	r3, [pc, #40]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 80111fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111fe:	4a09      	ldr	r2, [pc, #36]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8011200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011204:	6353      	str	r3, [r2, #52]	; 0x34
 8011206:	4b07      	ldr	r3, [pc, #28]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 8011208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801120a:	4a06      	ldr	r2, [pc, #24]	; (8011224 <HAL_RCC_OscConfig+0x4d4>)
 801120c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011210:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	689b      	ldr	r3, [r3, #8]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d024      	beq.n	8011264 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801121a:	f7fd fefb 	bl	800f014 <HAL_GetTick>
 801121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011220:	e019      	b.n	8011256 <HAL_RCC_OscConfig+0x506>
 8011222:	bf00      	nop
 8011224:	40023800 	.word	0x40023800
 8011228:	08014684 	.word	0x08014684
 801122c:	20000000 	.word	0x20000000
 8011230:	20000008 	.word	0x20000008
 8011234:	42470020 	.word	0x42470020
 8011238:	42470680 	.word	0x42470680
 801123c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011240:	f7fd fee8 	bl	800f014 <HAL_GetTick>
 8011244:	4602      	mov	r2, r0
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	1ad3      	subs	r3, r2, r3
 801124a:	f241 3288 	movw	r2, #5000	; 0x1388
 801124e:	4293      	cmp	r3, r2
 8011250:	d901      	bls.n	8011256 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8011252:	2303      	movs	r3, #3
 8011254:	e0a3      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011256:	4b54      	ldr	r3, [pc, #336]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 8011258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801125a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801125e:	2b00      	cmp	r3, #0
 8011260:	d0ee      	beq.n	8011240 <HAL_RCC_OscConfig+0x4f0>
 8011262:	e014      	b.n	801128e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011264:	f7fd fed6 	bl	800f014 <HAL_GetTick>
 8011268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801126a:	e00a      	b.n	8011282 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801126c:	f7fd fed2 	bl	800f014 <HAL_GetTick>
 8011270:	4602      	mov	r2, r0
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	1ad3      	subs	r3, r2, r3
 8011276:	f241 3288 	movw	r2, #5000	; 0x1388
 801127a:	4293      	cmp	r3, r2
 801127c:	d901      	bls.n	8011282 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 801127e:	2303      	movs	r3, #3
 8011280:	e08d      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011282:	4b49      	ldr	r3, [pc, #292]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 8011284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801128a:	2b00      	cmp	r3, #0
 801128c:	d1ee      	bne.n	801126c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801128e:	7ffb      	ldrb	r3, [r7, #31]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d105      	bne.n	80112a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011294:	4b44      	ldr	r3, [pc, #272]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 8011296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011298:	4a43      	ldr	r2, [pc, #268]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 801129a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801129e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d079      	beq.n	801139c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	2b0c      	cmp	r3, #12
 80112ac:	d056      	beq.n	801135c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b2:	2b02      	cmp	r3, #2
 80112b4:	d13b      	bne.n	801132e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112b6:	4b3d      	ldr	r3, [pc, #244]	; (80113ac <HAL_RCC_OscConfig+0x65c>)
 80112b8:	2200      	movs	r2, #0
 80112ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80112bc:	f7fd feaa 	bl	800f014 <HAL_GetTick>
 80112c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80112c2:	e008      	b.n	80112d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80112c4:	f7fd fea6 	bl	800f014 <HAL_GetTick>
 80112c8:	4602      	mov	r2, r0
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	1ad3      	subs	r3, r2, r3
 80112ce:	2b02      	cmp	r3, #2
 80112d0:	d901      	bls.n	80112d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80112d2:	2303      	movs	r3, #3
 80112d4:	e063      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80112d6:	4b34      	ldr	r3, [pc, #208]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d1f0      	bne.n	80112c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80112e2:	4b31      	ldr	r3, [pc, #196]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f2:	4319      	orrs	r1, r3
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112f8:	430b      	orrs	r3, r1
 80112fa:	492b      	ldr	r1, [pc, #172]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 80112fc:	4313      	orrs	r3, r2
 80112fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011300:	4b2a      	ldr	r3, [pc, #168]	; (80113ac <HAL_RCC_OscConfig+0x65c>)
 8011302:	2201      	movs	r2, #1
 8011304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011306:	f7fd fe85 	bl	800f014 <HAL_GetTick>
 801130a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801130c:	e008      	b.n	8011320 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801130e:	f7fd fe81 	bl	800f014 <HAL_GetTick>
 8011312:	4602      	mov	r2, r0
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	2b02      	cmp	r3, #2
 801131a:	d901      	bls.n	8011320 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 801131c:	2303      	movs	r3, #3
 801131e:	e03e      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011320:	4b21      	ldr	r3, [pc, #132]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011328:	2b00      	cmp	r3, #0
 801132a:	d0f0      	beq.n	801130e <HAL_RCC_OscConfig+0x5be>
 801132c:	e036      	b.n	801139c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801132e:	4b1f      	ldr	r3, [pc, #124]	; (80113ac <HAL_RCC_OscConfig+0x65c>)
 8011330:	2200      	movs	r2, #0
 8011332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011334:	f7fd fe6e 	bl	800f014 <HAL_GetTick>
 8011338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801133a:	e008      	b.n	801134e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801133c:	f7fd fe6a 	bl	800f014 <HAL_GetTick>
 8011340:	4602      	mov	r2, r0
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	1ad3      	subs	r3, r2, r3
 8011346:	2b02      	cmp	r3, #2
 8011348:	d901      	bls.n	801134e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 801134a:	2303      	movs	r3, #3
 801134c:	e027      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801134e:	4b16      	ldr	r3, [pc, #88]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1f0      	bne.n	801133c <HAL_RCC_OscConfig+0x5ec>
 801135a:	e01f      	b.n	801139c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011360:	2b01      	cmp	r3, #1
 8011362:	d101      	bne.n	8011368 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8011364:	2301      	movs	r3, #1
 8011366:	e01a      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8011368:	4b0f      	ldr	r3, [pc, #60]	; (80113a8 <HAL_RCC_OscConfig+0x658>)
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011378:	429a      	cmp	r2, r3
 801137a:	d10d      	bne.n	8011398 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011386:	429a      	cmp	r2, r3
 8011388:	d106      	bne.n	8011398 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011394:	429a      	cmp	r2, r3
 8011396:	d001      	beq.n	801139c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8011398:	2301      	movs	r3, #1
 801139a:	e000      	b.n	801139e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 801139c:	2300      	movs	r3, #0
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3720      	adds	r7, #32
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	40023800 	.word	0x40023800
 80113ac:	42470060 	.word	0x42470060

080113b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80113c0:	2301      	movs	r3, #1
 80113c2:	e11a      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80113c4:	4b8f      	ldr	r3, [pc, #572]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f003 0301 	and.w	r3, r3, #1
 80113cc:	683a      	ldr	r2, [r7, #0]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d919      	bls.n	8011406 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d105      	bne.n	80113e4 <HAL_RCC_ClockConfig+0x34>
 80113d8:	4b8a      	ldr	r3, [pc, #552]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a89      	ldr	r2, [pc, #548]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 80113de:	f043 0304 	orr.w	r3, r3, #4
 80113e2:	6013      	str	r3, [r2, #0]
 80113e4:	4b87      	ldr	r3, [pc, #540]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f023 0201 	bic.w	r2, r3, #1
 80113ec:	4985      	ldr	r1, [pc, #532]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	4313      	orrs	r3, r2
 80113f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80113f4:	4b83      	ldr	r3, [pc, #524]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	683a      	ldr	r2, [r7, #0]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d001      	beq.n	8011406 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8011402:	2301      	movs	r3, #1
 8011404:	e0f9      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f003 0302 	and.w	r3, r3, #2
 801140e:	2b00      	cmp	r3, #0
 8011410:	d008      	beq.n	8011424 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011412:	4b7d      	ldr	r3, [pc, #500]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 8011414:	689b      	ldr	r3, [r3, #8]
 8011416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	689b      	ldr	r3, [r3, #8]
 801141e:	497a      	ldr	r1, [pc, #488]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 8011420:	4313      	orrs	r3, r2
 8011422:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f003 0301 	and.w	r3, r3, #1
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 808e 	beq.w	801154e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	2b02      	cmp	r3, #2
 8011438:	d107      	bne.n	801144a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801143a:	4b73      	ldr	r3, [pc, #460]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011442:	2b00      	cmp	r3, #0
 8011444:	d121      	bne.n	801148a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8011446:	2301      	movs	r3, #1
 8011448:	e0d7      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	2b03      	cmp	r3, #3
 8011450:	d107      	bne.n	8011462 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011452:	4b6d      	ldr	r3, [pc, #436]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801145a:	2b00      	cmp	r3, #0
 801145c:	d115      	bne.n	801148a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 801145e:	2301      	movs	r3, #1
 8011460:	e0cb      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	2b01      	cmp	r3, #1
 8011468:	d107      	bne.n	801147a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801146a:	4b67      	ldr	r3, [pc, #412]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f003 0302 	and.w	r3, r3, #2
 8011472:	2b00      	cmp	r3, #0
 8011474:	d109      	bne.n	801148a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8011476:	2301      	movs	r3, #1
 8011478:	e0bf      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801147a:	4b63      	ldr	r3, [pc, #396]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011482:	2b00      	cmp	r3, #0
 8011484:	d101      	bne.n	801148a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8011486:	2301      	movs	r3, #1
 8011488:	e0b7      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801148a:	4b5f      	ldr	r3, [pc, #380]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 801148c:	689b      	ldr	r3, [r3, #8]
 801148e:	f023 0203 	bic.w	r2, r3, #3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	495c      	ldr	r1, [pc, #368]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 8011498:	4313      	orrs	r3, r2
 801149a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801149c:	f7fd fdba 	bl	800f014 <HAL_GetTick>
 80114a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	2b02      	cmp	r3, #2
 80114a8:	d112      	bne.n	80114d0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80114aa:	e00a      	b.n	80114c2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80114ac:	f7fd fdb2 	bl	800f014 <HAL_GetTick>
 80114b0:	4602      	mov	r2, r0
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	1ad3      	subs	r3, r2, r3
 80114b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d901      	bls.n	80114c2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80114be:	2303      	movs	r3, #3
 80114c0:	e09b      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80114c2:	4b51      	ldr	r3, [pc, #324]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 80114c4:	689b      	ldr	r3, [r3, #8]
 80114c6:	f003 030c 	and.w	r3, r3, #12
 80114ca:	2b08      	cmp	r3, #8
 80114cc:	d1ee      	bne.n	80114ac <HAL_RCC_ClockConfig+0xfc>
 80114ce:	e03e      	b.n	801154e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	2b03      	cmp	r3, #3
 80114d6:	d112      	bne.n	80114fe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80114d8:	e00a      	b.n	80114f0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80114da:	f7fd fd9b 	bl	800f014 <HAL_GetTick>
 80114de:	4602      	mov	r2, r0
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	1ad3      	subs	r3, r2, r3
 80114e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d901      	bls.n	80114f0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80114ec:	2303      	movs	r3, #3
 80114ee:	e084      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80114f0:	4b45      	ldr	r3, [pc, #276]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 80114f2:	689b      	ldr	r3, [r3, #8]
 80114f4:	f003 030c 	and.w	r3, r3, #12
 80114f8:	2b0c      	cmp	r3, #12
 80114fa:	d1ee      	bne.n	80114da <HAL_RCC_ClockConfig+0x12a>
 80114fc:	e027      	b.n	801154e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	2b01      	cmp	r3, #1
 8011504:	d11d      	bne.n	8011542 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011506:	e00a      	b.n	801151e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011508:	f7fd fd84 	bl	800f014 <HAL_GetTick>
 801150c:	4602      	mov	r2, r0
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	f241 3288 	movw	r2, #5000	; 0x1388
 8011516:	4293      	cmp	r3, r2
 8011518:	d901      	bls.n	801151e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 801151a:	2303      	movs	r3, #3
 801151c:	e06d      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801151e:	4b3a      	ldr	r3, [pc, #232]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	f003 030c 	and.w	r3, r3, #12
 8011526:	2b04      	cmp	r3, #4
 8011528:	d1ee      	bne.n	8011508 <HAL_RCC_ClockConfig+0x158>
 801152a:	e010      	b.n	801154e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801152c:	f7fd fd72 	bl	800f014 <HAL_GetTick>
 8011530:	4602      	mov	r2, r0
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	f241 3288 	movw	r2, #5000	; 0x1388
 801153a:	4293      	cmp	r3, r2
 801153c:	d901      	bls.n	8011542 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 801153e:	2303      	movs	r3, #3
 8011540:	e05b      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8011542:	4b31      	ldr	r3, [pc, #196]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	f003 030c 	and.w	r3, r3, #12
 801154a:	2b00      	cmp	r3, #0
 801154c:	d1ee      	bne.n	801152c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801154e:	4b2d      	ldr	r3, [pc, #180]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f003 0301 	and.w	r3, r3, #1
 8011556:	683a      	ldr	r2, [r7, #0]
 8011558:	429a      	cmp	r2, r3
 801155a:	d219      	bcs.n	8011590 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	2b01      	cmp	r3, #1
 8011560:	d105      	bne.n	801156e <HAL_RCC_ClockConfig+0x1be>
 8011562:	4b28      	ldr	r3, [pc, #160]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	4a27      	ldr	r2, [pc, #156]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 8011568:	f043 0304 	orr.w	r3, r3, #4
 801156c:	6013      	str	r3, [r2, #0]
 801156e:	4b25      	ldr	r3, [pc, #148]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f023 0201 	bic.w	r2, r3, #1
 8011576:	4923      	ldr	r1, [pc, #140]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	4313      	orrs	r3, r2
 801157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801157e:	4b21      	ldr	r3, [pc, #132]	; (8011604 <HAL_RCC_ClockConfig+0x254>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f003 0301 	and.w	r3, r3, #1
 8011586:	683a      	ldr	r2, [r7, #0]
 8011588:	429a      	cmp	r2, r3
 801158a:	d001      	beq.n	8011590 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 801158c:	2301      	movs	r3, #1
 801158e:	e034      	b.n	80115fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f003 0304 	and.w	r3, r3, #4
 8011598:	2b00      	cmp	r3, #0
 801159a:	d008      	beq.n	80115ae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801159c:	4b1a      	ldr	r3, [pc, #104]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 801159e:	689b      	ldr	r3, [r3, #8]
 80115a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	4917      	ldr	r1, [pc, #92]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 80115aa:	4313      	orrs	r3, r2
 80115ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f003 0308 	and.w	r3, r3, #8
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d009      	beq.n	80115ce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80115ba:	4b13      	ldr	r3, [pc, #76]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 80115bc:	689b      	ldr	r3, [r3, #8]
 80115be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	691b      	ldr	r3, [r3, #16]
 80115c6:	00db      	lsls	r3, r3, #3
 80115c8:	490f      	ldr	r1, [pc, #60]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 80115ca:	4313      	orrs	r3, r2
 80115cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80115ce:	f000 f823 	bl	8011618 <HAL_RCC_GetSysClockFreq>
 80115d2:	4602      	mov	r2, r0
 80115d4:	4b0c      	ldr	r3, [pc, #48]	; (8011608 <HAL_RCC_ClockConfig+0x258>)
 80115d6:	689b      	ldr	r3, [r3, #8]
 80115d8:	091b      	lsrs	r3, r3, #4
 80115da:	f003 030f 	and.w	r3, r3, #15
 80115de:	490b      	ldr	r1, [pc, #44]	; (801160c <HAL_RCC_ClockConfig+0x25c>)
 80115e0:	5ccb      	ldrb	r3, [r1, r3]
 80115e2:	fa22 f303 	lsr.w	r3, r2, r3
 80115e6:	4a0a      	ldr	r2, [pc, #40]	; (8011610 <HAL_RCC_ClockConfig+0x260>)
 80115e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80115ea:	4b0a      	ldr	r3, [pc, #40]	; (8011614 <HAL_RCC_ClockConfig+0x264>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fd fcc4 	bl	800ef7c <HAL_InitTick>
 80115f4:	4603      	mov	r3, r0
 80115f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80115f8:	7afb      	ldrb	r3, [r7, #11]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3710      	adds	r7, #16
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	40023c00 	.word	0x40023c00
 8011608:	40023800 	.word	0x40023800
 801160c:	08014684 	.word	0x08014684
 8011610:	20000000 	.word	0x20000000
 8011614:	20000008 	.word	0x20000008

08011618 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801161c:	b092      	sub	sp, #72	; 0x48
 801161e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8011620:	4b79      	ldr	r3, [pc, #484]	; (8011808 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8011622:	689b      	ldr	r3, [r3, #8]
 8011624:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011628:	f003 030c 	and.w	r3, r3, #12
 801162c:	2b0c      	cmp	r3, #12
 801162e:	d00d      	beq.n	801164c <HAL_RCC_GetSysClockFreq+0x34>
 8011630:	2b0c      	cmp	r3, #12
 8011632:	f200 80d5 	bhi.w	80117e0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8011636:	2b04      	cmp	r3, #4
 8011638:	d002      	beq.n	8011640 <HAL_RCC_GetSysClockFreq+0x28>
 801163a:	2b08      	cmp	r3, #8
 801163c:	d003      	beq.n	8011646 <HAL_RCC_GetSysClockFreq+0x2e>
 801163e:	e0cf      	b.n	80117e0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011640:	4b72      	ldr	r3, [pc, #456]	; (801180c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8011642:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8011644:	e0da      	b.n	80117fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8011646:	4b72      	ldr	r3, [pc, #456]	; (8011810 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8011648:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 801164a:	e0d7      	b.n	80117fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801164c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801164e:	0c9b      	lsrs	r3, r3, #18
 8011650:	f003 020f 	and.w	r2, r3, #15
 8011654:	4b6f      	ldr	r3, [pc, #444]	; (8011814 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8011656:	5c9b      	ldrb	r3, [r3, r2]
 8011658:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801165a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801165c:	0d9b      	lsrs	r3, r3, #22
 801165e:	f003 0303 	and.w	r3, r3, #3
 8011662:	3301      	adds	r3, #1
 8011664:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011666:	4b68      	ldr	r3, [pc, #416]	; (8011808 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801166e:	2b00      	cmp	r3, #0
 8011670:	d05d      	beq.n	801172e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8011672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011674:	2200      	movs	r2, #0
 8011676:	4618      	mov	r0, r3
 8011678:	4611      	mov	r1, r2
 801167a:	4604      	mov	r4, r0
 801167c:	460d      	mov	r5, r1
 801167e:	4622      	mov	r2, r4
 8011680:	462b      	mov	r3, r5
 8011682:	f04f 0000 	mov.w	r0, #0
 8011686:	f04f 0100 	mov.w	r1, #0
 801168a:	0159      	lsls	r1, r3, #5
 801168c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011690:	0150      	lsls	r0, r2, #5
 8011692:	4602      	mov	r2, r0
 8011694:	460b      	mov	r3, r1
 8011696:	4621      	mov	r1, r4
 8011698:	1a51      	subs	r1, r2, r1
 801169a:	6139      	str	r1, [r7, #16]
 801169c:	4629      	mov	r1, r5
 801169e:	eb63 0301 	sbc.w	r3, r3, r1
 80116a2:	617b      	str	r3, [r7, #20]
 80116a4:	f04f 0200 	mov.w	r2, #0
 80116a8:	f04f 0300 	mov.w	r3, #0
 80116ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80116b0:	4659      	mov	r1, fp
 80116b2:	018b      	lsls	r3, r1, #6
 80116b4:	4651      	mov	r1, sl
 80116b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80116ba:	4651      	mov	r1, sl
 80116bc:	018a      	lsls	r2, r1, #6
 80116be:	46d4      	mov	ip, sl
 80116c0:	ebb2 080c 	subs.w	r8, r2, ip
 80116c4:	4659      	mov	r1, fp
 80116c6:	eb63 0901 	sbc.w	r9, r3, r1
 80116ca:	f04f 0200 	mov.w	r2, #0
 80116ce:	f04f 0300 	mov.w	r3, #0
 80116d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80116d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80116da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80116de:	4690      	mov	r8, r2
 80116e0:	4699      	mov	r9, r3
 80116e2:	4623      	mov	r3, r4
 80116e4:	eb18 0303 	adds.w	r3, r8, r3
 80116e8:	60bb      	str	r3, [r7, #8]
 80116ea:	462b      	mov	r3, r5
 80116ec:	eb49 0303 	adc.w	r3, r9, r3
 80116f0:	60fb      	str	r3, [r7, #12]
 80116f2:	f04f 0200 	mov.w	r2, #0
 80116f6:	f04f 0300 	mov.w	r3, #0
 80116fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80116fe:	4629      	mov	r1, r5
 8011700:	024b      	lsls	r3, r1, #9
 8011702:	4620      	mov	r0, r4
 8011704:	4629      	mov	r1, r5
 8011706:	4604      	mov	r4, r0
 8011708:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 801170c:	4601      	mov	r1, r0
 801170e:	024a      	lsls	r2, r1, #9
 8011710:	4610      	mov	r0, r2
 8011712:	4619      	mov	r1, r3
 8011714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011716:	2200      	movs	r2, #0
 8011718:	62bb      	str	r3, [r7, #40]	; 0x28
 801171a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801171c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011720:	f7f5 f90c 	bl	800693c <__aeabi_uldivmod>
 8011724:	4602      	mov	r2, r0
 8011726:	460b      	mov	r3, r1
 8011728:	4613      	mov	r3, r2
 801172a:	647b      	str	r3, [r7, #68]	; 0x44
 801172c:	e055      	b.n	80117da <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011730:	2200      	movs	r2, #0
 8011732:	623b      	str	r3, [r7, #32]
 8011734:	627a      	str	r2, [r7, #36]	; 0x24
 8011736:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801173a:	4642      	mov	r2, r8
 801173c:	464b      	mov	r3, r9
 801173e:	f04f 0000 	mov.w	r0, #0
 8011742:	f04f 0100 	mov.w	r1, #0
 8011746:	0159      	lsls	r1, r3, #5
 8011748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801174c:	0150      	lsls	r0, r2, #5
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	46c4      	mov	ip, r8
 8011754:	ebb2 0a0c 	subs.w	sl, r2, ip
 8011758:	4640      	mov	r0, r8
 801175a:	4649      	mov	r1, r9
 801175c:	468c      	mov	ip, r1
 801175e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8011762:	f04f 0200 	mov.w	r2, #0
 8011766:	f04f 0300 	mov.w	r3, #0
 801176a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801176e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8011772:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8011776:	ebb2 040a 	subs.w	r4, r2, sl
 801177a:	eb63 050b 	sbc.w	r5, r3, fp
 801177e:	f04f 0200 	mov.w	r2, #0
 8011782:	f04f 0300 	mov.w	r3, #0
 8011786:	00eb      	lsls	r3, r5, #3
 8011788:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801178c:	00e2      	lsls	r2, r4, #3
 801178e:	4614      	mov	r4, r2
 8011790:	461d      	mov	r5, r3
 8011792:	4603      	mov	r3, r0
 8011794:	18e3      	adds	r3, r4, r3
 8011796:	603b      	str	r3, [r7, #0]
 8011798:	460b      	mov	r3, r1
 801179a:	eb45 0303 	adc.w	r3, r5, r3
 801179e:	607b      	str	r3, [r7, #4]
 80117a0:	f04f 0200 	mov.w	r2, #0
 80117a4:	f04f 0300 	mov.w	r3, #0
 80117a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80117ac:	4629      	mov	r1, r5
 80117ae:	028b      	lsls	r3, r1, #10
 80117b0:	4620      	mov	r0, r4
 80117b2:	4629      	mov	r1, r5
 80117b4:	4604      	mov	r4, r0
 80117b6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80117ba:	4601      	mov	r1, r0
 80117bc:	028a      	lsls	r2, r1, #10
 80117be:	4610      	mov	r0, r2
 80117c0:	4619      	mov	r1, r3
 80117c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c4:	2200      	movs	r2, #0
 80117c6:	61bb      	str	r3, [r7, #24]
 80117c8:	61fa      	str	r2, [r7, #28]
 80117ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80117ce:	f7f5 f8b5 	bl	800693c <__aeabi_uldivmod>
 80117d2:	4602      	mov	r2, r0
 80117d4:	460b      	mov	r3, r1
 80117d6:	4613      	mov	r3, r2
 80117d8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80117da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117dc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80117de:	e00d      	b.n	80117fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80117e0:	4b09      	ldr	r3, [pc, #36]	; (8011808 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	0b5b      	lsrs	r3, r3, #13
 80117e6:	f003 0307 	and.w	r3, r3, #7
 80117ea:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80117ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ee:	3301      	adds	r3, #1
 80117f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80117f4:	fa02 f303 	lsl.w	r3, r2, r3
 80117f8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80117fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80117fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3748      	adds	r7, #72	; 0x48
 8011802:	46bd      	mov	sp, r7
 8011804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011808:	40023800 	.word	0x40023800
 801180c:	00f42400 	.word	0x00f42400
 8011810:	007a1200 	.word	0x007a1200
 8011814:	08014678 	.word	0x08014678

08011818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011818:	b480      	push	{r7}
 801181a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801181c:	4b02      	ldr	r3, [pc, #8]	; (8011828 <HAL_RCC_GetHCLKFreq+0x10>)
 801181e:	681b      	ldr	r3, [r3, #0]
}
 8011820:	4618      	mov	r0, r3
 8011822:	46bd      	mov	sp, r7
 8011824:	bc80      	pop	{r7}
 8011826:	4770      	bx	lr
 8011828:	20000000 	.word	0x20000000

0801182c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011830:	f7ff fff2 	bl	8011818 <HAL_RCC_GetHCLKFreq>
 8011834:	4602      	mov	r2, r0
 8011836:	4b05      	ldr	r3, [pc, #20]	; (801184c <HAL_RCC_GetPCLK1Freq+0x20>)
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	0a1b      	lsrs	r3, r3, #8
 801183c:	f003 0307 	and.w	r3, r3, #7
 8011840:	4903      	ldr	r1, [pc, #12]	; (8011850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011842:	5ccb      	ldrb	r3, [r1, r3]
 8011844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011848:	4618      	mov	r0, r3
 801184a:	bd80      	pop	{r7, pc}
 801184c:	40023800 	.word	0x40023800
 8011850:	08014694 	.word	0x08014694

08011854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011858:	f7ff ffde 	bl	8011818 <HAL_RCC_GetHCLKFreq>
 801185c:	4602      	mov	r2, r0
 801185e:	4b05      	ldr	r3, [pc, #20]	; (8011874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011860:	689b      	ldr	r3, [r3, #8]
 8011862:	0adb      	lsrs	r3, r3, #11
 8011864:	f003 0307 	and.w	r3, r3, #7
 8011868:	4903      	ldr	r1, [pc, #12]	; (8011878 <HAL_RCC_GetPCLK2Freq+0x24>)
 801186a:	5ccb      	ldrb	r3, [r1, r3]
 801186c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011870:	4618      	mov	r0, r3
 8011872:	bd80      	pop	{r7, pc}
 8011874:	40023800 	.word	0x40023800
 8011878:	08014694 	.word	0x08014694

0801187c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 801187c:	b480      	push	{r7}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8011884:	2300      	movs	r3, #0
 8011886:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8011888:	4b29      	ldr	r3, [pc, #164]	; (8011930 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d12c      	bne.n	80118ee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8011894:	4b26      	ldr	r3, [pc, #152]	; (8011930 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8011896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801189c:	2b00      	cmp	r3, #0
 801189e:	d005      	beq.n	80118ac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80118a0:	4b24      	ldr	r3, [pc, #144]	; (8011934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80118a8:	617b      	str	r3, [r7, #20]
 80118aa:	e016      	b.n	80118da <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80118ac:	4b20      	ldr	r3, [pc, #128]	; (8011930 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80118ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b0:	4a1f      	ldr	r2, [pc, #124]	; (8011930 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80118b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118b6:	6253      	str	r3, [r2, #36]	; 0x24
 80118b8:	4b1d      	ldr	r3, [pc, #116]	; (8011930 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80118ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80118c0:	60fb      	str	r3, [r7, #12]
 80118c2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80118c4:	4b1b      	ldr	r3, [pc, #108]	; (8011934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80118cc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80118ce:	4b18      	ldr	r3, [pc, #96]	; (8011930 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80118d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d2:	4a17      	ldr	r2, [pc, #92]	; (8011930 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80118d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80118d8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80118e0:	d105      	bne.n	80118ee <RCC_SetFlashLatencyFromMSIRange+0x72>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80118e8:	d101      	bne.n	80118ee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80118ea:	2301      	movs	r3, #1
 80118ec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d105      	bne.n	8011900 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80118f4:	4b10      	ldr	r3, [pc, #64]	; (8011938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4a0f      	ldr	r2, [pc, #60]	; (8011938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80118fa:	f043 0304 	orr.w	r3, r3, #4
 80118fe:	6013      	str	r3, [r2, #0]
 8011900:	4b0d      	ldr	r3, [pc, #52]	; (8011938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f023 0201 	bic.w	r2, r3, #1
 8011908:	490b      	ldr	r1, [pc, #44]	; (8011938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	4313      	orrs	r3, r2
 801190e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8011910:	4b09      	ldr	r3, [pc, #36]	; (8011938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f003 0301 	and.w	r3, r3, #1
 8011918:	693a      	ldr	r2, [r7, #16]
 801191a:	429a      	cmp	r2, r3
 801191c:	d001      	beq.n	8011922 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 801191e:	2301      	movs	r3, #1
 8011920:	e000      	b.n	8011924 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8011922:	2300      	movs	r3, #0
}
 8011924:	4618      	mov	r0, r3
 8011926:	371c      	adds	r7, #28
 8011928:	46bd      	mov	sp, r7
 801192a:	bc80      	pop	{r7}
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	40023800 	.word	0x40023800
 8011934:	40007000 	.word	0x40007000
 8011938:	40023c00 	.word	0x40023c00

0801193c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d101      	bne.n	801194e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801194a:	2301      	movs	r3, #1
 801194c:	e07b      	b.n	8011a46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011952:	2b00      	cmp	r3, #0
 8011954:	d108      	bne.n	8011968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801195e:	d009      	beq.n	8011974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	61da      	str	r2, [r3, #28]
 8011966:	e005      	b.n	8011974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2200      	movs	r2, #0
 8011972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011980:	b2db      	uxtb	r3, r3
 8011982:	2b00      	cmp	r3, #0
 8011984:	d106      	bne.n	8011994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2200      	movs	r2, #0
 801198a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f7f7 ff74 	bl	800987c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2202      	movs	r2, #2
 8011998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	681a      	ldr	r2, [r3, #0]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80119aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80119bc:	431a      	orrs	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80119c6:	431a      	orrs	r2, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	f003 0302 	and.w	r3, r3, #2
 80119d0:	431a      	orrs	r2, r3
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	695b      	ldr	r3, [r3, #20]
 80119d6:	f003 0301 	and.w	r3, r3, #1
 80119da:	431a      	orrs	r2, r3
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	699b      	ldr	r3, [r3, #24]
 80119e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80119e4:	431a      	orrs	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	69db      	ldr	r3, [r3, #28]
 80119ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80119ee:	431a      	orrs	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6a1b      	ldr	r3, [r3, #32]
 80119f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119f8:	ea42 0103 	orr.w	r1, r2, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	430a      	orrs	r2, r1
 8011a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	699b      	ldr	r3, [r3, #24]
 8011a10:	0c1b      	lsrs	r3, r3, #16
 8011a12:	f003 0104 	and.w	r1, r3, #4
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1a:	f003 0210 	and.w	r2, r3, #16
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	430a      	orrs	r2, r1
 8011a24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	69da      	ldr	r2, [r3, #28]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011a34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2201      	movs	r2, #1
 8011a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b08c      	sub	sp, #48	; 0x30
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	60f8      	str	r0, [r7, #12]
 8011a56:	60b9      	str	r1, [r7, #8]
 8011a58:	607a      	str	r2, [r7, #4]
 8011a5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011a60:	2300      	movs	r3, #0
 8011a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d101      	bne.n	8011a74 <HAL_SPI_TransmitReceive+0x26>
 8011a70:	2302      	movs	r3, #2
 8011a72:	e18a      	b.n	8011d8a <HAL_SPI_TransmitReceive+0x33c>
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	2201      	movs	r2, #1
 8011a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011a7c:	f7fd faca 	bl	800f014 <HAL_GetTick>
 8011a80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011a92:	887b      	ldrh	r3, [r7, #2]
 8011a94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d00f      	beq.n	8011abe <HAL_SPI_TransmitReceive+0x70>
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011aa4:	d107      	bne.n	8011ab6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d103      	bne.n	8011ab6 <HAL_SPI_TransmitReceive+0x68>
 8011aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011ab2:	2b04      	cmp	r3, #4
 8011ab4:	d003      	beq.n	8011abe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011ab6:	2302      	movs	r3, #2
 8011ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011abc:	e15b      	b.n	8011d76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d005      	beq.n	8011ad0 <HAL_SPI_TransmitReceive+0x82>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d002      	beq.n	8011ad0 <HAL_SPI_TransmitReceive+0x82>
 8011aca:	887b      	ldrh	r3, [r7, #2]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d103      	bne.n	8011ad8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011ad6:	e14e      	b.n	8011d76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	2b04      	cmp	r3, #4
 8011ae2:	d003      	beq.n	8011aec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2205      	movs	r2, #5
 8011ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2200      	movs	r2, #0
 8011af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	887a      	ldrh	r2, [r7, #2]
 8011afc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	887a      	ldrh	r2, [r7, #2]
 8011b02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	68ba      	ldr	r2, [r7, #8]
 8011b08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	887a      	ldrh	r2, [r7, #2]
 8011b0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	887a      	ldrh	r2, [r7, #2]
 8011b14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b2c:	2b40      	cmp	r3, #64	; 0x40
 8011b2e:	d007      	beq.n	8011b40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	681a      	ldr	r2, [r3, #0]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b48:	d178      	bne.n	8011c3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d002      	beq.n	8011b58 <HAL_SPI_TransmitReceive+0x10a>
 8011b52:	8b7b      	ldrh	r3, [r7, #26]
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d166      	bne.n	8011c26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b5c:	881a      	ldrh	r2, [r3, #0]
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b68:	1c9a      	adds	r2, r3, #2
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	3b01      	subs	r3, #1
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011b7c:	e053      	b.n	8011c26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	689b      	ldr	r3, [r3, #8]
 8011b84:	f003 0302 	and.w	r3, r3, #2
 8011b88:	2b02      	cmp	r3, #2
 8011b8a:	d11b      	bne.n	8011bc4 <HAL_SPI_TransmitReceive+0x176>
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d016      	beq.n	8011bc4 <HAL_SPI_TransmitReceive+0x176>
 8011b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d113      	bne.n	8011bc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ba0:	881a      	ldrh	r2, [r3, #0]
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bac:	1c9a      	adds	r2, r3, #2
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	f003 0301 	and.w	r3, r3, #1
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d119      	bne.n	8011c06 <HAL_SPI_TransmitReceive+0x1b8>
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d014      	beq.n	8011c06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	68da      	ldr	r2, [r3, #12]
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011be6:	b292      	uxth	r2, r2
 8011be8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bee:	1c9a      	adds	r2, r3, #2
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	b29a      	uxth	r2, r3
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011c02:	2301      	movs	r3, #1
 8011c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011c06:	f7fd fa05 	bl	800f014 <HAL_GetTick>
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0e:	1ad3      	subs	r3, r2, r3
 8011c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d807      	bhi.n	8011c26 <HAL_SPI_TransmitReceive+0x1d8>
 8011c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c1c:	d003      	beq.n	8011c26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8011c1e:	2303      	movs	r3, #3
 8011c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011c24:	e0a7      	b.n	8011d76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d1a6      	bne.n	8011b7e <HAL_SPI_TransmitReceive+0x130>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d1a1      	bne.n	8011b7e <HAL_SPI_TransmitReceive+0x130>
 8011c3a:	e07c      	b.n	8011d36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d002      	beq.n	8011c4a <HAL_SPI_TransmitReceive+0x1fc>
 8011c44:	8b7b      	ldrh	r3, [r7, #26]
 8011c46:	2b01      	cmp	r3, #1
 8011c48:	d16b      	bne.n	8011d22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	330c      	adds	r3, #12
 8011c54:	7812      	ldrb	r2, [r2, #0]
 8011c56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c5c:	1c5a      	adds	r2, r3, #1
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	3b01      	subs	r3, #1
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011c70:	e057      	b.n	8011d22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	689b      	ldr	r3, [r3, #8]
 8011c78:	f003 0302 	and.w	r3, r3, #2
 8011c7c:	2b02      	cmp	r3, #2
 8011c7e:	d11c      	bne.n	8011cba <HAL_SPI_TransmitReceive+0x26c>
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d017      	beq.n	8011cba <HAL_SPI_TransmitReceive+0x26c>
 8011c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d114      	bne.n	8011cba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	330c      	adds	r3, #12
 8011c9a:	7812      	ldrb	r2, [r2, #0]
 8011c9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ca2:	1c5a      	adds	r2, r3, #1
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	3b01      	subs	r3, #1
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	f003 0301 	and.w	r3, r3, #1
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d119      	bne.n	8011cfc <HAL_SPI_TransmitReceive+0x2ae>
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d014      	beq.n	8011cfc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	68da      	ldr	r2, [r3, #12]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cdc:	b2d2      	uxtb	r2, r2
 8011cde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ce4:	1c5a      	adds	r2, r3, #1
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	3b01      	subs	r3, #1
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011cfc:	f7fd f98a 	bl	800f014 <HAL_GetTick>
 8011d00:	4602      	mov	r2, r0
 8011d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d803      	bhi.n	8011d14 <HAL_SPI_TransmitReceive+0x2c6>
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d12:	d102      	bne.n	8011d1a <HAL_SPI_TransmitReceive+0x2cc>
 8011d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d103      	bne.n	8011d22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011d1a:	2303      	movs	r3, #3
 8011d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011d20:	e029      	b.n	8011d76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011d26:	b29b      	uxth	r3, r3
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1a2      	bne.n	8011c72 <HAL_SPI_TransmitReceive+0x224>
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d19d      	bne.n	8011c72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f000 faa8 	bl	8012290 <SPI_EndRxTxTransaction>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d006      	beq.n	8011d54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011d46:	2301      	movs	r3, #1
 8011d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2220      	movs	r2, #32
 8011d50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011d52:	e010      	b.n	8011d76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	689b      	ldr	r3, [r3, #8]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d10b      	bne.n	8011d74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	617b      	str	r3, [r7, #20]
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	68db      	ldr	r3, [r3, #12]
 8011d66:	617b      	str	r3, [r7, #20]
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	689b      	ldr	r3, [r3, #8]
 8011d6e:	617b      	str	r3, [r7, #20]
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	e000      	b.n	8011d76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011d74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	2200      	movs	r2, #0
 8011d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011d86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3730      	adds	r7, #48	; 0x30
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
	...

08011d94 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b087      	sub	sp, #28
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	60f8      	str	r0, [r7, #12]
 8011d9c:	60b9      	str	r1, [r7, #8]
 8011d9e:	4613      	mov	r3, r2
 8011da0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d101      	bne.n	8011db4 <HAL_SPI_Transmit_IT+0x20>
 8011db0:	2302      	movs	r3, #2
 8011db2:	e06f      	b.n	8011e94 <HAL_SPI_Transmit_IT+0x100>
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2201      	movs	r2, #1
 8011db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d002      	beq.n	8011dc8 <HAL_SPI_Transmit_IT+0x34>
 8011dc2:	88fb      	ldrh	r3, [r7, #6]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d102      	bne.n	8011dce <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8011dc8:	2301      	movs	r3, #1
 8011dca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011dcc:	e05d      	b.n	8011e8a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011dd4:	b2db      	uxtb	r3, r3
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d002      	beq.n	8011de0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8011dda:	2302      	movs	r3, #2
 8011ddc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011dde:	e054      	b.n	8011e8a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2203      	movs	r2, #3
 8011de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	2200      	movs	r2, #0
 8011dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	68ba      	ldr	r2, [r7, #8]
 8011df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	88fa      	ldrh	r2, [r7, #6]
 8011df8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	88fa      	ldrh	r2, [r7, #6]
 8011dfe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2200      	movs	r2, #0
 8011e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	2200      	movs	r2, #0
 8011e0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2200      	movs	r2, #0
 8011e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d003      	beq.n	8011e28 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	4a1f      	ldr	r2, [pc, #124]	; (8011ea0 <HAL_SPI_Transmit_IT+0x10c>)
 8011e24:	645a      	str	r2, [r3, #68]	; 0x44
 8011e26:	e002      	b.n	8011e2e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	4a1e      	ldr	r2, [pc, #120]	; (8011ea4 <HAL_SPI_Transmit_IT+0x110>)
 8011e2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	689b      	ldr	r3, [r3, #8]
 8011e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e36:	d10f      	bne.n	8011e58 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	681a      	ldr	r2, [r3, #0]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011e46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011e56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	685a      	ldr	r2, [r3, #4]
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8011e66:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e72:	2b40      	cmp	r3, #64	; 0x40
 8011e74:	d008      	beq.n	8011e88 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e84:	601a      	str	r2, [r3, #0]
 8011e86:	e000      	b.n	8011e8a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8011e88:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	371c      	adds	r7, #28
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bc80      	pop	{r7}
 8011e9c:	4770      	bx	lr
 8011e9e:	bf00      	nop
 8011ea0:	0801213b 	.word	0x0801213b
 8011ea4:	080120f5 	.word	0x080120f5

08011ea8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b088      	sub	sp, #32
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011ec0:	69bb      	ldr	r3, [r7, #24]
 8011ec2:	099b      	lsrs	r3, r3, #6
 8011ec4:	f003 0301 	and.w	r3, r3, #1
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d10f      	bne.n	8011eec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8011ecc:	69bb      	ldr	r3, [r7, #24]
 8011ece:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d00a      	beq.n	8011eec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8011ed6:	69fb      	ldr	r3, [r7, #28]
 8011ed8:	099b      	lsrs	r3, r3, #6
 8011eda:	f003 0301 	and.w	r3, r3, #1
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d004      	beq.n	8011eec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	4798      	blx	r3
    return;
 8011eea:	e0d7      	b.n	801209c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8011eec:	69bb      	ldr	r3, [r7, #24]
 8011eee:	085b      	lsrs	r3, r3, #1
 8011ef0:	f003 0301 	and.w	r3, r3, #1
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d00a      	beq.n	8011f0e <HAL_SPI_IRQHandler+0x66>
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	09db      	lsrs	r3, r3, #7
 8011efc:	f003 0301 	and.w	r3, r3, #1
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d004      	beq.n	8011f0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	4798      	blx	r3
    return;
 8011f0c:	e0c6      	b.n	801209c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	095b      	lsrs	r3, r3, #5
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d10c      	bne.n	8011f34 <HAL_SPI_IRQHandler+0x8c>
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	099b      	lsrs	r3, r3, #6
 8011f1e:	f003 0301 	and.w	r3, r3, #1
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d106      	bne.n	8011f34 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	0a1b      	lsrs	r3, r3, #8
 8011f2a:	f003 0301 	and.w	r3, r3, #1
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	f000 80b4 	beq.w	801209c <HAL_SPI_IRQHandler+0x1f4>
 8011f34:	69fb      	ldr	r3, [r7, #28]
 8011f36:	095b      	lsrs	r3, r3, #5
 8011f38:	f003 0301 	and.w	r3, r3, #1
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	f000 80ad 	beq.w	801209c <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8011f42:	69bb      	ldr	r3, [r7, #24]
 8011f44:	099b      	lsrs	r3, r3, #6
 8011f46:	f003 0301 	and.w	r3, r3, #1
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d023      	beq.n	8011f96 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	2b03      	cmp	r3, #3
 8011f58:	d011      	beq.n	8011f7e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f5e:	f043 0204 	orr.w	r2, r3, #4
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011f66:	2300      	movs	r3, #0
 8011f68:	617b      	str	r3, [r7, #20]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	68db      	ldr	r3, [r3, #12]
 8011f70:	617b      	str	r3, [r7, #20]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	617b      	str	r3, [r7, #20]
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	e00b      	b.n	8011f96 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011f7e:	2300      	movs	r3, #0
 8011f80:	613b      	str	r3, [r7, #16]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	613b      	str	r3, [r7, #16]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	613b      	str	r3, [r7, #16]
 8011f92:	693b      	ldr	r3, [r7, #16]
        return;
 8011f94:	e082      	b.n	801209c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8011f96:	69bb      	ldr	r3, [r7, #24]
 8011f98:	095b      	lsrs	r3, r3, #5
 8011f9a:	f003 0301 	and.w	r3, r3, #1
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d014      	beq.n	8011fcc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fa6:	f043 0201 	orr.w	r2, r3, #1
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011fae:	2300      	movs	r3, #0
 8011fb0:	60fb      	str	r3, [r7, #12]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	60fb      	str	r3, [r7, #12]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011fc8:	601a      	str	r2, [r3, #0]
 8011fca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8011fcc:	69bb      	ldr	r3, [r7, #24]
 8011fce:	0a1b      	lsrs	r3, r3, #8
 8011fd0:	f003 0301 	and.w	r3, r3, #1
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d00c      	beq.n	8011ff2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fdc:	f043 0208 	orr.w	r2, r3, #8
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	60bb      	str	r3, [r7, #8]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	689b      	ldr	r3, [r3, #8]
 8011fee:	60bb      	str	r3, [r7, #8]
 8011ff0:	68bb      	ldr	r3, [r7, #8]
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d04f      	beq.n	801209a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	685a      	ldr	r2, [r3, #4]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012008:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2201      	movs	r2, #1
 801200e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	f003 0302 	and.w	r3, r3, #2
 8012018:	2b00      	cmp	r3, #0
 801201a:	d104      	bne.n	8012026 <HAL_SPI_IRQHandler+0x17e>
 801201c:	69fb      	ldr	r3, [r7, #28]
 801201e:	f003 0301 	and.w	r3, r3, #1
 8012022:	2b00      	cmp	r3, #0
 8012024:	d034      	beq.n	8012090 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	685a      	ldr	r2, [r3, #4]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f022 0203 	bic.w	r2, r2, #3
 8012034:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801203a:	2b00      	cmp	r3, #0
 801203c:	d011      	beq.n	8012062 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012042:	4a18      	ldr	r2, [pc, #96]	; (80120a4 <HAL_SPI_IRQHandler+0x1fc>)
 8012044:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801204a:	4618      	mov	r0, r3
 801204c:	f7fd fef5 	bl	800fe3a <HAL_DMA_Abort_IT>
 8012050:	4603      	mov	r3, r0
 8012052:	2b00      	cmp	r3, #0
 8012054:	d005      	beq.n	8012062 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801205a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012066:	2b00      	cmp	r3, #0
 8012068:	d016      	beq.n	8012098 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801206e:	4a0d      	ldr	r2, [pc, #52]	; (80120a4 <HAL_SPI_IRQHandler+0x1fc>)
 8012070:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012076:	4618      	mov	r0, r3
 8012078:	f7fd fedf 	bl	800fe3a <HAL_DMA_Abort_IT>
 801207c:	4603      	mov	r3, r0
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00a      	beq.n	8012098 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012086:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801208e:	e003      	b.n	8012098 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f000 f812 	bl	80120ba <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012096:	e000      	b.n	801209a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8012098:	bf00      	nop
    return;
 801209a:	bf00      	nop
  }
}
 801209c:	3720      	adds	r7, #32
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	080120cd 	.word	0x080120cd

080120a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80120b0:	bf00      	nop
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bc80      	pop	{r7}
 80120b8:	4770      	bx	lr

080120ba <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80120ba:	b480      	push	{r7}
 80120bc:	b083      	sub	sp, #12
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80120c2:	bf00      	nop
 80120c4:	370c      	adds	r7, #12
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bc80      	pop	{r7}
 80120ca:	4770      	bx	lr

080120cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	2200      	movs	r2, #0
 80120de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2200      	movs	r2, #0
 80120e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f7ff ffe7 	bl	80120ba <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80120ec:	bf00      	nop
 80120ee:	3710      	adds	r7, #16
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	330c      	adds	r3, #12
 8012106:	7812      	ldrb	r2, [r2, #0]
 8012108:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801210e:	1c5a      	adds	r2, r3, #1
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012118:	b29b      	uxth	r3, r3
 801211a:	3b01      	subs	r3, #1
 801211c:	b29a      	uxth	r2, r3
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012126:	b29b      	uxth	r3, r3
 8012128:	2b00      	cmp	r3, #0
 801212a:	d102      	bne.n	8012132 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f000 f8f1 	bl	8012314 <SPI_CloseTx_ISR>
  }
}
 8012132:	bf00      	nop
 8012134:	3708      	adds	r7, #8
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}

0801213a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 801213a:	b580      	push	{r7, lr}
 801213c:	b082      	sub	sp, #8
 801213e:	af00      	add	r7, sp, #0
 8012140:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012146:	881a      	ldrh	r2, [r3, #0]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012152:	1c9a      	adds	r2, r3, #2
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801215c:	b29b      	uxth	r3, r3
 801215e:	3b01      	subs	r3, #1
 8012160:	b29a      	uxth	r2, r3
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801216a:	b29b      	uxth	r3, r3
 801216c:	2b00      	cmp	r3, #0
 801216e:	d102      	bne.n	8012176 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 f8cf 	bl	8012314 <SPI_CloseTx_ISR>
  }
}
 8012176:	bf00      	nop
 8012178:	3708      	adds	r7, #8
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}
	...

08012180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b088      	sub	sp, #32
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	603b      	str	r3, [r7, #0]
 801218c:	4613      	mov	r3, r2
 801218e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8012190:	f7fc ff40 	bl	800f014 <HAL_GetTick>
 8012194:	4602      	mov	r2, r0
 8012196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012198:	1a9b      	subs	r3, r3, r2
 801219a:	683a      	ldr	r2, [r7, #0]
 801219c:	4413      	add	r3, r2
 801219e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80121a0:	f7fc ff38 	bl	800f014 <HAL_GetTick>
 80121a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80121a6:	4b39      	ldr	r3, [pc, #228]	; (801228c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	015b      	lsls	r3, r3, #5
 80121ac:	0d1b      	lsrs	r3, r3, #20
 80121ae:	69fa      	ldr	r2, [r7, #28]
 80121b0:	fb02 f303 	mul.w	r3, r2, r3
 80121b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80121b6:	e054      	b.n	8012262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121be:	d050      	beq.n	8012262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80121c0:	f7fc ff28 	bl	800f014 <HAL_GetTick>
 80121c4:	4602      	mov	r2, r0
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	1ad3      	subs	r3, r2, r3
 80121ca:	69fa      	ldr	r2, [r7, #28]
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d902      	bls.n	80121d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d13d      	bne.n	8012252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	685a      	ldr	r2, [r3, #4]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80121e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80121ee:	d111      	bne.n	8012214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	689b      	ldr	r3, [r3, #8]
 80121f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80121f8:	d004      	beq.n	8012204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	689b      	ldr	r3, [r3, #8]
 80121fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012202:	d107      	bne.n	8012214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801221c:	d10f      	bne.n	801223e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	681a      	ldr	r2, [r3, #0]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801222c:	601a      	str	r2, [r3, #0]
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801223c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	2201      	movs	r2, #1
 8012242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	2200      	movs	r2, #0
 801224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801224e:	2303      	movs	r3, #3
 8012250:	e017      	b.n	8012282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d101      	bne.n	801225c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012258:	2300      	movs	r3, #0
 801225a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	3b01      	subs	r3, #1
 8012260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	689a      	ldr	r2, [r3, #8]
 8012268:	68bb      	ldr	r3, [r7, #8]
 801226a:	4013      	ands	r3, r2
 801226c:	68ba      	ldr	r2, [r7, #8]
 801226e:	429a      	cmp	r2, r3
 8012270:	bf0c      	ite	eq
 8012272:	2301      	moveq	r3, #1
 8012274:	2300      	movne	r3, #0
 8012276:	b2db      	uxtb	r3, r3
 8012278:	461a      	mov	r2, r3
 801227a:	79fb      	ldrb	r3, [r7, #7]
 801227c:	429a      	cmp	r2, r3
 801227e:	d19b      	bne.n	80121b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012280:	2300      	movs	r3, #0
}
 8012282:	4618      	mov	r0, r3
 8012284:	3720      	adds	r7, #32
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	20000000 	.word	0x20000000

08012290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b088      	sub	sp, #32
 8012294:	af02      	add	r7, sp, #8
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801229c:	4b1b      	ldr	r3, [pc, #108]	; (801230c <SPI_EndRxTxTransaction+0x7c>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	4a1b      	ldr	r2, [pc, #108]	; (8012310 <SPI_EndRxTxTransaction+0x80>)
 80122a2:	fba2 2303 	umull	r2, r3, r2, r3
 80122a6:	0d5b      	lsrs	r3, r3, #21
 80122a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80122ac:	fb02 f303 	mul.w	r3, r2, r3
 80122b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80122ba:	d112      	bne.n	80122e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	9300      	str	r3, [sp, #0]
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	2200      	movs	r2, #0
 80122c4:	2180      	movs	r1, #128	; 0x80
 80122c6:	68f8      	ldr	r0, [r7, #12]
 80122c8:	f7ff ff5a 	bl	8012180 <SPI_WaitFlagStateUntilTimeout>
 80122cc:	4603      	mov	r3, r0
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d016      	beq.n	8012300 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122d6:	f043 0220 	orr.w	r2, r3, #32
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80122de:	2303      	movs	r3, #3
 80122e0:	e00f      	b.n	8012302 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00a      	beq.n	80122fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	3b01      	subs	r3, #1
 80122ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	689b      	ldr	r3, [r3, #8]
 80122f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122f8:	2b80      	cmp	r3, #128	; 0x80
 80122fa:	d0f2      	beq.n	80122e2 <SPI_EndRxTxTransaction+0x52>
 80122fc:	e000      	b.n	8012300 <SPI_EndRxTxTransaction+0x70>
        break;
 80122fe:	bf00      	nop
  }

  return HAL_OK;
 8012300:	2300      	movs	r3, #0
}
 8012302:	4618      	mov	r0, r3
 8012304:	3718      	adds	r7, #24
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}
 801230a:	bf00      	nop
 801230c:	20000000 	.word	0x20000000
 8012310:	165e9f81 	.word	0x165e9f81

08012314 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b086      	sub	sp, #24
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801231c:	4b2c      	ldr	r3, [pc, #176]	; (80123d0 <SPI_CloseTx_ISR+0xbc>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	4a2c      	ldr	r2, [pc, #176]	; (80123d4 <SPI_CloseTx_ISR+0xc0>)
 8012322:	fba2 2303 	umull	r2, r3, r2, r3
 8012326:	0a5b      	lsrs	r3, r3, #9
 8012328:	2264      	movs	r2, #100	; 0x64
 801232a:	fb02 f303 	mul.w	r3, r2, r3
 801232e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012330:	f7fc fe70 	bl	800f014 <HAL_GetTick>
 8012334:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d106      	bne.n	801234a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012340:	f043 0220 	orr.w	r2, r3, #32
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012348:	e009      	b.n	801235e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	3b01      	subs	r3, #1
 801234e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	689b      	ldr	r3, [r3, #8]
 8012356:	f003 0302 	and.w	r3, r3, #2
 801235a:	2b00      	cmp	r3, #0
 801235c:	d0eb      	beq.n	8012336 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	685a      	ldr	r2, [r3, #4]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801236c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801236e:	697a      	ldr	r2, [r7, #20]
 8012370:	2164      	movs	r1, #100	; 0x64
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7ff ff8c 	bl	8012290 <SPI_EndRxTxTransaction>
 8012378:	4603      	mov	r3, r0
 801237a:	2b00      	cmp	r3, #0
 801237c:	d005      	beq.n	801238a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012382:	f043 0220 	orr.w	r2, r3, #32
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	689b      	ldr	r3, [r3, #8]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10a      	bne.n	80123a8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012392:	2300      	movs	r3, #0
 8012394:	60fb      	str	r3, [r7, #12]
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	60fb      	str	r3, [r7, #12]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	689b      	ldr	r3, [r3, #8]
 80123a4:	60fb      	str	r3, [r7, #12]
 80123a6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2201      	movs	r2, #1
 80123ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d003      	beq.n	80123c0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f7ff fe7e 	bl	80120ba <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80123be:	e002      	b.n	80123c6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f7ff fe71 	bl	80120a8 <HAL_SPI_TxCpltCallback>
}
 80123c6:	bf00      	nop
 80123c8:	3718      	adds	r7, #24
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	20000000 	.word	0x20000000
 80123d4:	057619f1 	.word	0x057619f1

080123d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d101      	bne.n	80123ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80123e6:	2301      	movs	r3, #1
 80123e8:	e031      	b.n	801244e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d106      	bne.n	8012404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7f7 fe56 	bl	800a0b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2202      	movs	r2, #2
 8012408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	3304      	adds	r3, #4
 8012414:	4619      	mov	r1, r3
 8012416:	4610      	mov	r0, r2
 8012418:	f000 fd48 	bl	8012eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2201      	movs	r2, #1
 8012420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2201      	movs	r2, #1
 8012428:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2201      	movs	r2, #1
 8012430:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2201      	movs	r2, #1
 8012438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2201      	movs	r2, #1
 8012440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2201      	movs	r2, #1
 8012448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 801244c:	2300      	movs	r3, #0
}
 801244e:	4618      	mov	r0, r3
 8012450:	3708      	adds	r7, #8
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
	...

08012458 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012458:	b480      	push	{r7}
 801245a:	b085      	sub	sp, #20
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2b01      	cmp	r3, #1
 801246a:	d001      	beq.n	8012470 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801246c:	2301      	movs	r3, #1
 801246e:	e032      	b.n	80124d6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2202      	movs	r2, #2
 8012474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012480:	d00e      	beq.n	80124a0 <HAL_TIM_Base_Start+0x48>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4a16      	ldr	r2, [pc, #88]	; (80124e0 <HAL_TIM_Base_Start+0x88>)
 8012488:	4293      	cmp	r3, r2
 801248a:	d009      	beq.n	80124a0 <HAL_TIM_Base_Start+0x48>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4a14      	ldr	r2, [pc, #80]	; (80124e4 <HAL_TIM_Base_Start+0x8c>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d004      	beq.n	80124a0 <HAL_TIM_Base_Start+0x48>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	4a13      	ldr	r2, [pc, #76]	; (80124e8 <HAL_TIM_Base_Start+0x90>)
 801249c:	4293      	cmp	r3, r2
 801249e:	d111      	bne.n	80124c4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	689b      	ldr	r3, [r3, #8]
 80124a6:	f003 0307 	and.w	r3, r3, #7
 80124aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2b06      	cmp	r3, #6
 80124b0:	d010      	beq.n	80124d4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	f042 0201 	orr.w	r2, r2, #1
 80124c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80124c2:	e007      	b.n	80124d4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f042 0201 	orr.w	r2, r2, #1
 80124d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80124d4:	2300      	movs	r3, #0
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3714      	adds	r7, #20
 80124da:	46bd      	mov	sp, r7
 80124dc:	bc80      	pop	{r7}
 80124de:	4770      	bx	lr
 80124e0:	40000400 	.word	0x40000400
 80124e4:	40000800 	.word	0x40000800
 80124e8:	40010800 	.word	0x40010800

080124ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80124ec:	b480      	push	{r7}
 80124ee:	b085      	sub	sp, #20
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	d001      	beq.n	8012504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012500:	2301      	movs	r3, #1
 8012502:	e03a      	b.n	801257a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2202      	movs	r2, #2
 8012508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	68da      	ldr	r2, [r3, #12]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f042 0201 	orr.w	r2, r2, #1
 801251a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012524:	d00e      	beq.n	8012544 <HAL_TIM_Base_Start_IT+0x58>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4a16      	ldr	r2, [pc, #88]	; (8012584 <HAL_TIM_Base_Start_IT+0x98>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d009      	beq.n	8012544 <HAL_TIM_Base_Start_IT+0x58>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	4a14      	ldr	r2, [pc, #80]	; (8012588 <HAL_TIM_Base_Start_IT+0x9c>)
 8012536:	4293      	cmp	r3, r2
 8012538:	d004      	beq.n	8012544 <HAL_TIM_Base_Start_IT+0x58>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	4a13      	ldr	r2, [pc, #76]	; (801258c <HAL_TIM_Base_Start_IT+0xa0>)
 8012540:	4293      	cmp	r3, r2
 8012542:	d111      	bne.n	8012568 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	f003 0307 	and.w	r3, r3, #7
 801254e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2b06      	cmp	r3, #6
 8012554:	d010      	beq.n	8012578 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	681a      	ldr	r2, [r3, #0]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	f042 0201 	orr.w	r2, r2, #1
 8012564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012566:	e007      	b.n	8012578 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f042 0201 	orr.w	r2, r2, #1
 8012576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012578:	2300      	movs	r3, #0
}
 801257a:	4618      	mov	r0, r3
 801257c:	3714      	adds	r7, #20
 801257e:	46bd      	mov	sp, r7
 8012580:	bc80      	pop	{r7}
 8012582:	4770      	bx	lr
 8012584:	40000400 	.word	0x40000400
 8012588:	40000800 	.word	0x40000800
 801258c:	40010800 	.word	0x40010800

08012590 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	68da      	ldr	r2, [r3, #12]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	f022 0201 	bic.w	r2, r2, #1
 80125a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	6a1a      	ldr	r2, [r3, #32]
 80125ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80125b2:	4013      	ands	r3, r2
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d107      	bne.n	80125c8 <HAL_TIM_Base_Stop_IT+0x38>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	681a      	ldr	r2, [r3, #0]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f022 0201 	bic.w	r2, r2, #1
 80125c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2201      	movs	r2, #1
 80125cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	370c      	adds	r7, #12
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bc80      	pop	{r7}
 80125da:	4770      	bx	lr

080125dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d101      	bne.n	80125ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80125ea:	2301      	movs	r3, #1
 80125ec:	e031      	b.n	8012652 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80125f4:	b2db      	uxtb	r3, r3
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2200      	movs	r2, #0
 80125fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f000 f829 	bl	801265a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2202      	movs	r2, #2
 801260c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	3304      	adds	r3, #4
 8012618:	4619      	mov	r1, r3
 801261a:	4610      	mov	r0, r2
 801261c:	f000 fc46 	bl	8012eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2201      	movs	r2, #1
 8012624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2201      	movs	r2, #1
 801262c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2201      	movs	r2, #1
 8012634:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2201      	movs	r2, #1
 801263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2201      	movs	r2, #1
 8012644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2201      	movs	r2, #1
 801264c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8012650:	2300      	movs	r3, #0
}
 8012652:	4618      	mov	r0, r3
 8012654:	3708      	adds	r7, #8
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801265a:	b480      	push	{r7}
 801265c:	b083      	sub	sp, #12
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012662:	bf00      	nop
 8012664:	370c      	adds	r7, #12
 8012666:	46bd      	mov	sp, r7
 8012668:	bc80      	pop	{r7}
 801266a:	4770      	bx	lr

0801266c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d109      	bne.n	8012690 <HAL_TIM_PWM_Start+0x24>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012682:	b2db      	uxtb	r3, r3
 8012684:	2b01      	cmp	r3, #1
 8012686:	bf14      	ite	ne
 8012688:	2301      	movne	r3, #1
 801268a:	2300      	moveq	r3, #0
 801268c:	b2db      	uxtb	r3, r3
 801268e:	e022      	b.n	80126d6 <HAL_TIM_PWM_Start+0x6a>
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	2b04      	cmp	r3, #4
 8012694:	d109      	bne.n	80126aa <HAL_TIM_PWM_Start+0x3e>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 801269c:	b2db      	uxtb	r3, r3
 801269e:	2b01      	cmp	r3, #1
 80126a0:	bf14      	ite	ne
 80126a2:	2301      	movne	r3, #1
 80126a4:	2300      	moveq	r3, #0
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	e015      	b.n	80126d6 <HAL_TIM_PWM_Start+0x6a>
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	2b08      	cmp	r3, #8
 80126ae:	d109      	bne.n	80126c4 <HAL_TIM_PWM_Start+0x58>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	bf14      	ite	ne
 80126bc:	2301      	movne	r3, #1
 80126be:	2300      	moveq	r3, #0
 80126c0:	b2db      	uxtb	r3, r3
 80126c2:	e008      	b.n	80126d6 <HAL_TIM_PWM_Start+0x6a>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	bf14      	ite	ne
 80126d0:	2301      	movne	r3, #1
 80126d2:	2300      	moveq	r3, #0
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80126da:	2301      	movs	r3, #1
 80126dc:	e051      	b.n	8012782 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d104      	bne.n	80126ee <HAL_TIM_PWM_Start+0x82>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2202      	movs	r2, #2
 80126e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80126ec:	e013      	b.n	8012716 <HAL_TIM_PWM_Start+0xaa>
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	2b04      	cmp	r3, #4
 80126f2:	d104      	bne.n	80126fe <HAL_TIM_PWM_Start+0x92>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2202      	movs	r2, #2
 80126f8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80126fc:	e00b      	b.n	8012716 <HAL_TIM_PWM_Start+0xaa>
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	2b08      	cmp	r3, #8
 8012702:	d104      	bne.n	801270e <HAL_TIM_PWM_Start+0xa2>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2202      	movs	r2, #2
 8012708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801270c:	e003      	b.n	8012716 <HAL_TIM_PWM_Start+0xaa>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2202      	movs	r2, #2
 8012712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2201      	movs	r2, #1
 801271c:	6839      	ldr	r1, [r7, #0]
 801271e:	4618      	mov	r0, r3
 8012720:	f000 fdbf 	bl	80132a2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801272c:	d00e      	beq.n	801274c <HAL_TIM_PWM_Start+0xe0>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	4a16      	ldr	r2, [pc, #88]	; (801278c <HAL_TIM_PWM_Start+0x120>)
 8012734:	4293      	cmp	r3, r2
 8012736:	d009      	beq.n	801274c <HAL_TIM_PWM_Start+0xe0>
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	4a14      	ldr	r2, [pc, #80]	; (8012790 <HAL_TIM_PWM_Start+0x124>)
 801273e:	4293      	cmp	r3, r2
 8012740:	d004      	beq.n	801274c <HAL_TIM_PWM_Start+0xe0>
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	4a13      	ldr	r2, [pc, #76]	; (8012794 <HAL_TIM_PWM_Start+0x128>)
 8012748:	4293      	cmp	r3, r2
 801274a:	d111      	bne.n	8012770 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	689b      	ldr	r3, [r3, #8]
 8012752:	f003 0307 	and.w	r3, r3, #7
 8012756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2b06      	cmp	r3, #6
 801275c:	d010      	beq.n	8012780 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f042 0201 	orr.w	r2, r2, #1
 801276c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801276e:	e007      	b.n	8012780 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f042 0201 	orr.w	r2, r2, #1
 801277e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012780:	2300      	movs	r3, #0
}
 8012782:	4618      	mov	r0, r3
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop
 801278c:	40000400 	.word	0x40000400
 8012790:	40000800 	.word	0x40000800
 8012794:	40010800 	.word	0x40010800

08012798 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b086      	sub	sp, #24
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
 80127a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d101      	bne.n	80127ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80127a8:	2301      	movs	r3, #1
 80127aa:	e08f      	b.n	80128cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80127b2:	b2db      	uxtb	r3, r3
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d106      	bne.n	80127c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7f7 fbf9 	bl	8009fb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2202      	movs	r2, #2
 80127ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	689b      	ldr	r3, [r3, #8]
 80127d4:	687a      	ldr	r2, [r7, #4]
 80127d6:	6812      	ldr	r2, [r2, #0]
 80127d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80127dc:	f023 0307 	bic.w	r3, r3, #7
 80127e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681a      	ldr	r2, [r3, #0]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	3304      	adds	r3, #4
 80127ea:	4619      	mov	r1, r3
 80127ec:	4610      	mov	r0, r2
 80127ee:	f000 fb5d 	bl	8012eac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	689b      	ldr	r3, [r3, #8]
 80127f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	699b      	ldr	r3, [r3, #24]
 8012800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	6a1b      	ldr	r3, [r3, #32]
 8012808:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	697a      	ldr	r2, [r7, #20]
 8012810:	4313      	orrs	r3, r2
 8012812:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801281a:	f023 0303 	bic.w	r3, r3, #3
 801281e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	689a      	ldr	r2, [r3, #8]
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	699b      	ldr	r3, [r3, #24]
 8012828:	021b      	lsls	r3, r3, #8
 801282a:	4313      	orrs	r3, r2
 801282c:	693a      	ldr	r2, [r7, #16]
 801282e:	4313      	orrs	r3, r2
 8012830:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012838:	f023 030c 	bic.w	r3, r3, #12
 801283c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	68da      	ldr	r2, [r3, #12]
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	69db      	ldr	r3, [r3, #28]
 8012852:	021b      	lsls	r3, r3, #8
 8012854:	4313      	orrs	r3, r2
 8012856:	693a      	ldr	r2, [r7, #16]
 8012858:	4313      	orrs	r3, r2
 801285a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	691b      	ldr	r3, [r3, #16]
 8012860:	011a      	lsls	r2, r3, #4
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	6a1b      	ldr	r3, [r3, #32]
 8012866:	031b      	lsls	r3, r3, #12
 8012868:	4313      	orrs	r3, r2
 801286a:	693a      	ldr	r2, [r7, #16]
 801286c:	4313      	orrs	r3, r2
 801286e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8012876:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801287e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	685a      	ldr	r2, [r3, #4]
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	695b      	ldr	r3, [r3, #20]
 8012888:	011b      	lsls	r3, r3, #4
 801288a:	4313      	orrs	r3, r2
 801288c:	68fa      	ldr	r2, [r7, #12]
 801288e:	4313      	orrs	r3, r2
 8012890:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	697a      	ldr	r2, [r7, #20]
 8012898:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	693a      	ldr	r2, [r7, #16]
 80128a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	68fa      	ldr	r2, [r7, #12]
 80128a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2201      	movs	r2, #1
 80128ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2201      	movs	r2, #1
 80128b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2201      	movs	r2, #1
 80128be:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2201      	movs	r2, #1
 80128c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80128ca:	2300      	movs	r3, #0
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3718      	adds	r7, #24
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80128e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80128ec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d109      	bne.n	8012908 <HAL_TIM_Encoder_Start+0x34>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80128f4:	7bfb      	ldrb	r3, [r7, #15]
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	d001      	beq.n	80128fe <HAL_TIM_Encoder_Start+0x2a>
    {
      return HAL_ERROR;
 80128fa:	2301      	movs	r3, #1
 80128fc:	e050      	b.n	80129a0 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2202      	movs	r2, #2
 8012902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8012906:	e01c      	b.n	8012942 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2b04      	cmp	r3, #4
 801290c:	d109      	bne.n	8012922 <HAL_TIM_Encoder_Start+0x4e>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801290e:	7bbb      	ldrb	r3, [r7, #14]
 8012910:	2b01      	cmp	r3, #1
 8012912:	d001      	beq.n	8012918 <HAL_TIM_Encoder_Start+0x44>
    {
      return HAL_ERROR;
 8012914:	2301      	movs	r3, #1
 8012916:	e043      	b.n	80129a0 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2202      	movs	r2, #2
 801291c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8012920:	e00f      	b.n	8012942 <HAL_TIM_Encoder_Start+0x6e>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8012922:	7bfb      	ldrb	r3, [r7, #15]
 8012924:	2b01      	cmp	r3, #1
 8012926:	d102      	bne.n	801292e <HAL_TIM_Encoder_Start+0x5a>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8012928:	7bbb      	ldrb	r3, [r7, #14]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d001      	beq.n	8012932 <HAL_TIM_Encoder_Start+0x5e>
    {
      return HAL_ERROR;
 801292e:	2301      	movs	r3, #1
 8012930:	e036      	b.n	80129a0 <HAL_TIM_Encoder_Start+0xcc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2202      	movs	r2, #2
 8012936:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2202      	movs	r2, #2
 801293e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d003      	beq.n	8012950 <HAL_TIM_Encoder_Start+0x7c>
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	2b04      	cmp	r3, #4
 801294c:	d008      	beq.n	8012960 <HAL_TIM_Encoder_Start+0x8c>
 801294e:	e00f      	b.n	8012970 <HAL_TIM_Encoder_Start+0x9c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	2201      	movs	r2, #1
 8012956:	2100      	movs	r1, #0
 8012958:	4618      	mov	r0, r3
 801295a:	f000 fca2 	bl	80132a2 <TIM_CCxChannelCmd>
      break;
 801295e:	e016      	b.n	801298e <HAL_TIM_Encoder_Start+0xba>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	2201      	movs	r2, #1
 8012966:	2104      	movs	r1, #4
 8012968:	4618      	mov	r0, r3
 801296a:	f000 fc9a 	bl	80132a2 <TIM_CCxChannelCmd>
      break;
 801296e:	e00e      	b.n	801298e <HAL_TIM_Encoder_Start+0xba>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	2201      	movs	r2, #1
 8012976:	2100      	movs	r1, #0
 8012978:	4618      	mov	r0, r3
 801297a:	f000 fc92 	bl	80132a2 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2201      	movs	r2, #1
 8012984:	2104      	movs	r1, #4
 8012986:	4618      	mov	r0, r3
 8012988:	f000 fc8b 	bl	80132a2 <TIM_CCxChannelCmd>
      break;
 801298c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	681a      	ldr	r2, [r3, #0]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	f042 0201 	orr.w	r2, r2, #1
 801299c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3710      	adds	r7, #16
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	691b      	ldr	r3, [r3, #16]
 80129b6:	f003 0302 	and.w	r3, r3, #2
 80129ba:	2b02      	cmp	r3, #2
 80129bc:	d122      	bne.n	8012a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	f003 0302 	and.w	r3, r3, #2
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	d11b      	bne.n	8012a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f06f 0202 	mvn.w	r2, #2
 80129d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2201      	movs	r2, #1
 80129da:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	699b      	ldr	r3, [r3, #24]
 80129e2:	f003 0303 	and.w	r3, r3, #3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d003      	beq.n	80129f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f000 fa43 	bl	8012e76 <HAL_TIM_IC_CaptureCallback>
 80129f0:	e005      	b.n	80129fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f000 fa36 	bl	8012e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f000 fa45 	bl	8012e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2200      	movs	r2, #0
 8012a02:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	691b      	ldr	r3, [r3, #16]
 8012a0a:	f003 0304 	and.w	r3, r3, #4
 8012a0e:	2b04      	cmp	r3, #4
 8012a10:	d122      	bne.n	8012a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	f003 0304 	and.w	r3, r3, #4
 8012a1c:	2b04      	cmp	r3, #4
 8012a1e:	d11b      	bne.n	8012a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	f06f 0204 	mvn.w	r2, #4
 8012a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2202      	movs	r2, #2
 8012a2e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	699b      	ldr	r3, [r3, #24]
 8012a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d003      	beq.n	8012a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 fa19 	bl	8012e76 <HAL_TIM_IC_CaptureCallback>
 8012a44:	e005      	b.n	8012a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 fa0c 	bl	8012e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f000 fa1b 	bl	8012e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2200      	movs	r2, #0
 8012a56:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	691b      	ldr	r3, [r3, #16]
 8012a5e:	f003 0308 	and.w	r3, r3, #8
 8012a62:	2b08      	cmp	r3, #8
 8012a64:	d122      	bne.n	8012aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	f003 0308 	and.w	r3, r3, #8
 8012a70:	2b08      	cmp	r3, #8
 8012a72:	d11b      	bne.n	8012aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f06f 0208 	mvn.w	r2, #8
 8012a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2204      	movs	r2, #4
 8012a82:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	69db      	ldr	r3, [r3, #28]
 8012a8a:	f003 0303 	and.w	r3, r3, #3
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d003      	beq.n	8012a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f000 f9ef 	bl	8012e76 <HAL_TIM_IC_CaptureCallback>
 8012a98:	e005      	b.n	8012aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f000 f9e2 	bl	8012e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f000 f9f1 	bl	8012e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	691b      	ldr	r3, [r3, #16]
 8012ab2:	f003 0310 	and.w	r3, r3, #16
 8012ab6:	2b10      	cmp	r3, #16
 8012ab8:	d122      	bne.n	8012b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	68db      	ldr	r3, [r3, #12]
 8012ac0:	f003 0310 	and.w	r3, r3, #16
 8012ac4:	2b10      	cmp	r3, #16
 8012ac6:	d11b      	bne.n	8012b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f06f 0210 	mvn.w	r2, #16
 8012ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2208      	movs	r2, #8
 8012ad6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	69db      	ldr	r3, [r3, #28]
 8012ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d003      	beq.n	8012aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f000 f9c5 	bl	8012e76 <HAL_TIM_IC_CaptureCallback>
 8012aec:	e005      	b.n	8012afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 f9b8 	bl	8012e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f000 f9c7 	bl	8012e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	691b      	ldr	r3, [r3, #16]
 8012b06:	f003 0301 	and.w	r3, r3, #1
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	d10e      	bne.n	8012b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	f003 0301 	and.w	r3, r3, #1
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d107      	bne.n	8012b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f06f 0201 	mvn.w	r2, #1
 8012b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7f7 ffee 	bl	800ab08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	691b      	ldr	r3, [r3, #16]
 8012b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b36:	2b40      	cmp	r3, #64	; 0x40
 8012b38:	d10e      	bne.n	8012b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	68db      	ldr	r3, [r3, #12]
 8012b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b44:	2b40      	cmp	r3, #64	; 0x40
 8012b46:	d107      	bne.n	8012b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f000 f9a1 	bl	8012e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012b58:	bf00      	nop
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}

08012b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d101      	bne.n	8012b7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8012b76:	2302      	movs	r3, #2
 8012b78:	e0ac      	b.n	8012cd4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2b0c      	cmp	r3, #12
 8012b86:	f200 809f 	bhi.w	8012cc8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8012b8a:	a201      	add	r2, pc, #4	; (adr r2, 8012b90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8012b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b90:	08012bc5 	.word	0x08012bc5
 8012b94:	08012cc9 	.word	0x08012cc9
 8012b98:	08012cc9 	.word	0x08012cc9
 8012b9c:	08012cc9 	.word	0x08012cc9
 8012ba0:	08012c05 	.word	0x08012c05
 8012ba4:	08012cc9 	.word	0x08012cc9
 8012ba8:	08012cc9 	.word	0x08012cc9
 8012bac:	08012cc9 	.word	0x08012cc9
 8012bb0:	08012c47 	.word	0x08012c47
 8012bb4:	08012cc9 	.word	0x08012cc9
 8012bb8:	08012cc9 	.word	0x08012cc9
 8012bbc:	08012cc9 	.word	0x08012cc9
 8012bc0:	08012c87 	.word	0x08012c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	68b9      	ldr	r1, [r7, #8]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f000 f9de 	bl	8012f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	699a      	ldr	r2, [r3, #24]
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f042 0208 	orr.w	r2, r2, #8
 8012bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	699a      	ldr	r2, [r3, #24]
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	f022 0204 	bic.w	r2, r2, #4
 8012bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	6999      	ldr	r1, [r3, #24]
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	68da      	ldr	r2, [r3, #12]
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	430a      	orrs	r2, r1
 8012c00:	619a      	str	r2, [r3, #24]
      break;
 8012c02:	e062      	b.n	8012cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	68b9      	ldr	r1, [r7, #8]
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f000 f9fa 	bl	8013004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	699a      	ldr	r2, [r3, #24]
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	699a      	ldr	r2, [r3, #24]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	6999      	ldr	r1, [r3, #24]
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	021a      	lsls	r2, r3, #8
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	430a      	orrs	r2, r1
 8012c42:	619a      	str	r2, [r3, #24]
      break;
 8012c44:	e041      	b.n	8012cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	68b9      	ldr	r1, [r7, #8]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f000 fa17 	bl	8013080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	69da      	ldr	r2, [r3, #28]
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f042 0208 	orr.w	r2, r2, #8
 8012c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	69da      	ldr	r2, [r3, #28]
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	f022 0204 	bic.w	r2, r2, #4
 8012c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	69d9      	ldr	r1, [r3, #28]
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	68da      	ldr	r2, [r3, #12]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	430a      	orrs	r2, r1
 8012c82:	61da      	str	r2, [r3, #28]
      break;
 8012c84:	e021      	b.n	8012cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	68b9      	ldr	r1, [r7, #8]
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f000 fa34 	bl	80130fa <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	69da      	ldr	r2, [r3, #28]
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	69da      	ldr	r2, [r3, #28]
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	69d9      	ldr	r1, [r3, #28]
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	021a      	lsls	r2, r3, #8
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	430a      	orrs	r2, r1
 8012cc4:	61da      	str	r2, [r3, #28]
      break;
 8012cc6:	e000      	b.n	8012cca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8012cc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8012cd2:	2300      	movs	r3, #0
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b084      	sub	sp, #16
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d101      	bne.n	8012cf4 <HAL_TIM_ConfigClockSource+0x18>
 8012cf0:	2302      	movs	r3, #2
 8012cf2:	e0b3      	b.n	8012e5c <HAL_TIM_ConfigClockSource+0x180>
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2202      	movs	r2, #2
 8012d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	689b      	ldr	r3, [r3, #8]
 8012d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012d1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	68fa      	ldr	r2, [r7, #12]
 8012d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012d2c:	d03e      	beq.n	8012dac <HAL_TIM_ConfigClockSource+0xd0>
 8012d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012d32:	f200 8087 	bhi.w	8012e44 <HAL_TIM_ConfigClockSource+0x168>
 8012d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d3a:	f000 8085 	beq.w	8012e48 <HAL_TIM_ConfigClockSource+0x16c>
 8012d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d42:	d87f      	bhi.n	8012e44 <HAL_TIM_ConfigClockSource+0x168>
 8012d44:	2b70      	cmp	r3, #112	; 0x70
 8012d46:	d01a      	beq.n	8012d7e <HAL_TIM_ConfigClockSource+0xa2>
 8012d48:	2b70      	cmp	r3, #112	; 0x70
 8012d4a:	d87b      	bhi.n	8012e44 <HAL_TIM_ConfigClockSource+0x168>
 8012d4c:	2b60      	cmp	r3, #96	; 0x60
 8012d4e:	d050      	beq.n	8012df2 <HAL_TIM_ConfigClockSource+0x116>
 8012d50:	2b60      	cmp	r3, #96	; 0x60
 8012d52:	d877      	bhi.n	8012e44 <HAL_TIM_ConfigClockSource+0x168>
 8012d54:	2b50      	cmp	r3, #80	; 0x50
 8012d56:	d03c      	beq.n	8012dd2 <HAL_TIM_ConfigClockSource+0xf6>
 8012d58:	2b50      	cmp	r3, #80	; 0x50
 8012d5a:	d873      	bhi.n	8012e44 <HAL_TIM_ConfigClockSource+0x168>
 8012d5c:	2b40      	cmp	r3, #64	; 0x40
 8012d5e:	d058      	beq.n	8012e12 <HAL_TIM_ConfigClockSource+0x136>
 8012d60:	2b40      	cmp	r3, #64	; 0x40
 8012d62:	d86f      	bhi.n	8012e44 <HAL_TIM_ConfigClockSource+0x168>
 8012d64:	2b30      	cmp	r3, #48	; 0x30
 8012d66:	d064      	beq.n	8012e32 <HAL_TIM_ConfigClockSource+0x156>
 8012d68:	2b30      	cmp	r3, #48	; 0x30
 8012d6a:	d86b      	bhi.n	8012e44 <HAL_TIM_ConfigClockSource+0x168>
 8012d6c:	2b20      	cmp	r3, #32
 8012d6e:	d060      	beq.n	8012e32 <HAL_TIM_ConfigClockSource+0x156>
 8012d70:	2b20      	cmp	r3, #32
 8012d72:	d867      	bhi.n	8012e44 <HAL_TIM_ConfigClockSource+0x168>
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d05c      	beq.n	8012e32 <HAL_TIM_ConfigClockSource+0x156>
 8012d78:	2b10      	cmp	r3, #16
 8012d7a:	d05a      	beq.n	8012e32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8012d7c:	e062      	b.n	8012e44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6818      	ldr	r0, [r3, #0]
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	6899      	ldr	r1, [r3, #8]
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	685a      	ldr	r2, [r3, #4]
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	f000 fa69 	bl	8013264 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	689b      	ldr	r3, [r3, #8]
 8012d98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012da0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	68fa      	ldr	r2, [r7, #12]
 8012da8:	609a      	str	r2, [r3, #8]
      break;
 8012daa:	e04e      	b.n	8012e4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6818      	ldr	r0, [r3, #0]
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	6899      	ldr	r1, [r3, #8]
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	685a      	ldr	r2, [r3, #4]
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	f000 fa52 	bl	8013264 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	689a      	ldr	r2, [r3, #8]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012dce:	609a      	str	r2, [r3, #8]
      break;
 8012dd0:	e03b      	b.n	8012e4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6818      	ldr	r0, [r3, #0]
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	6859      	ldr	r1, [r3, #4]
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	461a      	mov	r2, r3
 8012de0:	f000 f9c9 	bl	8013176 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2150      	movs	r1, #80	; 0x50
 8012dea:	4618      	mov	r0, r3
 8012dec:	f000 fa20 	bl	8013230 <TIM_ITRx_SetConfig>
      break;
 8012df0:	e02b      	b.n	8012e4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6818      	ldr	r0, [r3, #0]
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	6859      	ldr	r1, [r3, #4]
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	461a      	mov	r2, r3
 8012e00:	f000 f9e7 	bl	80131d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	2160      	movs	r1, #96	; 0x60
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 fa10 	bl	8013230 <TIM_ITRx_SetConfig>
      break;
 8012e10:	e01b      	b.n	8012e4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6818      	ldr	r0, [r3, #0]
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	6859      	ldr	r1, [r3, #4]
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	461a      	mov	r2, r3
 8012e20:	f000 f9a9 	bl	8013176 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	2140      	movs	r1, #64	; 0x40
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f000 fa00 	bl	8013230 <TIM_ITRx_SetConfig>
      break;
 8012e30:	e00b      	b.n	8012e4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	4610      	mov	r0, r2
 8012e3e:	f000 f9f7 	bl	8013230 <TIM_ITRx_SetConfig>
        break;
 8012e42:	e002      	b.n	8012e4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8012e44:	bf00      	nop
 8012e46:	e000      	b.n	8012e4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8012e48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2200      	movs	r2, #0
 8012e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8012e5a:	2300      	movs	r3, #0
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3710      	adds	r7, #16
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012e6c:	bf00      	nop
 8012e6e:	370c      	adds	r7, #12
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bc80      	pop	{r7}
 8012e74:	4770      	bx	lr

08012e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012e76:	b480      	push	{r7}
 8012e78:	b083      	sub	sp, #12
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012e7e:	bf00      	nop
 8012e80:	370c      	adds	r7, #12
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bc80      	pop	{r7}
 8012e86:	4770      	bx	lr

08012e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012e90:	bf00      	nop
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bc80      	pop	{r7}
 8012e98:	4770      	bx	lr

08012e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012e9a:	b480      	push	{r7}
 8012e9c:	b083      	sub	sp, #12
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012ea2:	bf00      	nop
 8012ea4:	370c      	adds	r7, #12
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bc80      	pop	{r7}
 8012eaa:	4770      	bx	lr

08012eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012ec2:	d00f      	beq.n	8012ee4 <TIM_Base_SetConfig+0x38>
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	4a2b      	ldr	r2, [pc, #172]	; (8012f74 <TIM_Base_SetConfig+0xc8>)
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d00b      	beq.n	8012ee4 <TIM_Base_SetConfig+0x38>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	4a2a      	ldr	r2, [pc, #168]	; (8012f78 <TIM_Base_SetConfig+0xcc>)
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	d007      	beq.n	8012ee4 <TIM_Base_SetConfig+0x38>
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	4a29      	ldr	r2, [pc, #164]	; (8012f7c <TIM_Base_SetConfig+0xd0>)
 8012ed8:	4293      	cmp	r3, r2
 8012eda:	d003      	beq.n	8012ee4 <TIM_Base_SetConfig+0x38>
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	4a28      	ldr	r2, [pc, #160]	; (8012f80 <TIM_Base_SetConfig+0xd4>)
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	d108      	bne.n	8012ef6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	68fa      	ldr	r2, [r7, #12]
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012efc:	d017      	beq.n	8012f2e <TIM_Base_SetConfig+0x82>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4a1c      	ldr	r2, [pc, #112]	; (8012f74 <TIM_Base_SetConfig+0xc8>)
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d013      	beq.n	8012f2e <TIM_Base_SetConfig+0x82>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	4a1b      	ldr	r2, [pc, #108]	; (8012f78 <TIM_Base_SetConfig+0xcc>)
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d00f      	beq.n	8012f2e <TIM_Base_SetConfig+0x82>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4a1a      	ldr	r2, [pc, #104]	; (8012f7c <TIM_Base_SetConfig+0xd0>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d00b      	beq.n	8012f2e <TIM_Base_SetConfig+0x82>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4a19      	ldr	r2, [pc, #100]	; (8012f80 <TIM_Base_SetConfig+0xd4>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d007      	beq.n	8012f2e <TIM_Base_SetConfig+0x82>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	4a18      	ldr	r2, [pc, #96]	; (8012f84 <TIM_Base_SetConfig+0xd8>)
 8012f22:	4293      	cmp	r3, r2
 8012f24:	d003      	beq.n	8012f2e <TIM_Base_SetConfig+0x82>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	4a17      	ldr	r2, [pc, #92]	; (8012f88 <TIM_Base_SetConfig+0xdc>)
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d108      	bne.n	8012f40 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	68fa      	ldr	r2, [r7, #12]
 8012f3c:	4313      	orrs	r3, r2
 8012f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	691b      	ldr	r3, [r3, #16]
 8012f4a:	4313      	orrs	r3, r2
 8012f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	68fa      	ldr	r2, [r7, #12]
 8012f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	689a      	ldr	r2, [r3, #8]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	681a      	ldr	r2, [r3, #0]
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2201      	movs	r2, #1
 8012f68:	615a      	str	r2, [r3, #20]
}
 8012f6a:	bf00      	nop
 8012f6c:	3714      	adds	r7, #20
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bc80      	pop	{r7}
 8012f72:	4770      	bx	lr
 8012f74:	40000400 	.word	0x40000400
 8012f78:	40000800 	.word	0x40000800
 8012f7c:	40000c00 	.word	0x40000c00
 8012f80:	40010800 	.word	0x40010800
 8012f84:	40010c00 	.word	0x40010c00
 8012f88:	40011000 	.word	0x40011000

08012f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b087      	sub	sp, #28
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6a1b      	ldr	r3, [r3, #32]
 8012f9a:	f023 0201 	bic.w	r2, r3, #1
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6a1b      	ldr	r3, [r3, #32]
 8012fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	699b      	ldr	r3, [r3, #24]
 8012fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f023 0303 	bic.w	r3, r3, #3
 8012fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	68fa      	ldr	r2, [r7, #12]
 8012fca:	4313      	orrs	r3, r2
 8012fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	f023 0302 	bic.w	r3, r3, #2
 8012fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	697a      	ldr	r2, [r7, #20]
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	693a      	ldr	r2, [r7, #16]
 8012fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	68fa      	ldr	r2, [r7, #12]
 8012fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	685a      	ldr	r2, [r3, #4]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	697a      	ldr	r2, [r7, #20]
 8012ff8:	621a      	str	r2, [r3, #32]
}
 8012ffa:	bf00      	nop
 8012ffc:	371c      	adds	r7, #28
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bc80      	pop	{r7}
 8013002:	4770      	bx	lr

08013004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013004:	b480      	push	{r7}
 8013006:	b087      	sub	sp, #28
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6a1b      	ldr	r3, [r3, #32]
 8013012:	f023 0210 	bic.w	r2, r3, #16
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6a1b      	ldr	r3, [r3, #32]
 801301e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	685b      	ldr	r3, [r3, #4]
 8013024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	699b      	ldr	r3, [r3, #24]
 801302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801303a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	021b      	lsls	r3, r3, #8
 8013042:	68fa      	ldr	r2, [r7, #12]
 8013044:	4313      	orrs	r3, r2
 8013046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	f023 0320 	bic.w	r3, r3, #32
 801304e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	011b      	lsls	r3, r3, #4
 8013056:	697a      	ldr	r2, [r7, #20]
 8013058:	4313      	orrs	r3, r2
 801305a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	693a      	ldr	r2, [r7, #16]
 8013060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	68fa      	ldr	r2, [r7, #12]
 8013066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	685a      	ldr	r2, [r3, #4]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	697a      	ldr	r2, [r7, #20]
 8013074:	621a      	str	r2, [r3, #32]
}
 8013076:	bf00      	nop
 8013078:	371c      	adds	r7, #28
 801307a:	46bd      	mov	sp, r7
 801307c:	bc80      	pop	{r7}
 801307e:	4770      	bx	lr

08013080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013080:	b480      	push	{r7}
 8013082:	b087      	sub	sp, #28
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6a1b      	ldr	r3, [r3, #32]
 801308e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6a1b      	ldr	r3, [r3, #32]
 801309a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	69db      	ldr	r3, [r3, #28]
 80130a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	f023 0303 	bic.w	r3, r3, #3
 80130b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	4313      	orrs	r3, r2
 80130c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80130c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	689b      	ldr	r3, [r3, #8]
 80130ce:	021b      	lsls	r3, r3, #8
 80130d0:	697a      	ldr	r2, [r7, #20]
 80130d2:	4313      	orrs	r3, r2
 80130d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	693a      	ldr	r2, [r7, #16]
 80130da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	68fa      	ldr	r2, [r7, #12]
 80130e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	685a      	ldr	r2, [r3, #4]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	697a      	ldr	r2, [r7, #20]
 80130ee:	621a      	str	r2, [r3, #32]
}
 80130f0:	bf00      	nop
 80130f2:	371c      	adds	r7, #28
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bc80      	pop	{r7}
 80130f8:	4770      	bx	lr

080130fa <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80130fa:	b480      	push	{r7}
 80130fc:	b087      	sub	sp, #28
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
 8013102:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6a1b      	ldr	r3, [r3, #32]
 8013108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6a1b      	ldr	r3, [r3, #32]
 8013114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	69db      	ldr	r3, [r3, #28]
 8013120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013128:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013130:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	021b      	lsls	r3, r3, #8
 8013138:	68fa      	ldr	r2, [r7, #12]
 801313a:	4313      	orrs	r3, r2
 801313c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	031b      	lsls	r3, r3, #12
 801314c:	697a      	ldr	r2, [r7, #20]
 801314e:	4313      	orrs	r3, r2
 8013150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	693a      	ldr	r2, [r7, #16]
 8013156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	68fa      	ldr	r2, [r7, #12]
 801315c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	685a      	ldr	r2, [r3, #4]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	697a      	ldr	r2, [r7, #20]
 801316a:	621a      	str	r2, [r3, #32]
}
 801316c:	bf00      	nop
 801316e:	371c      	adds	r7, #28
 8013170:	46bd      	mov	sp, r7
 8013172:	bc80      	pop	{r7}
 8013174:	4770      	bx	lr

08013176 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013176:	b480      	push	{r7}
 8013178:	b087      	sub	sp, #28
 801317a:	af00      	add	r7, sp, #0
 801317c:	60f8      	str	r0, [r7, #12]
 801317e:	60b9      	str	r1, [r7, #8]
 8013180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	6a1b      	ldr	r3, [r3, #32]
 8013186:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	6a1b      	ldr	r3, [r3, #32]
 801318c:	f023 0201 	bic.w	r2, r3, #1
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	699b      	ldr	r3, [r3, #24]
 8013198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80131a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	011b      	lsls	r3, r3, #4
 80131a6:	693a      	ldr	r2, [r7, #16]
 80131a8:	4313      	orrs	r3, r2
 80131aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	f023 030a 	bic.w	r3, r3, #10
 80131b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80131b4:	697a      	ldr	r2, [r7, #20]
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	4313      	orrs	r3, r2
 80131ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	693a      	ldr	r2, [r7, #16]
 80131c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	697a      	ldr	r2, [r7, #20]
 80131c6:	621a      	str	r2, [r3, #32]
}
 80131c8:	bf00      	nop
 80131ca:	371c      	adds	r7, #28
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bc80      	pop	{r7}
 80131d0:	4770      	bx	lr

080131d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80131d2:	b480      	push	{r7}
 80131d4:	b087      	sub	sp, #28
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	60f8      	str	r0, [r7, #12]
 80131da:	60b9      	str	r1, [r7, #8]
 80131dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	6a1b      	ldr	r3, [r3, #32]
 80131e2:	f023 0210 	bic.w	r2, r3, #16
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	699b      	ldr	r3, [r3, #24]
 80131ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	6a1b      	ldr	r3, [r3, #32]
 80131f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80131fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	031b      	lsls	r3, r3, #12
 8013202:	697a      	ldr	r2, [r7, #20]
 8013204:	4313      	orrs	r3, r2
 8013206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801320e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	011b      	lsls	r3, r3, #4
 8013214:	693a      	ldr	r2, [r7, #16]
 8013216:	4313      	orrs	r3, r2
 8013218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	697a      	ldr	r2, [r7, #20]
 801321e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	693a      	ldr	r2, [r7, #16]
 8013224:	621a      	str	r2, [r3, #32]
}
 8013226:	bf00      	nop
 8013228:	371c      	adds	r7, #28
 801322a:	46bd      	mov	sp, r7
 801322c:	bc80      	pop	{r7}
 801322e:	4770      	bx	lr

08013230 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013230:	b480      	push	{r7}
 8013232:	b085      	sub	sp, #20
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013246:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013248:	683a      	ldr	r2, [r7, #0]
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	4313      	orrs	r3, r2
 801324e:	f043 0307 	orr.w	r3, r3, #7
 8013252:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	68fa      	ldr	r2, [r7, #12]
 8013258:	609a      	str	r2, [r3, #8]
}
 801325a:	bf00      	nop
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	bc80      	pop	{r7}
 8013262:	4770      	bx	lr

08013264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013264:	b480      	push	{r7}
 8013266:	b087      	sub	sp, #28
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
 8013270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	689b      	ldr	r3, [r3, #8]
 8013276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801327e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	021a      	lsls	r2, r3, #8
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	431a      	orrs	r2, r3
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	4313      	orrs	r3, r2
 801328c:	697a      	ldr	r2, [r7, #20]
 801328e:	4313      	orrs	r3, r2
 8013290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	697a      	ldr	r2, [r7, #20]
 8013296:	609a      	str	r2, [r3, #8]
}
 8013298:	bf00      	nop
 801329a:	371c      	adds	r7, #28
 801329c:	46bd      	mov	sp, r7
 801329e:	bc80      	pop	{r7}
 80132a0:	4770      	bx	lr

080132a2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80132a2:	b480      	push	{r7}
 80132a4:	b087      	sub	sp, #28
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	60f8      	str	r0, [r7, #12]
 80132aa:	60b9      	str	r1, [r7, #8]
 80132ac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	f003 031f 	and.w	r3, r3, #31
 80132b4:	2201      	movs	r2, #1
 80132b6:	fa02 f303 	lsl.w	r3, r2, r3
 80132ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	6a1a      	ldr	r2, [r3, #32]
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	43db      	mvns	r3, r3
 80132c4:	401a      	ands	r2, r3
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	6a1a      	ldr	r2, [r3, #32]
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	f003 031f 	and.w	r3, r3, #31
 80132d4:	6879      	ldr	r1, [r7, #4]
 80132d6:	fa01 f303 	lsl.w	r3, r1, r3
 80132da:	431a      	orrs	r2, r3
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	621a      	str	r2, [r3, #32]
}
 80132e0:	bf00      	nop
 80132e2:	371c      	adds	r7, #28
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bc80      	pop	{r7}
 80132e8:	4770      	bx	lr
	...

080132ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80132ec:	b480      	push	{r7}
 80132ee:	b085      	sub	sp, #20
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d101      	bne.n	8013304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013300:	2302      	movs	r3, #2
 8013302:	e046      	b.n	8013392 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2201      	movs	r2, #1
 8013308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2202      	movs	r2, #2
 8013310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	689b      	ldr	r3, [r3, #8]
 8013322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	68fa      	ldr	r2, [r7, #12]
 8013332:	4313      	orrs	r3, r2
 8013334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013346:	d00e      	beq.n	8013366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	4a13      	ldr	r2, [pc, #76]	; (801339c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801334e:	4293      	cmp	r3, r2
 8013350:	d009      	beq.n	8013366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	4a12      	ldr	r2, [pc, #72]	; (80133a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8013358:	4293      	cmp	r3, r2
 801335a:	d004      	beq.n	8013366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	4a10      	ldr	r2, [pc, #64]	; (80133a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8013362:	4293      	cmp	r3, r2
 8013364:	d10c      	bne.n	8013380 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801336c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	68ba      	ldr	r2, [r7, #8]
 8013374:	4313      	orrs	r3, r2
 8013376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	68ba      	ldr	r2, [r7, #8]
 801337e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2201      	movs	r2, #1
 8013384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2200      	movs	r2, #0
 801338c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8013390:	2300      	movs	r3, #0
}
 8013392:	4618      	mov	r0, r3
 8013394:	3714      	adds	r7, #20
 8013396:	46bd      	mov	sp, r7
 8013398:	bc80      	pop	{r7}
 801339a:	4770      	bx	lr
 801339c:	40000400 	.word	0x40000400
 80133a0:	40000800 	.word	0x40000800
 80133a4:	40010800 	.word	0x40010800

080133a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d101      	bne.n	80133ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80133b6:	2301      	movs	r3, #1
 80133b8:	e03f      	b.n	801343a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d106      	bne.n	80133d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2200      	movs	r2, #0
 80133ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	f7f6 ffa6 	bl	800a320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2224      	movs	r2, #36	; 0x24
 80133d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	68da      	ldr	r2, [r3, #12]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80133ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f000 fe15 	bl	801401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	691a      	ldr	r2, [r3, #16]
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	695a      	ldr	r2, [r3, #20]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	68da      	ldr	r2, [r3, #12]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2200      	movs	r2, #0
 8013426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2220      	movs	r2, #32
 801342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2220      	movs	r2, #32
 8013434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013438:	2300      	movs	r3, #0
}
 801343a:	4618      	mov	r0, r3
 801343c:	3708      	adds	r7, #8
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}

08013442 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8013442:	b580      	push	{r7, lr}
 8013444:	b082      	sub	sp, #8
 8013446:	af00      	add	r7, sp, #0
 8013448:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d101      	bne.n	8013454 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8013450:	2301      	movs	r3, #1
 8013452:	e021      	b.n	8013498 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2224      	movs	r2, #36	; 0x24
 8013458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	68da      	ldr	r2, [r3, #12]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801346a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f7f7 f831 	bl	800a4d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2200      	movs	r2, #0
 8013476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2200      	movs	r2, #0
 801347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2200      	movs	r2, #0
 8013484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2200      	movs	r2, #0
 801348c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2200      	movs	r2, #0
 8013492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013496:	2300      	movs	r3, #0
}
 8013498:	4618      	mov	r0, r3
 801349a:	3708      	adds	r7, #8
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b08a      	sub	sp, #40	; 0x28
 80134a4:	af02      	add	r7, sp, #8
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	60b9      	str	r1, [r7, #8]
 80134aa:	603b      	str	r3, [r7, #0]
 80134ac:	4613      	mov	r3, r2
 80134ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80134b0:	2300      	movs	r3, #0
 80134b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	2b20      	cmp	r3, #32
 80134be:	d17c      	bne.n	80135ba <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d002      	beq.n	80134cc <HAL_UART_Transmit+0x2c>
 80134c6:	88fb      	ldrh	r3, [r7, #6]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d101      	bne.n	80134d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80134cc:	2301      	movs	r3, #1
 80134ce:	e075      	b.n	80135bc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d101      	bne.n	80134de <HAL_UART_Transmit+0x3e>
 80134da:	2302      	movs	r3, #2
 80134dc:	e06e      	b.n	80135bc <HAL_UART_Transmit+0x11c>
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2201      	movs	r2, #1
 80134e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2200      	movs	r2, #0
 80134ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	2221      	movs	r2, #33	; 0x21
 80134f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80134f4:	f7fb fd8e 	bl	800f014 <HAL_GetTick>
 80134f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	88fa      	ldrh	r2, [r7, #6]
 80134fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	88fa      	ldrh	r2, [r7, #6]
 8013504:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	689b      	ldr	r3, [r3, #8]
 801350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801350e:	d108      	bne.n	8013522 <HAL_UART_Transmit+0x82>
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	691b      	ldr	r3, [r3, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d104      	bne.n	8013522 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8013518:	2300      	movs	r3, #0
 801351a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	61bb      	str	r3, [r7, #24]
 8013520:	e003      	b.n	801352a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013526:	2300      	movs	r3, #0
 8013528:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2200      	movs	r2, #0
 801352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8013532:	e02a      	b.n	801358a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	2200      	movs	r2, #0
 801353c:	2180      	movs	r1, #128	; 0x80
 801353e:	68f8      	ldr	r0, [r7, #12]
 8013540:	f000 fb57 	bl	8013bf2 <UART_WaitOnFlagUntilTimeout>
 8013544:	4603      	mov	r3, r0
 8013546:	2b00      	cmp	r3, #0
 8013548:	d001      	beq.n	801354e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801354a:	2303      	movs	r3, #3
 801354c:	e036      	b.n	80135bc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d10b      	bne.n	801356c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013554:	69bb      	ldr	r3, [r7, #24]
 8013556:	881b      	ldrh	r3, [r3, #0]
 8013558:	461a      	mov	r2, r3
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013562:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	3302      	adds	r3, #2
 8013568:	61bb      	str	r3, [r7, #24]
 801356a:	e007      	b.n	801357c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	781a      	ldrb	r2, [r3, #0]
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013576:	69fb      	ldr	r3, [r7, #28]
 8013578:	3301      	adds	r3, #1
 801357a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013580:	b29b      	uxth	r3, r3
 8013582:	3b01      	subs	r3, #1
 8013584:	b29a      	uxth	r2, r3
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801358e:	b29b      	uxth	r3, r3
 8013590:	2b00      	cmp	r3, #0
 8013592:	d1cf      	bne.n	8013534 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	697b      	ldr	r3, [r7, #20]
 801359a:	2200      	movs	r2, #0
 801359c:	2140      	movs	r1, #64	; 0x40
 801359e:	68f8      	ldr	r0, [r7, #12]
 80135a0:	f000 fb27 	bl	8013bf2 <UART_WaitOnFlagUntilTimeout>
 80135a4:	4603      	mov	r3, r0
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d001      	beq.n	80135ae <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80135aa:	2303      	movs	r3, #3
 80135ac:	e006      	b.n	80135bc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2220      	movs	r2, #32
 80135b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80135b6:	2300      	movs	r3, #0
 80135b8:	e000      	b.n	80135bc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80135ba:	2302      	movs	r3, #2
  }
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3720      	adds	r7, #32
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b084      	sub	sp, #16
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	4613      	mov	r3, r2
 80135d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	2b20      	cmp	r3, #32
 80135dc:	d11d      	bne.n	801361a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d002      	beq.n	80135ea <HAL_UART_Receive_DMA+0x26>
 80135e4:	88fb      	ldrh	r3, [r7, #6]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d101      	bne.n	80135ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80135ea:	2301      	movs	r3, #1
 80135ec:	e016      	b.n	801361c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	d101      	bne.n	80135fc <HAL_UART_Receive_DMA+0x38>
 80135f8:	2302      	movs	r3, #2
 80135fa:	e00f      	b.n	801361c <HAL_UART_Receive_DMA+0x58>
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	2201      	movs	r2, #1
 8013600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 801360a:	88fb      	ldrh	r3, [r7, #6]
 801360c:	461a      	mov	r2, r3
 801360e:	68b9      	ldr	r1, [r7, #8]
 8013610:	68f8      	ldr	r0, [r7, #12]
 8013612:	f000 fb39 	bl	8013c88 <UART_Start_Receive_DMA>
 8013616:	4603      	mov	r3, r0
 8013618:	e000      	b.n	801361c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 801361a:	2302      	movs	r3, #2
  }
}
 801361c:	4618      	mov	r0, r3
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b084      	sub	sp, #16
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801362c:	2300      	movs	r3, #0
 801362e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	695b      	ldr	r3, [r3, #20]
 8013636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801363a:	2b80      	cmp	r3, #128	; 0x80
 801363c:	bf0c      	ite	eq
 801363e:	2301      	moveq	r3, #1
 8013640:	2300      	movne	r3, #0
 8013642:	b2db      	uxtb	r3, r3
 8013644:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801364c:	b2db      	uxtb	r3, r3
 801364e:	2b21      	cmp	r3, #33	; 0x21
 8013650:	d116      	bne.n	8013680 <HAL_UART_DMAStop+0x5c>
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d013      	beq.n	8013680 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	695a      	ldr	r2, [r3, #20]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013666:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801366c:	2b00      	cmp	r3, #0
 801366e:	d004      	beq.n	801367a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013674:	4618      	mov	r0, r3
 8013676:	f7fc fba3 	bl	800fdc0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f000 fb68 	bl	8013d50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	695b      	ldr	r3, [r3, #20]
 8013686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801368a:	2b40      	cmp	r3, #64	; 0x40
 801368c:	bf0c      	ite	eq
 801368e:	2301      	moveq	r3, #1
 8013690:	2300      	movne	r3, #0
 8013692:	b2db      	uxtb	r3, r3
 8013694:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801369c:	b2db      	uxtb	r3, r3
 801369e:	2b22      	cmp	r3, #34	; 0x22
 80136a0:	d116      	bne.n	80136d0 <HAL_UART_DMAStop+0xac>
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d013      	beq.n	80136d0 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	695a      	ldr	r2, [r3, #20]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80136b6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d004      	beq.n	80136ca <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7fc fb7b 	bl	800fdc0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f000 fb55 	bl	8013d7a <UART_EndRxTransfer>
  }

  return HAL_OK;
 80136d0:	2300      	movs	r3, #0
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3710      	adds	r7, #16
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
	...

080136dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b08a      	sub	sp, #40	; 0x28
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	695b      	ldr	r3, [r3, #20]
 80136fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80136fc:	2300      	movs	r3, #0
 80136fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8013700:	2300      	movs	r3, #0
 8013702:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013706:	f003 030f 	and.w	r3, r3, #15
 801370a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d10d      	bne.n	801372e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013714:	f003 0320 	and.w	r3, r3, #32
 8013718:	2b00      	cmp	r3, #0
 801371a:	d008      	beq.n	801372e <HAL_UART_IRQHandler+0x52>
 801371c:	6a3b      	ldr	r3, [r7, #32]
 801371e:	f003 0320 	and.w	r3, r3, #32
 8013722:	2b00      	cmp	r3, #0
 8013724:	d003      	beq.n	801372e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f000 fbce 	bl	8013ec8 <UART_Receive_IT>
      return;
 801372c:	e17b      	b.n	8013a26 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	2b00      	cmp	r3, #0
 8013732:	f000 80b1 	beq.w	8013898 <HAL_UART_IRQHandler+0x1bc>
 8013736:	69fb      	ldr	r3, [r7, #28]
 8013738:	f003 0301 	and.w	r3, r3, #1
 801373c:	2b00      	cmp	r3, #0
 801373e:	d105      	bne.n	801374c <HAL_UART_IRQHandler+0x70>
 8013740:	6a3b      	ldr	r3, [r7, #32]
 8013742:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8013746:	2b00      	cmp	r3, #0
 8013748:	f000 80a6 	beq.w	8013898 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374e:	f003 0301 	and.w	r3, r3, #1
 8013752:	2b00      	cmp	r3, #0
 8013754:	d00a      	beq.n	801376c <HAL_UART_IRQHandler+0x90>
 8013756:	6a3b      	ldr	r3, [r7, #32]
 8013758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801375c:	2b00      	cmp	r3, #0
 801375e:	d005      	beq.n	801376c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013764:	f043 0201 	orr.w	r2, r3, #1
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376e:	f003 0304 	and.w	r3, r3, #4
 8013772:	2b00      	cmp	r3, #0
 8013774:	d00a      	beq.n	801378c <HAL_UART_IRQHandler+0xb0>
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	f003 0301 	and.w	r3, r3, #1
 801377c:	2b00      	cmp	r3, #0
 801377e:	d005      	beq.n	801378c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013784:	f043 0202 	orr.w	r2, r3, #2
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378e:	f003 0302 	and.w	r3, r3, #2
 8013792:	2b00      	cmp	r3, #0
 8013794:	d00a      	beq.n	80137ac <HAL_UART_IRQHandler+0xd0>
 8013796:	69fb      	ldr	r3, [r7, #28]
 8013798:	f003 0301 	and.w	r3, r3, #1
 801379c:	2b00      	cmp	r3, #0
 801379e:	d005      	beq.n	80137ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a4:	f043 0204 	orr.w	r2, r3, #4
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80137ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ae:	f003 0308 	and.w	r3, r3, #8
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00f      	beq.n	80137d6 <HAL_UART_IRQHandler+0xfa>
 80137b6:	6a3b      	ldr	r3, [r7, #32]
 80137b8:	f003 0320 	and.w	r3, r3, #32
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d104      	bne.n	80137ca <HAL_UART_IRQHandler+0xee>
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	f003 0301 	and.w	r3, r3, #1
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d005      	beq.n	80137d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137ce:	f043 0208 	orr.w	r2, r3, #8
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f000 811e 	beq.w	8013a1c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80137e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e2:	f003 0320 	and.w	r3, r3, #32
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d007      	beq.n	80137fa <HAL_UART_IRQHandler+0x11e>
 80137ea:	6a3b      	ldr	r3, [r7, #32]
 80137ec:	f003 0320 	and.w	r3, r3, #32
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d002      	beq.n	80137fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f000 fb67 	bl	8013ec8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	695b      	ldr	r3, [r3, #20]
 8013800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013804:	2b40      	cmp	r3, #64	; 0x40
 8013806:	bf0c      	ite	eq
 8013808:	2301      	moveq	r3, #1
 801380a:	2300      	movne	r3, #0
 801380c:	b2db      	uxtb	r3, r3
 801380e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013814:	f003 0308 	and.w	r3, r3, #8
 8013818:	2b00      	cmp	r3, #0
 801381a:	d102      	bne.n	8013822 <HAL_UART_IRQHandler+0x146>
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d031      	beq.n	8013886 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 faa9 	bl	8013d7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	695b      	ldr	r3, [r3, #20]
 801382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013832:	2b40      	cmp	r3, #64	; 0x40
 8013834:	d123      	bne.n	801387e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	695a      	ldr	r2, [r3, #20]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013844:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801384a:	2b00      	cmp	r3, #0
 801384c:	d013      	beq.n	8013876 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013852:	4a76      	ldr	r2, [pc, #472]	; (8013a2c <HAL_UART_IRQHandler+0x350>)
 8013854:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801385a:	4618      	mov	r0, r3
 801385c:	f7fc faed 	bl	800fe3a <HAL_DMA_Abort_IT>
 8013860:	4603      	mov	r3, r0
 8013862:	2b00      	cmp	r3, #0
 8013864:	d016      	beq.n	8013894 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013870:	4610      	mov	r0, r2
 8013872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013874:	e00e      	b.n	8013894 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f000 f8ec 	bl	8013a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801387c:	e00a      	b.n	8013894 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f000 f8e8 	bl	8013a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013884:	e006      	b.n	8013894 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f000 f8e4 	bl	8013a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2200      	movs	r2, #0
 8013890:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8013892:	e0c3      	b.n	8013a1c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013894:	bf00      	nop
    return;
 8013896:	e0c1      	b.n	8013a1c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801389c:	2b01      	cmp	r3, #1
 801389e:	f040 80a1 	bne.w	80139e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80138a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a4:	f003 0310 	and.w	r3, r3, #16
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	f000 809b 	beq.w	80139e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80138ae:	6a3b      	ldr	r3, [r7, #32]
 80138b0:	f003 0310 	and.w	r3, r3, #16
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	f000 8095 	beq.w	80139e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80138ba:	2300      	movs	r3, #0
 80138bc:	60fb      	str	r3, [r7, #12]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	60fb      	str	r3, [r7, #12]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	60fb      	str	r3, [r7, #12]
 80138ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	695b      	ldr	r3, [r3, #20]
 80138d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138da:	2b40      	cmp	r3, #64	; 0x40
 80138dc:	d14e      	bne.n	801397c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80138e8:	8a3b      	ldrh	r3, [r7, #16]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	f000 8098 	beq.w	8013a20 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80138f4:	8a3a      	ldrh	r2, [r7, #16]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	f080 8092 	bcs.w	8013a20 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	8a3a      	ldrh	r2, [r7, #16]
 8013900:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013906:	699b      	ldr	r3, [r3, #24]
 8013908:	2b20      	cmp	r3, #32
 801390a:	d02b      	beq.n	8013964 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	68da      	ldr	r2, [r3, #12]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801391a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	695a      	ldr	r2, [r3, #20]
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	f022 0201 	bic.w	r2, r2, #1
 801392a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	695a      	ldr	r2, [r3, #20]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801393a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2220      	movs	r2, #32
 8013940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2200      	movs	r2, #0
 8013948:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	68da      	ldr	r2, [r3, #12]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f022 0210 	bic.w	r2, r2, #16
 8013958:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801395e:	4618      	mov	r0, r3
 8013960:	f7fc fa2e 	bl	800fdc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801396c:	b29b      	uxth	r3, r3
 801396e:	1ad3      	subs	r3, r2, r3
 8013970:	b29b      	uxth	r3, r3
 8013972:	4619      	mov	r1, r3
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f000 f876 	bl	8013a66 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801397a:	e051      	b.n	8013a20 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013984:	b29b      	uxth	r3, r3
 8013986:	1ad3      	subs	r3, r2, r3
 8013988:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801398e:	b29b      	uxth	r3, r3
 8013990:	2b00      	cmp	r3, #0
 8013992:	d047      	beq.n	8013a24 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8013994:	8a7b      	ldrh	r3, [r7, #18]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d044      	beq.n	8013a24 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	68da      	ldr	r2, [r3, #12]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80139a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	695a      	ldr	r2, [r3, #20]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f022 0201 	bic.w	r2, r2, #1
 80139b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2220      	movs	r2, #32
 80139be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	68da      	ldr	r2, [r3, #12]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	f022 0210 	bic.w	r2, r2, #16
 80139d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80139d8:	8a7b      	ldrh	r3, [r7, #18]
 80139da:	4619      	mov	r1, r3
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f000 f842 	bl	8013a66 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80139e2:	e01f      	b.n	8013a24 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80139e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d008      	beq.n	8013a00 <HAL_UART_IRQHandler+0x324>
 80139ee:	6a3b      	ldr	r3, [r7, #32]
 80139f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d003      	beq.n	8013a00 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f000 f9fe 	bl	8013dfa <UART_Transmit_IT>
    return;
 80139fe:	e012      	b.n	8013a26 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d00d      	beq.n	8013a26 <HAL_UART_IRQHandler+0x34a>
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d008      	beq.n	8013a26 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 fa3f 	bl	8013e98 <UART_EndTransmit_IT>
    return;
 8013a1a:	e004      	b.n	8013a26 <HAL_UART_IRQHandler+0x34a>
    return;
 8013a1c:	bf00      	nop
 8013a1e:	e002      	b.n	8013a26 <HAL_UART_IRQHandler+0x34a>
      return;
 8013a20:	bf00      	nop
 8013a22:	e000      	b.n	8013a26 <HAL_UART_IRQHandler+0x34a>
      return;
 8013a24:	bf00      	nop
  }
}
 8013a26:	3728      	adds	r7, #40	; 0x28
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	08013dd3 	.word	0x08013dd3

08013a30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013a30:	b480      	push	{r7}
 8013a32:	b083      	sub	sp, #12
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8013a38:	bf00      	nop
 8013a3a:	370c      	adds	r7, #12
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bc80      	pop	{r7}
 8013a40:	4770      	bx	lr

08013a42 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013a42:	b480      	push	{r7}
 8013a44:	b083      	sub	sp, #12
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8013a4a:	bf00      	nop
 8013a4c:	370c      	adds	r7, #12
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bc80      	pop	{r7}
 8013a52:	4770      	bx	lr

08013a54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8013a5c:	bf00      	nop
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bc80      	pop	{r7}
 8013a64:	4770      	bx	lr

08013a66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013a66:	b480      	push	{r7}
 8013a68:	b083      	sub	sp, #12
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
 8013a6e:	460b      	mov	r3, r1
 8013a70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013a72:	bf00      	nop
 8013a74:	370c      	adds	r7, #12
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bc80      	pop	{r7}
 8013a7a:	4770      	bx	lr

08013a7c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	370c      	adds	r7, #12
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bc80      	pop	{r7}
 8013a90:	4770      	bx	lr

08013a92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b084      	sub	sp, #16
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a9e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	f003 0320 	and.w	r3, r3, #32
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d12a      	bne.n	8013b04 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	68da      	ldr	r2, [r3, #12]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013ac2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	695a      	ldr	r2, [r3, #20]
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	f022 0201 	bic.w	r2, r2, #1
 8013ad2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	695a      	ldr	r2, [r3, #20]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ae2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2220      	movs	r2, #32
 8013ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013af0:	2b01      	cmp	r3, #1
 8013af2:	d107      	bne.n	8013b04 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	68da      	ldr	r2, [r3, #12]
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	f022 0210 	bic.w	r2, r2, #16
 8013b02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	d106      	bne.n	8013b1a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013b10:	4619      	mov	r1, r3
 8013b12:	68f8      	ldr	r0, [r7, #12]
 8013b14:	f7ff ffa7 	bl	8013a66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013b18:	e002      	b.n	8013b20 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8013b1a:	68f8      	ldr	r0, [r7, #12]
 8013b1c:	f7fa fe7a 	bl	800e814 <HAL_UART_RxCpltCallback>
}
 8013b20:	bf00      	nop
 8013b22:	3710      	adds	r7, #16
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b084      	sub	sp, #16
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b3a:	2b01      	cmp	r3, #1
 8013b3c:	d108      	bne.n	8013b50 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013b42:	085b      	lsrs	r3, r3, #1
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	4619      	mov	r1, r3
 8013b48:	68f8      	ldr	r0, [r7, #12]
 8013b4a:	f7ff ff8c 	bl	8013a66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013b4e:	e002      	b.n	8013b56 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8013b50:	68f8      	ldr	r0, [r7, #12]
 8013b52:	f7ff ff76 	bl	8013a42 <HAL_UART_RxHalfCpltCallback>
}
 8013b56:	bf00      	nop
 8013b58:	3710      	adds	r7, #16
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b084      	sub	sp, #16
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013b66:	2300      	movs	r3, #0
 8013b68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	695b      	ldr	r3, [r3, #20]
 8013b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b7a:	2b80      	cmp	r3, #128	; 0x80
 8013b7c:	bf0c      	ite	eq
 8013b7e:	2301      	moveq	r3, #1
 8013b80:	2300      	movne	r3, #0
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b8c:	b2db      	uxtb	r3, r3
 8013b8e:	2b21      	cmp	r3, #33	; 0x21
 8013b90:	d108      	bne.n	8013ba4 <UART_DMAError+0x46>
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d005      	beq.n	8013ba4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8013b9e:	68b8      	ldr	r0, [r7, #8]
 8013ba0:	f000 f8d6 	bl	8013d50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	695b      	ldr	r3, [r3, #20]
 8013baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bae:	2b40      	cmp	r3, #64	; 0x40
 8013bb0:	bf0c      	ite	eq
 8013bb2:	2301      	moveq	r3, #1
 8013bb4:	2300      	movne	r3, #0
 8013bb6:	b2db      	uxtb	r3, r3
 8013bb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013bc0:	b2db      	uxtb	r3, r3
 8013bc2:	2b22      	cmp	r3, #34	; 0x22
 8013bc4:	d108      	bne.n	8013bd8 <UART_DMAError+0x7a>
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d005      	beq.n	8013bd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8013bd2:	68b8      	ldr	r0, [r7, #8]
 8013bd4:	f000 f8d1 	bl	8013d7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013bd8:	68bb      	ldr	r3, [r7, #8]
 8013bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bdc:	f043 0210 	orr.w	r2, r3, #16
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013be4:	68b8      	ldr	r0, [r7, #8]
 8013be6:	f7ff ff35 	bl	8013a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013bea:	bf00      	nop
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}

08013bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b084      	sub	sp, #16
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	60f8      	str	r0, [r7, #12]
 8013bfa:	60b9      	str	r1, [r7, #8]
 8013bfc:	603b      	str	r3, [r7, #0]
 8013bfe:	4613      	mov	r3, r2
 8013c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c02:	e02c      	b.n	8013c5e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013c04:	69bb      	ldr	r3, [r7, #24]
 8013c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c0a:	d028      	beq.n	8013c5e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013c0c:	69bb      	ldr	r3, [r7, #24]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d007      	beq.n	8013c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8013c12:	f7fb f9ff 	bl	800f014 <HAL_GetTick>
 8013c16:	4602      	mov	r2, r0
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	1ad3      	subs	r3, r2, r3
 8013c1c:	69ba      	ldr	r2, [r7, #24]
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	d21d      	bcs.n	8013c5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	68da      	ldr	r2, [r3, #12]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013c30:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	695a      	ldr	r2, [r3, #20]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f022 0201 	bic.w	r2, r2, #1
 8013c40:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	2220      	movs	r2, #32
 8013c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	2220      	movs	r2, #32
 8013c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	2200      	movs	r2, #0
 8013c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8013c5a:	2303      	movs	r3, #3
 8013c5c:	e00f      	b.n	8013c7e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	4013      	ands	r3, r2
 8013c68:	68ba      	ldr	r2, [r7, #8]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	bf0c      	ite	eq
 8013c6e:	2301      	moveq	r3, #1
 8013c70:	2300      	movne	r3, #0
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	461a      	mov	r2, r3
 8013c76:	79fb      	ldrb	r3, [r7, #7]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d0c3      	beq.n	8013c04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013c7c:	2300      	movs	r3, #0
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3710      	adds	r7, #16
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
	...

08013c88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b086      	sub	sp, #24
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	4613      	mov	r3, r2
 8013c94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8013c96:	68ba      	ldr	r2, [r7, #8]
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	88fa      	ldrh	r2, [r7, #6]
 8013ca0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	2222      	movs	r2, #34	; 0x22
 8013cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cb4:	4a23      	ldr	r2, [pc, #140]	; (8013d44 <UART_Start_Receive_DMA+0xbc>)
 8013cb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cbc:	4a22      	ldr	r2, [pc, #136]	; (8013d48 <UART_Start_Receive_DMA+0xc0>)
 8013cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cc4:	4a21      	ldr	r2, [pc, #132]	; (8013d4c <UART_Start_Receive_DMA+0xc4>)
 8013cc6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ccc:	2200      	movs	r2, #0
 8013cce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8013cd0:	f107 0308 	add.w	r3, r7, #8
 8013cd4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	3304      	adds	r3, #4
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	88fb      	ldrh	r3, [r7, #6]
 8013ce8:	f7fc f80a 	bl	800fd00 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8013cec:	2300      	movs	r3, #0
 8013cee:	613b      	str	r3, [r7, #16]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	613b      	str	r3, [r7, #16]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	613b      	str	r3, [r7, #16]
 8013d00:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	2200      	movs	r2, #0
 8013d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	68da      	ldr	r2, [r3, #12]
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013d18:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	695a      	ldr	r2, [r3, #20]
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f042 0201 	orr.w	r2, r2, #1
 8013d28:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	695a      	ldr	r2, [r3, #20]
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d38:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8013d3a:	2300      	movs	r3, #0
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3718      	adds	r7, #24
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	08013a93 	.word	0x08013a93
 8013d48:	08013b29 	.word	0x08013b29
 8013d4c:	08013b5f 	.word	0x08013b5f

08013d50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013d50:	b480      	push	{r7}
 8013d52:	b083      	sub	sp, #12
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	68da      	ldr	r2, [r3, #12]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8013d66:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2220      	movs	r2, #32
 8013d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8013d70:	bf00      	nop
 8013d72:	370c      	adds	r7, #12
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bc80      	pop	{r7}
 8013d78:	4770      	bx	lr

08013d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013d7a:	b480      	push	{r7}
 8013d7c:	b083      	sub	sp, #12
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	68da      	ldr	r2, [r3, #12]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013d90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	695a      	ldr	r2, [r3, #20]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f022 0201 	bic.w	r2, r2, #1
 8013da0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d107      	bne.n	8013dba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	68da      	ldr	r2, [r3, #12]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f022 0210 	bic.w	r2, r2, #16
 8013db8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2220      	movs	r2, #32
 8013dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8013dc8:	bf00      	nop
 8013dca:	370c      	adds	r7, #12
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bc80      	pop	{r7}
 8013dd0:	4770      	bx	lr

08013dd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013dd2:	b580      	push	{r7, lr}
 8013dd4:	b084      	sub	sp, #16
 8013dd6:	af00      	add	r7, sp, #0
 8013dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	2200      	movs	r2, #0
 8013de4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	2200      	movs	r2, #0
 8013dea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013dec:	68f8      	ldr	r0, [r7, #12]
 8013dee:	f7ff fe31 	bl	8013a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013df2:	bf00      	nop
 8013df4:	3710      	adds	r7, #16
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8013dfa:	b480      	push	{r7}
 8013dfc:	b085      	sub	sp, #20
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e08:	b2db      	uxtb	r3, r3
 8013e0a:	2b21      	cmp	r3, #33	; 0x21
 8013e0c:	d13e      	bne.n	8013e8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	689b      	ldr	r3, [r3, #8]
 8013e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e16:	d114      	bne.n	8013e42 <UART_Transmit_IT+0x48>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	691b      	ldr	r3, [r3, #16]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d110      	bne.n	8013e42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6a1b      	ldr	r3, [r3, #32]
 8013e24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	881b      	ldrh	r3, [r3, #0]
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013e34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6a1b      	ldr	r3, [r3, #32]
 8013e3a:	1c9a      	adds	r2, r3, #2
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	621a      	str	r2, [r3, #32]
 8013e40:	e008      	b.n	8013e54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	6a1b      	ldr	r3, [r3, #32]
 8013e46:	1c59      	adds	r1, r3, #1
 8013e48:	687a      	ldr	r2, [r7, #4]
 8013e4a:	6211      	str	r1, [r2, #32]
 8013e4c:	781a      	ldrb	r2, [r3, #0]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013e58:	b29b      	uxth	r3, r3
 8013e5a:	3b01      	subs	r3, #1
 8013e5c:	b29b      	uxth	r3, r3
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	4619      	mov	r1, r3
 8013e62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d10f      	bne.n	8013e88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	68da      	ldr	r2, [r3, #12]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013e76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	68da      	ldr	r2, [r3, #12]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	e000      	b.n	8013e8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8013e8c:	2302      	movs	r3, #2
  }
}
 8013e8e:	4618      	mov	r0, r3
 8013e90:	3714      	adds	r7, #20
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bc80      	pop	{r7}
 8013e96:	4770      	bx	lr

08013e98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	68da      	ldr	r2, [r3, #12]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013eae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2220      	movs	r2, #32
 8013eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f7ff fdb9 	bl	8013a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8013ebe:	2300      	movs	r3, #0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b086      	sub	sp, #24
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	2b22      	cmp	r3, #34	; 0x22
 8013eda:	f040 8099 	bne.w	8014010 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	689b      	ldr	r3, [r3, #8]
 8013ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ee6:	d117      	bne.n	8013f18 <UART_Receive_IT+0x50>
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	691b      	ldr	r3, [r3, #16]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d113      	bne.n	8013f18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ef8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	b29b      	uxth	r3, r3
 8013f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f06:	b29a      	uxth	r2, r3
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f10:	1c9a      	adds	r2, r3, #2
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	629a      	str	r2, [r3, #40]	; 0x28
 8013f16:	e026      	b.n	8013f66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f1c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	689b      	ldr	r3, [r3, #8]
 8013f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f2a:	d007      	beq.n	8013f3c <UART_Receive_IT+0x74>
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	689b      	ldr	r3, [r3, #8]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d10a      	bne.n	8013f4a <UART_Receive_IT+0x82>
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	691b      	ldr	r3, [r3, #16]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d106      	bne.n	8013f4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	685b      	ldr	r3, [r3, #4]
 8013f42:	b2da      	uxtb	r2, r3
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	701a      	strb	r2, [r3, #0]
 8013f48:	e008      	b.n	8013f5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	685b      	ldr	r3, [r3, #4]
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f56:	b2da      	uxtb	r2, r3
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f60:	1c5a      	adds	r2, r3, #1
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	3b01      	subs	r3, #1
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	4619      	mov	r1, r3
 8013f74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d148      	bne.n	801400c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	68da      	ldr	r2, [r3, #12]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f022 0220 	bic.w	r2, r2, #32
 8013f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	68da      	ldr	r2, [r3, #12]
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013f98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	695a      	ldr	r2, [r3, #20]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f022 0201 	bic.w	r2, r2, #1
 8013fa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2220      	movs	r2, #32
 8013fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fb6:	2b01      	cmp	r3, #1
 8013fb8:	d123      	bne.n	8014002 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	68da      	ldr	r2, [r3, #12]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	f022 0210 	bic.w	r2, r2, #16
 8013fce:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	f003 0310 	and.w	r3, r3, #16
 8013fda:	2b10      	cmp	r3, #16
 8013fdc:	d10a      	bne.n	8013ff4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8013fde:	2300      	movs	r3, #0
 8013fe0:	60fb      	str	r3, [r7, #12]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	60fb      	str	r3, [r7, #12]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	60fb      	str	r3, [r7, #12]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f7ff fd33 	bl	8013a66 <HAL_UARTEx_RxEventCallback>
 8014000:	e002      	b.n	8014008 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f7fa fc06 	bl	800e814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8014008:	2300      	movs	r3, #0
 801400a:	e002      	b.n	8014012 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 801400c:	2300      	movs	r3, #0
 801400e:	e000      	b.n	8014012 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8014010:	2302      	movs	r3, #2
  }
}
 8014012:	4618      	mov	r0, r3
 8014014:	3718      	adds	r7, #24
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
	...

0801401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b084      	sub	sp, #16
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	691b      	ldr	r3, [r3, #16]
 801402a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	68da      	ldr	r2, [r3, #12]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	430a      	orrs	r2, r1
 8014038:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	689a      	ldr	r2, [r3, #8]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	691b      	ldr	r3, [r3, #16]
 8014042:	431a      	orrs	r2, r3
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	695b      	ldr	r3, [r3, #20]
 8014048:	431a      	orrs	r2, r3
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	69db      	ldr	r3, [r3, #28]
 801404e:	4313      	orrs	r3, r2
 8014050:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801405c:	f023 030c 	bic.w	r3, r3, #12
 8014060:	687a      	ldr	r2, [r7, #4]
 8014062:	6812      	ldr	r2, [r2, #0]
 8014064:	68b9      	ldr	r1, [r7, #8]
 8014066:	430b      	orrs	r3, r1
 8014068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	695b      	ldr	r3, [r3, #20]
 8014070:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	699a      	ldr	r2, [r3, #24]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	430a      	orrs	r2, r1
 801407e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	4a55      	ldr	r2, [pc, #340]	; (80141dc <UART_SetConfig+0x1c0>)
 8014086:	4293      	cmp	r3, r2
 8014088:	d103      	bne.n	8014092 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 801408a:	f7fd fbe3 	bl	8011854 <HAL_RCC_GetPCLK2Freq>
 801408e:	60f8      	str	r0, [r7, #12]
 8014090:	e002      	b.n	8014098 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8014092:	f7fd fbcb 	bl	801182c <HAL_RCC_GetPCLK1Freq>
 8014096:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	69db      	ldr	r3, [r3, #28]
 801409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80140a0:	d14c      	bne.n	801413c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80140a2:	68fa      	ldr	r2, [r7, #12]
 80140a4:	4613      	mov	r3, r2
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	4413      	add	r3, r2
 80140aa:	009a      	lsls	r2, r3, #2
 80140ac:	441a      	add	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80140b8:	4a49      	ldr	r2, [pc, #292]	; (80141e0 <UART_SetConfig+0x1c4>)
 80140ba:	fba2 2303 	umull	r2, r3, r2, r3
 80140be:	095b      	lsrs	r3, r3, #5
 80140c0:	0119      	lsls	r1, r3, #4
 80140c2:	68fa      	ldr	r2, [r7, #12]
 80140c4:	4613      	mov	r3, r2
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	4413      	add	r3, r2
 80140ca:	009a      	lsls	r2, r3, #2
 80140cc:	441a      	add	r2, r3
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	005b      	lsls	r3, r3, #1
 80140d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80140d8:	4b41      	ldr	r3, [pc, #260]	; (80141e0 <UART_SetConfig+0x1c4>)
 80140da:	fba3 0302 	umull	r0, r3, r3, r2
 80140de:	095b      	lsrs	r3, r3, #5
 80140e0:	2064      	movs	r0, #100	; 0x64
 80140e2:	fb00 f303 	mul.w	r3, r0, r3
 80140e6:	1ad3      	subs	r3, r2, r3
 80140e8:	00db      	lsls	r3, r3, #3
 80140ea:	3332      	adds	r3, #50	; 0x32
 80140ec:	4a3c      	ldr	r2, [pc, #240]	; (80141e0 <UART_SetConfig+0x1c4>)
 80140ee:	fba2 2303 	umull	r2, r3, r2, r3
 80140f2:	095b      	lsrs	r3, r3, #5
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80140fa:	4419      	add	r1, r3
 80140fc:	68fa      	ldr	r2, [r7, #12]
 80140fe:	4613      	mov	r3, r2
 8014100:	009b      	lsls	r3, r3, #2
 8014102:	4413      	add	r3, r2
 8014104:	009a      	lsls	r2, r3, #2
 8014106:	441a      	add	r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	685b      	ldr	r3, [r3, #4]
 801410c:	005b      	lsls	r3, r3, #1
 801410e:	fbb2 f2f3 	udiv	r2, r2, r3
 8014112:	4b33      	ldr	r3, [pc, #204]	; (80141e0 <UART_SetConfig+0x1c4>)
 8014114:	fba3 0302 	umull	r0, r3, r3, r2
 8014118:	095b      	lsrs	r3, r3, #5
 801411a:	2064      	movs	r0, #100	; 0x64
 801411c:	fb00 f303 	mul.w	r3, r0, r3
 8014120:	1ad3      	subs	r3, r2, r3
 8014122:	00db      	lsls	r3, r3, #3
 8014124:	3332      	adds	r3, #50	; 0x32
 8014126:	4a2e      	ldr	r2, [pc, #184]	; (80141e0 <UART_SetConfig+0x1c4>)
 8014128:	fba2 2303 	umull	r2, r3, r2, r3
 801412c:	095b      	lsrs	r3, r3, #5
 801412e:	f003 0207 	and.w	r2, r3, #7
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	440a      	add	r2, r1
 8014138:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801413a:	e04a      	b.n	80141d2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801413c:	68fa      	ldr	r2, [r7, #12]
 801413e:	4613      	mov	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	4413      	add	r3, r2
 8014144:	009a      	lsls	r2, r3, #2
 8014146:	441a      	add	r2, r3
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	009b      	lsls	r3, r3, #2
 801414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014152:	4a23      	ldr	r2, [pc, #140]	; (80141e0 <UART_SetConfig+0x1c4>)
 8014154:	fba2 2303 	umull	r2, r3, r2, r3
 8014158:	095b      	lsrs	r3, r3, #5
 801415a:	0119      	lsls	r1, r3, #4
 801415c:	68fa      	ldr	r2, [r7, #12]
 801415e:	4613      	mov	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	4413      	add	r3, r2
 8014164:	009a      	lsls	r2, r3, #2
 8014166:	441a      	add	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	685b      	ldr	r3, [r3, #4]
 801416c:	009b      	lsls	r3, r3, #2
 801416e:	fbb2 f2f3 	udiv	r2, r2, r3
 8014172:	4b1b      	ldr	r3, [pc, #108]	; (80141e0 <UART_SetConfig+0x1c4>)
 8014174:	fba3 0302 	umull	r0, r3, r3, r2
 8014178:	095b      	lsrs	r3, r3, #5
 801417a:	2064      	movs	r0, #100	; 0x64
 801417c:	fb00 f303 	mul.w	r3, r0, r3
 8014180:	1ad3      	subs	r3, r2, r3
 8014182:	011b      	lsls	r3, r3, #4
 8014184:	3332      	adds	r3, #50	; 0x32
 8014186:	4a16      	ldr	r2, [pc, #88]	; (80141e0 <UART_SetConfig+0x1c4>)
 8014188:	fba2 2303 	umull	r2, r3, r2, r3
 801418c:	095b      	lsrs	r3, r3, #5
 801418e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014192:	4419      	add	r1, r3
 8014194:	68fa      	ldr	r2, [r7, #12]
 8014196:	4613      	mov	r3, r2
 8014198:	009b      	lsls	r3, r3, #2
 801419a:	4413      	add	r3, r2
 801419c:	009a      	lsls	r2, r3, #2
 801419e:	441a      	add	r2, r3
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80141aa:	4b0d      	ldr	r3, [pc, #52]	; (80141e0 <UART_SetConfig+0x1c4>)
 80141ac:	fba3 0302 	umull	r0, r3, r3, r2
 80141b0:	095b      	lsrs	r3, r3, #5
 80141b2:	2064      	movs	r0, #100	; 0x64
 80141b4:	fb00 f303 	mul.w	r3, r0, r3
 80141b8:	1ad3      	subs	r3, r2, r3
 80141ba:	011b      	lsls	r3, r3, #4
 80141bc:	3332      	adds	r3, #50	; 0x32
 80141be:	4a08      	ldr	r2, [pc, #32]	; (80141e0 <UART_SetConfig+0x1c4>)
 80141c0:	fba2 2303 	umull	r2, r3, r2, r3
 80141c4:	095b      	lsrs	r3, r3, #5
 80141c6:	f003 020f 	and.w	r2, r3, #15
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	440a      	add	r2, r1
 80141d0:	609a      	str	r2, [r3, #8]
}
 80141d2:	bf00      	nop
 80141d4:	3710      	adds	r7, #16
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}
 80141da:	bf00      	nop
 80141dc:	40013800 	.word	0x40013800
 80141e0:	51eb851f 	.word	0x51eb851f

080141e4 <__errno>:
 80141e4:	4b01      	ldr	r3, [pc, #4]	; (80141ec <__errno+0x8>)
 80141e6:	6818      	ldr	r0, [r3, #0]
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop
 80141ec:	20000010 	.word	0x20000010

080141f0 <__libc_init_array>:
 80141f0:	b570      	push	{r4, r5, r6, lr}
 80141f2:	2600      	movs	r6, #0
 80141f4:	4d0c      	ldr	r5, [pc, #48]	; (8014228 <__libc_init_array+0x38>)
 80141f6:	4c0d      	ldr	r4, [pc, #52]	; (801422c <__libc_init_array+0x3c>)
 80141f8:	1b64      	subs	r4, r4, r5
 80141fa:	10a4      	asrs	r4, r4, #2
 80141fc:	42a6      	cmp	r6, r4
 80141fe:	d109      	bne.n	8014214 <__libc_init_array+0x24>
 8014200:	f000 fa0e 	bl	8014620 <_init>
 8014204:	2600      	movs	r6, #0
 8014206:	4d0a      	ldr	r5, [pc, #40]	; (8014230 <__libc_init_array+0x40>)
 8014208:	4c0a      	ldr	r4, [pc, #40]	; (8014234 <__libc_init_array+0x44>)
 801420a:	1b64      	subs	r4, r4, r5
 801420c:	10a4      	asrs	r4, r4, #2
 801420e:	42a6      	cmp	r6, r4
 8014210:	d105      	bne.n	801421e <__libc_init_array+0x2e>
 8014212:	bd70      	pop	{r4, r5, r6, pc}
 8014214:	f855 3b04 	ldr.w	r3, [r5], #4
 8014218:	4798      	blx	r3
 801421a:	3601      	adds	r6, #1
 801421c:	e7ee      	b.n	80141fc <__libc_init_array+0xc>
 801421e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014222:	4798      	blx	r3
 8014224:	3601      	adds	r6, #1
 8014226:	e7f2      	b.n	801420e <__libc_init_array+0x1e>
 8014228:	080147a8 	.word	0x080147a8
 801422c:	080147a8 	.word	0x080147a8
 8014230:	080147a8 	.word	0x080147a8
 8014234:	080147ac 	.word	0x080147ac

08014238 <memset>:
 8014238:	4603      	mov	r3, r0
 801423a:	4402      	add	r2, r0
 801423c:	4293      	cmp	r3, r2
 801423e:	d100      	bne.n	8014242 <memset+0xa>
 8014240:	4770      	bx	lr
 8014242:	f803 1b01 	strb.w	r1, [r3], #1
 8014246:	e7f9      	b.n	801423c <memset+0x4>

08014248 <log>:
 8014248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424a:	4604      	mov	r4, r0
 801424c:	460d      	mov	r5, r1
 801424e:	f000 f82f 	bl	80142b0 <__ieee754_log>
 8014252:	4622      	mov	r2, r4
 8014254:	4606      	mov	r6, r0
 8014256:	460f      	mov	r7, r1
 8014258:	462b      	mov	r3, r5
 801425a:	4620      	mov	r0, r4
 801425c:	4629      	mov	r1, r5
 801425e:	f7f1 ffed 	bl	800623c <__aeabi_dcmpun>
 8014262:	b998      	cbnz	r0, 801428c <log+0x44>
 8014264:	2200      	movs	r2, #0
 8014266:	2300      	movs	r3, #0
 8014268:	4620      	mov	r0, r4
 801426a:	4629      	mov	r1, r5
 801426c:	f7f1 ffdc 	bl	8006228 <__aeabi_dcmpgt>
 8014270:	b960      	cbnz	r0, 801428c <log+0x44>
 8014272:	2200      	movs	r2, #0
 8014274:	2300      	movs	r3, #0
 8014276:	4620      	mov	r0, r4
 8014278:	4629      	mov	r1, r5
 801427a:	f7f1 ffad 	bl	80061d8 <__aeabi_dcmpeq>
 801427e:	b140      	cbz	r0, 8014292 <log+0x4a>
 8014280:	f7ff ffb0 	bl	80141e4 <__errno>
 8014284:	2322      	movs	r3, #34	; 0x22
 8014286:	2600      	movs	r6, #0
 8014288:	4f06      	ldr	r7, [pc, #24]	; (80142a4 <log+0x5c>)
 801428a:	6003      	str	r3, [r0, #0]
 801428c:	4630      	mov	r0, r6
 801428e:	4639      	mov	r1, r7
 8014290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014292:	f7ff ffa7 	bl	80141e4 <__errno>
 8014296:	2321      	movs	r3, #33	; 0x21
 8014298:	6003      	str	r3, [r0, #0]
 801429a:	4803      	ldr	r0, [pc, #12]	; (80142a8 <log+0x60>)
 801429c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80142a0:	f000 b9b8 	b.w	8014614 <nan>
 80142a4:	fff00000 	.word	0xfff00000
 80142a8:	0801479c 	.word	0x0801479c
 80142ac:	00000000 	.word	0x00000000

080142b0 <__ieee754_log>:
 80142b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80142b8:	4602      	mov	r2, r0
 80142ba:	460b      	mov	r3, r1
 80142bc:	460d      	mov	r5, r1
 80142be:	b087      	sub	sp, #28
 80142c0:	da24      	bge.n	801430c <__ieee754_log+0x5c>
 80142c2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80142c6:	4304      	orrs	r4, r0
 80142c8:	d108      	bne.n	80142dc <__ieee754_log+0x2c>
 80142ca:	2200      	movs	r2, #0
 80142cc:	2300      	movs	r3, #0
 80142ce:	2000      	movs	r0, #0
 80142d0:	49cb      	ldr	r1, [pc, #812]	; (8014600 <__ieee754_log+0x350>)
 80142d2:	f7f1 fe43 	bl	8005f5c <__aeabi_ddiv>
 80142d6:	b007      	add	sp, #28
 80142d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142dc:	2900      	cmp	r1, #0
 80142de:	da04      	bge.n	80142ea <__ieee754_log+0x3a>
 80142e0:	f7f1 fb5a 	bl	8005998 <__aeabi_dsub>
 80142e4:	2200      	movs	r2, #0
 80142e6:	2300      	movs	r3, #0
 80142e8:	e7f3      	b.n	80142d2 <__ieee754_log+0x22>
 80142ea:	2200      	movs	r2, #0
 80142ec:	4bc5      	ldr	r3, [pc, #788]	; (8014604 <__ieee754_log+0x354>)
 80142ee:	f7f1 fd0b 	bl	8005d08 <__aeabi_dmul>
 80142f2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80142f6:	4602      	mov	r2, r0
 80142f8:	460b      	mov	r3, r1
 80142fa:	460d      	mov	r5, r1
 80142fc:	49c2      	ldr	r1, [pc, #776]	; (8014608 <__ieee754_log+0x358>)
 80142fe:	428d      	cmp	r5, r1
 8014300:	dd06      	ble.n	8014310 <__ieee754_log+0x60>
 8014302:	4610      	mov	r0, r2
 8014304:	4619      	mov	r1, r3
 8014306:	f7f1 fb49 	bl	800599c <__adddf3>
 801430a:	e7e4      	b.n	80142d6 <__ieee754_log+0x26>
 801430c:	2600      	movs	r6, #0
 801430e:	e7f5      	b.n	80142fc <__ieee754_log+0x4c>
 8014310:	152c      	asrs	r4, r5, #20
 8014312:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014316:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 801431a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801431e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8014322:	4426      	add	r6, r4
 8014324:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8014328:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 801432c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8014330:	ea41 0305 	orr.w	r3, r1, r5
 8014334:	4610      	mov	r0, r2
 8014336:	4619      	mov	r1, r3
 8014338:	2200      	movs	r2, #0
 801433a:	4bb4      	ldr	r3, [pc, #720]	; (801460c <__ieee754_log+0x35c>)
 801433c:	f7f1 fb2c 	bl	8005998 <__aeabi_dsub>
 8014340:	1cab      	adds	r3, r5, #2
 8014342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014346:	2b02      	cmp	r3, #2
 8014348:	4682      	mov	sl, r0
 801434a:	468b      	mov	fp, r1
 801434c:	f04f 0200 	mov.w	r2, #0
 8014350:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8014354:	dc53      	bgt.n	80143fe <__ieee754_log+0x14e>
 8014356:	2300      	movs	r3, #0
 8014358:	f7f1 ff3e 	bl	80061d8 <__aeabi_dcmpeq>
 801435c:	b1d0      	cbz	r0, 8014394 <__ieee754_log+0xe4>
 801435e:	2c00      	cmp	r4, #0
 8014360:	f000 8122 	beq.w	80145a8 <__ieee754_log+0x2f8>
 8014364:	4620      	mov	r0, r4
 8014366:	f7f1 fc65 	bl	8005c34 <__aeabi_i2d>
 801436a:	a391      	add	r3, pc, #580	; (adr r3, 80145b0 <__ieee754_log+0x300>)
 801436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014370:	4606      	mov	r6, r0
 8014372:	460f      	mov	r7, r1
 8014374:	f7f1 fcc8 	bl	8005d08 <__aeabi_dmul>
 8014378:	a38f      	add	r3, pc, #572	; (adr r3, 80145b8 <__ieee754_log+0x308>)
 801437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437e:	4604      	mov	r4, r0
 8014380:	460d      	mov	r5, r1
 8014382:	4630      	mov	r0, r6
 8014384:	4639      	mov	r1, r7
 8014386:	f7f1 fcbf 	bl	8005d08 <__aeabi_dmul>
 801438a:	4602      	mov	r2, r0
 801438c:	460b      	mov	r3, r1
 801438e:	4620      	mov	r0, r4
 8014390:	4629      	mov	r1, r5
 8014392:	e7b8      	b.n	8014306 <__ieee754_log+0x56>
 8014394:	a38a      	add	r3, pc, #552	; (adr r3, 80145c0 <__ieee754_log+0x310>)
 8014396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801439a:	4650      	mov	r0, sl
 801439c:	4659      	mov	r1, fp
 801439e:	f7f1 fcb3 	bl	8005d08 <__aeabi_dmul>
 80143a2:	4602      	mov	r2, r0
 80143a4:	460b      	mov	r3, r1
 80143a6:	2000      	movs	r0, #0
 80143a8:	4999      	ldr	r1, [pc, #612]	; (8014610 <__ieee754_log+0x360>)
 80143aa:	f7f1 faf5 	bl	8005998 <__aeabi_dsub>
 80143ae:	4652      	mov	r2, sl
 80143b0:	4606      	mov	r6, r0
 80143b2:	460f      	mov	r7, r1
 80143b4:	465b      	mov	r3, fp
 80143b6:	4650      	mov	r0, sl
 80143b8:	4659      	mov	r1, fp
 80143ba:	f7f1 fca5 	bl	8005d08 <__aeabi_dmul>
 80143be:	4602      	mov	r2, r0
 80143c0:	460b      	mov	r3, r1
 80143c2:	4630      	mov	r0, r6
 80143c4:	4639      	mov	r1, r7
 80143c6:	f7f1 fc9f 	bl	8005d08 <__aeabi_dmul>
 80143ca:	4606      	mov	r6, r0
 80143cc:	460f      	mov	r7, r1
 80143ce:	b914      	cbnz	r4, 80143d6 <__ieee754_log+0x126>
 80143d0:	4632      	mov	r2, r6
 80143d2:	463b      	mov	r3, r7
 80143d4:	e0a2      	b.n	801451c <__ieee754_log+0x26c>
 80143d6:	4620      	mov	r0, r4
 80143d8:	f7f1 fc2c 	bl	8005c34 <__aeabi_i2d>
 80143dc:	a374      	add	r3, pc, #464	; (adr r3, 80145b0 <__ieee754_log+0x300>)
 80143de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e2:	4680      	mov	r8, r0
 80143e4:	4689      	mov	r9, r1
 80143e6:	f7f1 fc8f 	bl	8005d08 <__aeabi_dmul>
 80143ea:	a373      	add	r3, pc, #460	; (adr r3, 80145b8 <__ieee754_log+0x308>)
 80143ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f0:	4604      	mov	r4, r0
 80143f2:	460d      	mov	r5, r1
 80143f4:	4640      	mov	r0, r8
 80143f6:	4649      	mov	r1, r9
 80143f8:	f7f1 fc86 	bl	8005d08 <__aeabi_dmul>
 80143fc:	e0a7      	b.n	801454e <__ieee754_log+0x29e>
 80143fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014402:	f7f1 facb 	bl	800599c <__adddf3>
 8014406:	4602      	mov	r2, r0
 8014408:	460b      	mov	r3, r1
 801440a:	4650      	mov	r0, sl
 801440c:	4659      	mov	r1, fp
 801440e:	f7f1 fda5 	bl	8005f5c <__aeabi_ddiv>
 8014412:	e9cd 0100 	strd	r0, r1, [sp]
 8014416:	4620      	mov	r0, r4
 8014418:	f7f1 fc0c 	bl	8005c34 <__aeabi_i2d>
 801441c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014424:	4610      	mov	r0, r2
 8014426:	4619      	mov	r1, r3
 8014428:	f7f1 fc6e 	bl	8005d08 <__aeabi_dmul>
 801442c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8014430:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8014434:	4602      	mov	r2, r0
 8014436:	9305      	str	r3, [sp, #20]
 8014438:	460b      	mov	r3, r1
 801443a:	4606      	mov	r6, r0
 801443c:	460f      	mov	r7, r1
 801443e:	f7f1 fc63 	bl	8005d08 <__aeabi_dmul>
 8014442:	a361      	add	r3, pc, #388	; (adr r3, 80145c8 <__ieee754_log+0x318>)
 8014444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014448:	4680      	mov	r8, r0
 801444a:	4689      	mov	r9, r1
 801444c:	f7f1 fc5c 	bl	8005d08 <__aeabi_dmul>
 8014450:	a35f      	add	r3, pc, #380	; (adr r3, 80145d0 <__ieee754_log+0x320>)
 8014452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014456:	f7f1 faa1 	bl	800599c <__adddf3>
 801445a:	4642      	mov	r2, r8
 801445c:	464b      	mov	r3, r9
 801445e:	f7f1 fc53 	bl	8005d08 <__aeabi_dmul>
 8014462:	a35d      	add	r3, pc, #372	; (adr r3, 80145d8 <__ieee754_log+0x328>)
 8014464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014468:	f7f1 fa98 	bl	800599c <__adddf3>
 801446c:	4642      	mov	r2, r8
 801446e:	464b      	mov	r3, r9
 8014470:	f7f1 fc4a 	bl	8005d08 <__aeabi_dmul>
 8014474:	a35a      	add	r3, pc, #360	; (adr r3, 80145e0 <__ieee754_log+0x330>)
 8014476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447a:	f7f1 fa8f 	bl	800599c <__adddf3>
 801447e:	4632      	mov	r2, r6
 8014480:	463b      	mov	r3, r7
 8014482:	f7f1 fc41 	bl	8005d08 <__aeabi_dmul>
 8014486:	a358      	add	r3, pc, #352	; (adr r3, 80145e8 <__ieee754_log+0x338>)
 8014488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448c:	4606      	mov	r6, r0
 801448e:	460f      	mov	r7, r1
 8014490:	4640      	mov	r0, r8
 8014492:	4649      	mov	r1, r9
 8014494:	f7f1 fc38 	bl	8005d08 <__aeabi_dmul>
 8014498:	a355      	add	r3, pc, #340	; (adr r3, 80145f0 <__ieee754_log+0x340>)
 801449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449e:	f7f1 fa7d 	bl	800599c <__adddf3>
 80144a2:	4642      	mov	r2, r8
 80144a4:	464b      	mov	r3, r9
 80144a6:	f7f1 fc2f 	bl	8005d08 <__aeabi_dmul>
 80144aa:	a353      	add	r3, pc, #332	; (adr r3, 80145f8 <__ieee754_log+0x348>)
 80144ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b0:	f7f1 fa74 	bl	800599c <__adddf3>
 80144b4:	4642      	mov	r2, r8
 80144b6:	464b      	mov	r3, r9
 80144b8:	f7f1 fc26 	bl	8005d08 <__aeabi_dmul>
 80144bc:	460b      	mov	r3, r1
 80144be:	4602      	mov	r2, r0
 80144c0:	4639      	mov	r1, r7
 80144c2:	4630      	mov	r0, r6
 80144c4:	f7f1 fa6a 	bl	800599c <__adddf3>
 80144c8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80144cc:	9b05      	ldr	r3, [sp, #20]
 80144ce:	3551      	adds	r5, #81	; 0x51
 80144d0:	431d      	orrs	r5, r3
 80144d2:	2d00      	cmp	r5, #0
 80144d4:	4680      	mov	r8, r0
 80144d6:	4689      	mov	r9, r1
 80144d8:	dd48      	ble.n	801456c <__ieee754_log+0x2bc>
 80144da:	2200      	movs	r2, #0
 80144dc:	4b4c      	ldr	r3, [pc, #304]	; (8014610 <__ieee754_log+0x360>)
 80144de:	4650      	mov	r0, sl
 80144e0:	4659      	mov	r1, fp
 80144e2:	f7f1 fc11 	bl	8005d08 <__aeabi_dmul>
 80144e6:	4652      	mov	r2, sl
 80144e8:	465b      	mov	r3, fp
 80144ea:	f7f1 fc0d 	bl	8005d08 <__aeabi_dmul>
 80144ee:	4602      	mov	r2, r0
 80144f0:	460b      	mov	r3, r1
 80144f2:	4606      	mov	r6, r0
 80144f4:	460f      	mov	r7, r1
 80144f6:	4640      	mov	r0, r8
 80144f8:	4649      	mov	r1, r9
 80144fa:	f7f1 fa4f 	bl	800599c <__adddf3>
 80144fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014502:	f7f1 fc01 	bl	8005d08 <__aeabi_dmul>
 8014506:	4680      	mov	r8, r0
 8014508:	4689      	mov	r9, r1
 801450a:	b964      	cbnz	r4, 8014526 <__ieee754_log+0x276>
 801450c:	4602      	mov	r2, r0
 801450e:	460b      	mov	r3, r1
 8014510:	4630      	mov	r0, r6
 8014512:	4639      	mov	r1, r7
 8014514:	f7f1 fa40 	bl	8005998 <__aeabi_dsub>
 8014518:	4602      	mov	r2, r0
 801451a:	460b      	mov	r3, r1
 801451c:	4650      	mov	r0, sl
 801451e:	4659      	mov	r1, fp
 8014520:	f7f1 fa3a 	bl	8005998 <__aeabi_dsub>
 8014524:	e6d7      	b.n	80142d6 <__ieee754_log+0x26>
 8014526:	a322      	add	r3, pc, #136	; (adr r3, 80145b0 <__ieee754_log+0x300>)
 8014528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801452c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014530:	f7f1 fbea 	bl	8005d08 <__aeabi_dmul>
 8014534:	a320      	add	r3, pc, #128	; (adr r3, 80145b8 <__ieee754_log+0x308>)
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	4604      	mov	r4, r0
 801453c:	460d      	mov	r5, r1
 801453e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014542:	f7f1 fbe1 	bl	8005d08 <__aeabi_dmul>
 8014546:	4642      	mov	r2, r8
 8014548:	464b      	mov	r3, r9
 801454a:	f7f1 fa27 	bl	800599c <__adddf3>
 801454e:	4602      	mov	r2, r0
 8014550:	460b      	mov	r3, r1
 8014552:	4630      	mov	r0, r6
 8014554:	4639      	mov	r1, r7
 8014556:	f7f1 fa1f 	bl	8005998 <__aeabi_dsub>
 801455a:	4652      	mov	r2, sl
 801455c:	465b      	mov	r3, fp
 801455e:	f7f1 fa1b 	bl	8005998 <__aeabi_dsub>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	4620      	mov	r0, r4
 8014568:	4629      	mov	r1, r5
 801456a:	e7d9      	b.n	8014520 <__ieee754_log+0x270>
 801456c:	4602      	mov	r2, r0
 801456e:	460b      	mov	r3, r1
 8014570:	4650      	mov	r0, sl
 8014572:	4659      	mov	r1, fp
 8014574:	f7f1 fa10 	bl	8005998 <__aeabi_dsub>
 8014578:	e9dd 2300 	ldrd	r2, r3, [sp]
 801457c:	f7f1 fbc4 	bl	8005d08 <__aeabi_dmul>
 8014580:	4606      	mov	r6, r0
 8014582:	460f      	mov	r7, r1
 8014584:	2c00      	cmp	r4, #0
 8014586:	f43f af23 	beq.w	80143d0 <__ieee754_log+0x120>
 801458a:	a309      	add	r3, pc, #36	; (adr r3, 80145b0 <__ieee754_log+0x300>)
 801458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014594:	f7f1 fbb8 	bl	8005d08 <__aeabi_dmul>
 8014598:	a307      	add	r3, pc, #28	; (adr r3, 80145b8 <__ieee754_log+0x308>)
 801459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801459e:	4604      	mov	r4, r0
 80145a0:	460d      	mov	r5, r1
 80145a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145a6:	e727      	b.n	80143f8 <__ieee754_log+0x148>
 80145a8:	2000      	movs	r0, #0
 80145aa:	2100      	movs	r1, #0
 80145ac:	e693      	b.n	80142d6 <__ieee754_log+0x26>
 80145ae:	bf00      	nop
 80145b0:	fee00000 	.word	0xfee00000
 80145b4:	3fe62e42 	.word	0x3fe62e42
 80145b8:	35793c76 	.word	0x35793c76
 80145bc:	3dea39ef 	.word	0x3dea39ef
 80145c0:	55555555 	.word	0x55555555
 80145c4:	3fd55555 	.word	0x3fd55555
 80145c8:	df3e5244 	.word	0xdf3e5244
 80145cc:	3fc2f112 	.word	0x3fc2f112
 80145d0:	96cb03de 	.word	0x96cb03de
 80145d4:	3fc74664 	.word	0x3fc74664
 80145d8:	94229359 	.word	0x94229359
 80145dc:	3fd24924 	.word	0x3fd24924
 80145e0:	55555593 	.word	0x55555593
 80145e4:	3fe55555 	.word	0x3fe55555
 80145e8:	d078c69f 	.word	0xd078c69f
 80145ec:	3fc39a09 	.word	0x3fc39a09
 80145f0:	1d8e78af 	.word	0x1d8e78af
 80145f4:	3fcc71c5 	.word	0x3fcc71c5
 80145f8:	9997fa04 	.word	0x9997fa04
 80145fc:	3fd99999 	.word	0x3fd99999
 8014600:	c3500000 	.word	0xc3500000
 8014604:	43500000 	.word	0x43500000
 8014608:	7fefffff 	.word	0x7fefffff
 801460c:	3ff00000 	.word	0x3ff00000
 8014610:	3fe00000 	.word	0x3fe00000

08014614 <nan>:
 8014614:	2000      	movs	r0, #0
 8014616:	4901      	ldr	r1, [pc, #4]	; (801461c <nan+0x8>)
 8014618:	4770      	bx	lr
 801461a:	bf00      	nop
 801461c:	7ff80000 	.word	0x7ff80000

08014620 <_init>:
 8014620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014622:	bf00      	nop
 8014624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014626:	bc08      	pop	{r3}
 8014628:	469e      	mov	lr, r3
 801462a:	4770      	bx	lr

0801462c <_fini>:
 801462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801462e:	bf00      	nop
 8014630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014632:	bc08      	pop	{r3}
 8014634:	469e      	mov	lr, r3
 8014636:	4770      	bx	lr
